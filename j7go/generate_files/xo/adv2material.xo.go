// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// Adv2Material represents a row from 'aypcddg.adv2_material'.
type Adv2Material struct {
	ID         int            `json:"id"`          // id
	Width      sql.NullInt64  `json:"width"`       // width
	Height     sql.NullInt64  `json:"height"`      // height
	Sha        sql.NullString `json:"sha"`         // sha
	URL        sql.NullString `json:"url"`         // url
	Created    sql.NullInt64  `json:"created"`     // created
	Updated    sql.NullInt64  `json:"updated"`     // updated
	ResourceID sql.NullInt64  `json:"resource_id"` // resource_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Adv2Material exists in the database.
func (a *Adv2Material) Exists() bool { //adv2_material
	return a._exists
}

// Deleted provides information if the Adv2Material has been deleted from the database.
func (a *Adv2Material) Deleted() bool {
	return a._deleted
}

// Get table name
func GetAdv2MaterialTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "adv2_material", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Adv2Material to the database.
func (a *Adv2Material) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdv2MaterialTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`width, height, sha, url, created, updated, resource_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.Width, a.Height, a.Sha, a.URL, a.Created, a.Updated, a.ResourceID)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, a.Width, a.Height, a.Sha, a.URL, a.Created, a.Updated, a.ResourceID)
	} else {
		res, err = dbConn.Exec(sqlstr, a.Width, a.Height, a.Sha, a.URL, a.Created, a.Updated, a.ResourceID)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.ID = int(id)
	a._exists = true

	return nil
}

// Update updates the Adv2Material in the database.
func (a *Adv2Material) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdv2MaterialTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`width = ?, height = ?, sha = ?, url = ?, created = ?, updated = ?, resource_id = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.Width, a.Height, a.Sha, a.URL, a.Created, a.Updated, a.ResourceID, a.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, a.Width, a.Height, a.Sha, a.URL, a.Created, a.Updated, a.ResourceID, a.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, a.Width, a.Height, a.Sha, a.URL, a.Created, a.Updated, a.ResourceID, a.ID)
	}
	return err
}

// Save saves the Adv2Material to the database.
func (a *Adv2Material) Save(ctx context.Context) error {
	if a.Exists() {
		return a.Update(ctx)
	}

	return a.Insert(ctx)
}

// Delete deletes the Adv2Material from the database.
func (a *Adv2Material) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if a._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdv2MaterialTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, a.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, a.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// Adv2MaterialByID retrieves a row from 'aypcddg.adv2_material' as a Adv2Material.
//
// Generated from index 'adv2_material_id_pkey'.
func Adv2MaterialByID(ctx context.Context, id int, key ...interface{}) (*Adv2Material, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAdv2MaterialTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, width, height, sha, url, created, updated, resource_id ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	a := Adv2Material{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&a.ID, &a.Width, &a.Height, &a.Sha, &a.URL, &a.Created, &a.Updated, &a.ResourceID)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&a.ID, &a.Width, &a.Height, &a.Sha, &a.URL, &a.Created, &a.Updated, &a.ResourceID)
		if err != nil {
			return nil, err
		}
	}

	return &a, nil
}
