// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// SaleplanExtend represents a row from 'aypcddg.saleplan_extend'.
type SaleplanExtend struct {
	PlanID                int            `json:"plan_id"`                  // plan_id
	Logo                  sql.NullString `json:"logo"`                     // logo
	ParentID              sql.NullInt64  `json:"parent_id"`                // parent_id
	IsPushed              sql.NullInt64  `json:"is_pushed"`                // is_pushed
	HeaderLogo            sql.NullString `json:"header_logo"`              // header_logo
	RejectGids            sql.NullString `json:"reject_gids"`              // reject_gids
	ShipDesc              sql.NullString `json:"ship_desc"`                // ship_desc
	ActivityDesc          sql.NullString `json:"activity_desc"`            // activity_desc
	AuditRemark           sql.NullString `json:"audit_remark"`             // audit_remark
	NeedSplit             sql.NullInt64  `json:"need_split"`               // need_split
	IsSplit               sql.NullInt64  `json:"is_split"`                 // is_split
	ExpectOnlineStartTime mysql.NullTime `json:"expect_online_start_time"` // expect_online_start_time
	ExpectOnlineEndTime   mysql.NullTime `json:"expect_online_end_time"`   // expect_online_end_time
	SplitNums             sql.NullInt64  `json:"split_nums"`               // split_nums
	Created               sql.NullInt64  `json:"created"`                  // created
	Updated               sql.NullInt64  `json:"updated"`                  // updated
	BackgroundImg         sql.NullString `json:"background_img"`           // background_img

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SaleplanExtend exists in the database.
func (se *SaleplanExtend) Exists() bool { //saleplan_extend
	return se._exists
}

// Deleted provides information if the SaleplanExtend has been deleted from the database.
func (se *SaleplanExtend) Deleted() bool {
	return se._deleted
}

// Get table name
func GetSaleplanExtendTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "saleplan_extend", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the SaleplanExtend to the database.
func (se *SaleplanExtend) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if se._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSaleplanExtendTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`plan_id, logo, parent_id, is_pushed, header_logo, reject_gids, ship_desc, activity_desc, audit_remark, need_split, is_split, expect_online_start_time, expect_online_end_time, split_nums, created, updated, background_img` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, se.PlanID, se.Logo, se.ParentID, se.IsPushed, se.HeaderLogo, se.RejectGids, se.ShipDesc, se.ActivityDesc, se.AuditRemark, se.NeedSplit, se.IsSplit, se.ExpectOnlineStartTime, se.ExpectOnlineEndTime, se.SplitNums, se.Created, se.Updated, se.BackgroundImg)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, se.PlanID, se.Logo, se.ParentID, se.IsPushed, se.HeaderLogo, se.RejectGids, se.ShipDesc, se.ActivityDesc, se.AuditRemark, se.NeedSplit, se.IsSplit, se.ExpectOnlineStartTime, se.ExpectOnlineEndTime, se.SplitNums, se.Created, se.Updated, se.BackgroundImg)
	} else {
		res, err = dbConn.Exec(sqlstr, se.PlanID, se.Logo, se.ParentID, se.IsPushed, se.HeaderLogo, se.RejectGids, se.ShipDesc, se.ActivityDesc, se.AuditRemark, se.NeedSplit, se.IsSplit, se.ExpectOnlineStartTime, se.ExpectOnlineEndTime, se.SplitNums, se.Created, se.Updated, se.BackgroundImg)
	}

	if err != nil {
		return err
	}

	// set existence
	se._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	se.PlanID = int(id)
	se._exists = true

	return nil
}

// Update updates the SaleplanExtend in the database.
func (se *SaleplanExtend) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if se._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSaleplanExtendTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`logo = ?, parent_id = ?, is_pushed = ?, header_logo = ?, reject_gids = ?, ship_desc = ?, activity_desc = ?, audit_remark = ?, need_split = ?, is_split = ?, expect_online_start_time = ?, expect_online_end_time = ?, split_nums = ?, created = ?, updated = ?, background_img = ?` +
		` WHERE plan_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, se.Logo, se.ParentID, se.IsPushed, se.HeaderLogo, se.RejectGids, se.ShipDesc, se.ActivityDesc, se.AuditRemark, se.NeedSplit, se.IsSplit, se.ExpectOnlineStartTime, se.ExpectOnlineEndTime, se.SplitNums, se.Created, se.Updated, se.BackgroundImg, se.PlanID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, se.Logo, se.ParentID, se.IsPushed, se.HeaderLogo, se.RejectGids, se.ShipDesc, se.ActivityDesc, se.AuditRemark, se.NeedSplit, se.IsSplit, se.ExpectOnlineStartTime, se.ExpectOnlineEndTime, se.SplitNums, se.Created, se.Updated, se.BackgroundImg, se.PlanID)
	} else {
		_, err = dbConn.Exec(sqlstr, se.Logo, se.ParentID, se.IsPushed, se.HeaderLogo, se.RejectGids, se.ShipDesc, se.ActivityDesc, se.AuditRemark, se.NeedSplit, se.IsSplit, se.ExpectOnlineStartTime, se.ExpectOnlineEndTime, se.SplitNums, se.Created, se.Updated, se.BackgroundImg, se.PlanID)
	}
	return err
}

// Save saves the SaleplanExtend to the database.
func (se *SaleplanExtend) Save(ctx context.Context) error {
	if se.Exists() {
		return se.Update(ctx)
	}

	return se.Insert(ctx)
}

// Delete deletes the SaleplanExtend from the database.
func (se *SaleplanExtend) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if se._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSaleplanExtendTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE plan_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, se.PlanID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, se.PlanID)
	} else {
		_, err = dbConn.Exec(sqlstr, se.PlanID)
	}

	if err != nil {
		return err
	}

	// set deleted
	se._deleted = true

	return nil
}

// SaleplanExtendByPlanID retrieves a row from 'aypcddg.saleplan_extend' as a SaleplanExtend.
//
// Generated from index 'saleplan_extend_plan_id_pkey'.
func SaleplanExtendByPlanID(ctx context.Context, planID int, key ...interface{}) (*SaleplanExtend, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleplanExtendTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`plan_id, logo, parent_id, is_pushed, header_logo, reject_gids, ship_desc, activity_desc, audit_remark, need_split, is_split, expect_online_start_time, expect_online_end_time, split_nums, created, updated, background_img ` +
		`FROM ` + tableName +
		` WHERE plan_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, planID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	se := SaleplanExtend{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, planID).Scan(&se.PlanID, &se.Logo, &se.ParentID, &se.IsPushed, &se.HeaderLogo, &se.RejectGids, &se.ShipDesc, &se.ActivityDesc, &se.AuditRemark, &se.NeedSplit, &se.IsSplit, &se.ExpectOnlineStartTime, &se.ExpectOnlineEndTime, &se.SplitNums, &se.Created, &se.Updated, &se.BackgroundImg)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, planID).Scan(&se.PlanID, &se.Logo, &se.ParentID, &se.IsPushed, &se.HeaderLogo, &se.RejectGids, &se.ShipDesc, &se.ActivityDesc, &se.AuditRemark, &se.NeedSplit, &se.IsSplit, &se.ExpectOnlineStartTime, &se.ExpectOnlineEndTime, &se.SplitNums, &se.Created, &se.Updated, &se.BackgroundImg)
		if err != nil {
			return nil, err
		}
	}

	return &se, nil
}
