// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// DpShopRelOwner represents a row from 'aypcddg.dp_shop_rel_owner'.
type DpShopRelOwner struct {
	ShopOwnerID    uint `json:"shop_owner_id"`   // shop_owner_id
	ShopID         uint `json:"shop_id"`         // shop_id
	RelationStatus int8 `json:"relation_status"` // relation_status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DpShopRelOwner exists in the database.
func (dsro *DpShopRelOwner) Exists() bool { //dp_shop_rel_owner
	return dsro._exists
}

// Deleted provides information if the DpShopRelOwner has been deleted from the database.
func (dsro *DpShopRelOwner) Deleted() bool {
	return dsro._deleted
}

// Get table name
func GetDpShopRelOwnerTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "dp_shop_rel_owner", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the DpShopRelOwner to the database.
func (dsro *DpShopRelOwner) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if dsro._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDpShopRelOwnerTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`shop_owner_id, shop_id, relation_status` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dsro.ShopOwnerID, dsro.ShopID, dsro.RelationStatus)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, dsro.ShopOwnerID, dsro.ShopID, dsro.RelationStatus)
	} else {
		res, err = dbConn.Exec(sqlstr, dsro.ShopOwnerID, dsro.ShopID, dsro.RelationStatus)
	}

	if err != nil {
		return err
	}

	// set existence
	dsro._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	dsro.ShopOwnerID = uint(id)
	dsro._exists = true

	return nil
}

// Update updates the DpShopRelOwner in the database.
func (dsro *DpShopRelOwner) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dsro._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDpShopRelOwnerTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`shop_id = ?, relation_status = ?` +
		` WHERE shop_owner_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dsro.ShopID, dsro.RelationStatus, dsro.ShopOwnerID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dsro.ShopID, dsro.RelationStatus, dsro.ShopOwnerID)
	} else {
		_, err = dbConn.Exec(sqlstr, dsro.ShopID, dsro.RelationStatus, dsro.ShopOwnerID)
	}
	return err
}

// Save saves the DpShopRelOwner to the database.
func (dsro *DpShopRelOwner) Save(ctx context.Context) error {
	if dsro.Exists() {
		return dsro.Update(ctx)
	}

	return dsro.Insert(ctx)
}

// Delete deletes the DpShopRelOwner from the database.
func (dsro *DpShopRelOwner) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dsro._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDpShopRelOwnerTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE shop_owner_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dsro.ShopOwnerID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dsro.ShopOwnerID)
	} else {
		_, err = dbConn.Exec(sqlstr, dsro.ShopOwnerID)
	}

	if err != nil {
		return err
	}

	// set deleted
	dsro._deleted = true

	return nil
}

// DpShopRelOwnerByShopOwnerID retrieves a row from 'aypcddg.dp_shop_rel_owner' as a DpShopRelOwner.
//
// Generated from index 'dp_shop_rel_owner_shop_owner_id_pkey'.
func DpShopRelOwnerByShopOwnerID(ctx context.Context, shopOwnerID uint, key ...interface{}) (*DpShopRelOwner, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDpShopRelOwnerTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`shop_owner_id, shop_id, relation_status ` +
		`FROM ` + tableName +
		` WHERE shop_owner_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, shopOwnerID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	dsro := DpShopRelOwner{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, shopOwnerID).Scan(&dsro.ShopOwnerID, &dsro.ShopID, &dsro.RelationStatus)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, shopOwnerID).Scan(&dsro.ShopOwnerID, &dsro.ShopID, &dsro.RelationStatus)
		if err != nil {
			return nil, err
		}
	}

	return &dsro, nil
}

// DpShopRelOwnerByShopOwnerIDShopID retrieves a row from 'aypcddg.dp_shop_rel_owner' as a DpShopRelOwner.
//
// Generated from index 'shop_owner_id'.
func DpShopRelOwnerByShopOwnerIDShopID(ctx context.Context, shopOwnerID uint, shopID uint, key ...interface{}) (*DpShopRelOwner, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDpShopRelOwnerTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`shop_owner_id, shop_id, relation_status ` +
		`FROM ` + tableName +
		` WHERE shop_owner_id = ? AND shop_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, shopOwnerID, shopID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	dsro := DpShopRelOwner{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, shopOwnerID, shopID).Scan(&dsro.ShopOwnerID, &dsro.ShopID, &dsro.RelationStatus)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, shopOwnerID, shopID).Scan(&dsro.ShopOwnerID, &dsro.ShopID, &dsro.RelationStatus)
		if err != nil {
			return nil, err
		}
	}

	return &dsro, nil
}

// DpShopRelOwnerByShopOwnerIDShopID retrieves a row from 'aypcddg.dp_shop_rel_owner' as a DpShopRelOwner.
//
// Generated from index 'shop_owner_id_2'.
func DpShopRelOwnerByShopOwnerIDShopID(ctx context.Context, shopOwnerID uint, shopID uint, key ...interface{}) (*DpShopRelOwner, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDpShopRelOwnerTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`shop_owner_id, shop_id, relation_status ` +
		`FROM ` + tableName +
		` WHERE shop_owner_id = ? AND shop_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, shopOwnerID, shopID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	dsro := DpShopRelOwner{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, shopOwnerID, shopID).Scan(&dsro.ShopOwnerID, &dsro.ShopID, &dsro.RelationStatus)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, shopOwnerID, shopID).Scan(&dsro.ShopOwnerID, &dsro.ShopID, &dsro.RelationStatus)
		if err != nil {
			return nil, err
		}
	}

	return &dsro, nil
}
