// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// CityCode represents a row from 'aypcddg.city_code'.
type CityCode struct {
	ID     int64          `json:"id"`     // id
	Code   sql.NullString `json:"code"`   // code
	Name   sql.NullString `json:"name"`   // name
	Pid    sql.NullInt64  `json:"pid"`    // pid
	Level  sql.NullInt64  `json:"level"`  // level
	Remark sql.NullString `json:"remark"` // remark

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CityCode exists in the database.
func (cc *CityCode) Exists() bool { //city_code
	return cc._exists
}

// Deleted provides information if the CityCode has been deleted from the database.
func (cc *CityCode) Deleted() bool {
	return cc._deleted
}

// Get table name
func GetCityCodeTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "city_code", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the CityCode to the database.
func (cc *CityCode) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if cc._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCityCodeTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`code, name, pid, level, remark` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cc.Code, cc.Name, cc.Pid, cc.Level, cc.Remark)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, cc.Code, cc.Name, cc.Pid, cc.Level, cc.Remark)
	} else {
		res, err = dbConn.Exec(sqlstr, cc.Code, cc.Name, cc.Pid, cc.Level, cc.Remark)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cc.ID = int64(id)
	cc._exists = true

	return nil
}

// Update updates the CityCode in the database.
func (cc *CityCode) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCityCodeTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`code = ?, name = ?, pid = ?, level = ?, remark = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cc.Code, cc.Name, cc.Pid, cc.Level, cc.Remark, cc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cc.Code, cc.Name, cc.Pid, cc.Level, cc.Remark, cc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, cc.Code, cc.Name, cc.Pid, cc.Level, cc.Remark, cc.ID)
	}
	return err
}

// Save saves the CityCode to the database.
func (cc *CityCode) Save(ctx context.Context) error {
	if cc.Exists() {
		return cc.Update(ctx)
	}

	return cc.Insert(ctx)
}

// Delete deletes the CityCode from the database.
func (cc *CityCode) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cc._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCityCodeTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, cc.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	cc._deleted = true

	return nil
}

// CityCodeByID retrieves a row from 'aypcddg.city_code' as a CityCode.
//
// Generated from index 'city_code_id_pkey'.
func CityCodeByID(ctx context.Context, id int64, key ...interface{}) (*CityCode, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetCityCodeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, code, name, pid, level, remark ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	cc := CityCode{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&cc.ID, &cc.Code, &cc.Name, &cc.Pid, &cc.Level, &cc.Remark)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&cc.ID, &cc.Code, &cc.Name, &cc.Pid, &cc.Level, &cc.Remark)
		if err != nil {
			return nil, err
		}
	}

	return &cc, nil
}
