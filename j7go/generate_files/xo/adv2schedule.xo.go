// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// Adv2Schedule represents a row from 'aypcddg.adv2_schedule'.
type Adv2Schedule struct {
	ID                int            `json:"id"`                 // id
	Fid               sql.NullInt64  `json:"fid"`                // fid
	Sid               sql.NullInt64  `json:"sid"`                // sid
	Title             sql.NullString `json:"title"`              // title
	Subtitle          sql.NullString `json:"subtitle"`           // subtitle
	Start             mysql.NullTime `json:"start"`              // start
	End               mysql.NullTime `json:"end"`                // end
	Status            sql.NullInt64  `json:"status"`             // status
	InventoryStrategy sql.NullInt64  `json:"inventory_strategy"` // inventory_strategy
	Images            sql.NullString `json:"images"`             // images
	BackgroundImg     sql.NullString `json:"background_img"`     // background_img
	Contents          sql.NullString `json:"contents"`           // contents
	Created           sql.NullInt64  `json:"created"`            // created
	Updated           sql.NullInt64  `json:"updated"`            // updated
	Periods           sql.NullInt64  `json:"periods"`            // periods
	PlaceID           sql.NullInt64  `json:"place_id"`           // place_id
	IsCurrentPeriod   sql.NullInt64  `json:"is_current_period"`  // is_current_period

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Adv2Schedule exists in the database.
func (a *Adv2Schedule) Exists() bool { //adv2_schedule
	return a._exists
}

// Deleted provides information if the Adv2Schedule has been deleted from the database.
func (a *Adv2Schedule) Deleted() bool {
	return a._deleted
}

// Get table name
func GetAdv2ScheduleTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "adv2_schedule", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Adv2Schedule to the database.
func (a *Adv2Schedule) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdv2ScheduleTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fid, sid, title, subtitle, start, end, status, inventory_strategy, images, background_img, contents, created, updated, periods, place_id, is_current_period` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.Fid, a.Sid, a.Title, a.Subtitle, a.Start, a.End, a.Status, a.InventoryStrategy, a.Images, a.BackgroundImg, a.Contents, a.Created, a.Updated, a.Periods, a.PlaceID, a.IsCurrentPeriod)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, a.Fid, a.Sid, a.Title, a.Subtitle, a.Start, a.End, a.Status, a.InventoryStrategy, a.Images, a.BackgroundImg, a.Contents, a.Created, a.Updated, a.Periods, a.PlaceID, a.IsCurrentPeriod)
	} else {
		res, err = dbConn.Exec(sqlstr, a.Fid, a.Sid, a.Title, a.Subtitle, a.Start, a.End, a.Status, a.InventoryStrategy, a.Images, a.BackgroundImg, a.Contents, a.Created, a.Updated, a.Periods, a.PlaceID, a.IsCurrentPeriod)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.ID = int(id)
	a._exists = true

	return nil
}

// Update updates the Adv2Schedule in the database.
func (a *Adv2Schedule) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdv2ScheduleTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fid = ?, sid = ?, title = ?, subtitle = ?, start = ?, end = ?, status = ?, inventory_strategy = ?, images = ?, background_img = ?, contents = ?, created = ?, updated = ?, periods = ?, place_id = ?, is_current_period = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.Fid, a.Sid, a.Title, a.Subtitle, a.Start, a.End, a.Status, a.InventoryStrategy, a.Images, a.BackgroundImg, a.Contents, a.Created, a.Updated, a.Periods, a.PlaceID, a.IsCurrentPeriod, a.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, a.Fid, a.Sid, a.Title, a.Subtitle, a.Start, a.End, a.Status, a.InventoryStrategy, a.Images, a.BackgroundImg, a.Contents, a.Created, a.Updated, a.Periods, a.PlaceID, a.IsCurrentPeriod, a.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, a.Fid, a.Sid, a.Title, a.Subtitle, a.Start, a.End, a.Status, a.InventoryStrategy, a.Images, a.BackgroundImg, a.Contents, a.Created, a.Updated, a.Periods, a.PlaceID, a.IsCurrentPeriod, a.ID)
	}
	return err
}

// Save saves the Adv2Schedule to the database.
func (a *Adv2Schedule) Save(ctx context.Context) error {
	if a.Exists() {
		return a.Update(ctx)
	}

	return a.Insert(ctx)
}

// Delete deletes the Adv2Schedule from the database.
func (a *Adv2Schedule) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if a._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdv2ScheduleTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, a.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, a.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// Adv2ScheduleByID retrieves a row from 'aypcddg.adv2_schedule' as a Adv2Schedule.
//
// Generated from index 'adv2_schedule_id_pkey'.
func Adv2ScheduleByID(ctx context.Context, id int, key ...interface{}) (*Adv2Schedule, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAdv2ScheduleTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, sid, title, subtitle, start, end, status, inventory_strategy, images, background_img, contents, created, updated, periods, place_id, is_current_period ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	a := Adv2Schedule{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&a.ID, &a.Fid, &a.Sid, &a.Title, &a.Subtitle, &a.Start, &a.End, &a.Status, &a.InventoryStrategy, &a.Images, &a.BackgroundImg, &a.Contents, &a.Created, &a.Updated, &a.Periods, &a.PlaceID, &a.IsCurrentPeriod)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&a.ID, &a.Fid, &a.Sid, &a.Title, &a.Subtitle, &a.Start, &a.End, &a.Status, &a.InventoryStrategy, &a.Images, &a.BackgroundImg, &a.Contents, &a.Created, &a.Updated, &a.Periods, &a.PlaceID, &a.IsCurrentPeriod)
		if err != nil {
			return nil, err
		}
	}

	return &a, nil
}

// Adv2SchedulesByStartEnd retrieves a row from 'aypcddg.adv2_schedule' as a Adv2Schedule.
//
// Generated from index 'idx_start_end'.
func Adv2SchedulesByStartEnd(ctx context.Context, start mysql.NullTime, end mysql.NullTime, key ...interface{}) ([]*Adv2Schedule, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAdv2ScheduleTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, sid, title, subtitle, start, end, status, inventory_strategy, images, background_img, contents, created, updated, periods, place_id, is_current_period ` +
		`FROM ` + tableName +
		` WHERE start = ? AND end = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, start, end)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, start, end)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, start, end)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*Adv2Schedule, 0)
	for queryData.Next() {
		a := Adv2Schedule{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&a.ID, &a.Fid, &a.Sid, &a.Title, &a.Subtitle, &a.Start, &a.End, &a.Status, &a.InventoryStrategy, &a.Images, &a.BackgroundImg, &a.Contents, &a.Created, &a.Updated, &a.Periods, &a.PlaceID, &a.IsCurrentPeriod)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}
