// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// BaseActivitySchedule represents a row from 'ddg_local.base_activity_schedule'.
type BaseActivitySchedule struct {
	ID        int            `json:"id"`         // id
	Period    sql.NullInt64  `json:"period"`     // period
	EndTime   mysql.NullTime `json:"end_time"`   // end_time
	StartTime mysql.NullTime `json:"start_time"` // start_time
	Created   sql.NullInt64  `json:"created"`    // created
	Updated   sql.NullInt64  `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BaseActivitySchedule exists in the database.
func (bas *BaseActivitySchedule) Exists() bool { //base_activity_schedule
	return bas._exists
}

// Deleted provides information if the BaseActivitySchedule has been deleted from the database.
func (bas *BaseActivitySchedule) Deleted() bool {
	return bas._deleted
}

// Get table name
func GetBaseActivityScheduleTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "base_activity_schedule", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the BaseActivitySchedule to the database.
func (bas *BaseActivitySchedule) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if bas._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseActivityScheduleTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`period, end_time, start_time, created, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bas.Period, bas.EndTime, bas.StartTime, bas.Created, bas.Updated)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, bas.Period, bas.EndTime, bas.StartTime, bas.Created, bas.Updated)
	} else {
		res, err = dbConn.Exec(sqlstr, bas.Period, bas.EndTime, bas.StartTime, bas.Created, bas.Updated)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	bas.ID = int(id)
	bas._exists = true

	return nil
}

// Update updates the BaseActivitySchedule in the database.
func (bas *BaseActivitySchedule) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bas._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseActivityScheduleTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`period = ?, end_time = ?, start_time = ?, created = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bas.Period, bas.EndTime, bas.StartTime, bas.Created, bas.Updated, bas.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bas.Period, bas.EndTime, bas.StartTime, bas.Created, bas.Updated, bas.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bas.Period, bas.EndTime, bas.StartTime, bas.Created, bas.Updated, bas.ID)
	}
	return err
}

// Save saves the BaseActivitySchedule to the database.
func (bas *BaseActivitySchedule) Save(ctx context.Context) error {
	if bas.Exists() {
		return bas.Update(ctx)
	}

	return bas.Insert(ctx)
}

// Delete deletes the BaseActivitySchedule from the database.
func (bas *BaseActivitySchedule) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bas._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseActivityScheduleTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bas.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bas.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bas.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	bas._deleted = true

	return nil
}

// BaseActivityScheduleByID retrieves a row from 'ddg_local.base_activity_schedule' as a BaseActivitySchedule.
//
// Generated from index 'base_activity_schedule_id_pkey'.
func BaseActivityScheduleByID(ctx context.Context, id int, key ...interface{}) (*BaseActivitySchedule, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBaseActivityScheduleTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, period, end_time, start_time, created, updated ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	bas := BaseActivitySchedule{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&bas.ID, &bas.Period, &bas.EndTime, &bas.StartTime, &bas.Created, &bas.Updated)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&bas.ID, &bas.Period, &bas.EndTime, &bas.StartTime, &bas.Created, &bas.Updated)
		if err != nil {
			return nil, err
		}
	}

	return &bas, nil
}
