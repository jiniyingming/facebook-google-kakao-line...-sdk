// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// FactoryBill represents a row from 'aypcddg.factory_bill'.
type FactoryBill struct {
	ID                      int64           `json:"id"`                        // id
	CreatedAt               mysql.NullTime  `json:"created_at"`                // created_at
	UserID                  sql.NullInt64   `json:"user_id"`                   // user_id
	BillNo                  sql.NullString  `json:"bill_no"`                   // bill_no
	Fid                     sql.NullInt64   `json:"fid"`                       // fid
	EntryBillTime           mysql.NullTime  `json:"entry_bill_time"`           // entry_bill_time
	SettlementTime          mysql.NullTime  `json:"settlement_time"`           // settlement_time
	BillStatus              sql.NullInt64   `json:"bill_status"`               // bill_status
	OrdersNum               sql.NullInt64   `json:"orders_num"`                // orders_num
	OrdersMoney             sql.NullFloat64 `json:"orders_money"`              // orders_money
	OrdersShipping          sql.NullFloat64 `json:"orders_shipping"`           // orders_shipping
	RefundServiceMoney      sql.NullFloat64 `json:"refund_service_money"`      // refund_service_money
	RefundMoney             sql.NullFloat64 `json:"refund_money"`              // refund_money
	PlatformSettlementMoney sql.NullFloat64 `json:"platform_settlement_money"` // platform_settlement_money
	FactorySettlementMoney  sql.NullFloat64 `json:"factory_settlement_money"`  // factory_settlement_money

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryBill exists in the database.
func (fb *FactoryBill) Exists() bool { //factory_bill
	return fb._exists
}

// Deleted provides information if the FactoryBill has been deleted from the database.
func (fb *FactoryBill) Deleted() bool {
	return fb._deleted
}

// Get table name
func GetFactoryBillTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "factory_bill", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryBill to the database.
func (fb *FactoryBill) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fb._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryBillTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`created_at, user_id, bill_no, fid, entry_bill_time, settlement_time, bill_status, orders_num, orders_money, orders_shipping, refund_service_money, refund_money, platform_settlement_money, factory_settlement_money` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fb.CreatedAt, fb.UserID, fb.BillNo, fb.Fid, fb.EntryBillTime, fb.SettlementTime, fb.BillStatus, fb.OrdersNum, fb.OrdersMoney, fb.OrdersShipping, fb.RefundServiceMoney, fb.RefundMoney, fb.PlatformSettlementMoney, fb.FactorySettlementMoney)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fb.CreatedAt, fb.UserID, fb.BillNo, fb.Fid, fb.EntryBillTime, fb.SettlementTime, fb.BillStatus, fb.OrdersNum, fb.OrdersMoney, fb.OrdersShipping, fb.RefundServiceMoney, fb.RefundMoney, fb.PlatformSettlementMoney, fb.FactorySettlementMoney)
	} else {
		res, err = dbConn.Exec(sqlstr, fb.CreatedAt, fb.UserID, fb.BillNo, fb.Fid, fb.EntryBillTime, fb.SettlementTime, fb.BillStatus, fb.OrdersNum, fb.OrdersMoney, fb.OrdersShipping, fb.RefundServiceMoney, fb.RefundMoney, fb.PlatformSettlementMoney, fb.FactorySettlementMoney)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fb.ID = int64(id)
	fb._exists = true

	return nil
}

// Update updates the FactoryBill in the database.
func (fb *FactoryBill) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fb._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryBillTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`created_at = ?, user_id = ?, bill_no = ?, fid = ?, entry_bill_time = ?, settlement_time = ?, bill_status = ?, orders_num = ?, orders_money = ?, orders_shipping = ?, refund_service_money = ?, refund_money = ?, platform_settlement_money = ?, factory_settlement_money = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fb.CreatedAt, fb.UserID, fb.BillNo, fb.Fid, fb.EntryBillTime, fb.SettlementTime, fb.BillStatus, fb.OrdersNum, fb.OrdersMoney, fb.OrdersShipping, fb.RefundServiceMoney, fb.RefundMoney, fb.PlatformSettlementMoney, fb.FactorySettlementMoney, fb.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fb.CreatedAt, fb.UserID, fb.BillNo, fb.Fid, fb.EntryBillTime, fb.SettlementTime, fb.BillStatus, fb.OrdersNum, fb.OrdersMoney, fb.OrdersShipping, fb.RefundServiceMoney, fb.RefundMoney, fb.PlatformSettlementMoney, fb.FactorySettlementMoney, fb.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fb.CreatedAt, fb.UserID, fb.BillNo, fb.Fid, fb.EntryBillTime, fb.SettlementTime, fb.BillStatus, fb.OrdersNum, fb.OrdersMoney, fb.OrdersShipping, fb.RefundServiceMoney, fb.RefundMoney, fb.PlatformSettlementMoney, fb.FactorySettlementMoney, fb.ID)
	}
	return err
}

// Save saves the FactoryBill to the database.
func (fb *FactoryBill) Save(ctx context.Context) error {
	if fb.Exists() {
		return fb.Update(ctx)
	}

	return fb.Insert(ctx)
}

// Delete deletes the FactoryBill from the database.
func (fb *FactoryBill) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fb._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryBillTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fb.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fb.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fb.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	fb._deleted = true

	return nil
}

// FactoryBillByID retrieves a row from 'aypcddg.factory_bill' as a FactoryBill.
//
// Generated from index 'factory_bill_id_pkey'.
func FactoryBillByID(ctx context.Context, id int64, key ...interface{}) (*FactoryBill, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryBillTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, created_at, user_id, bill_no, fid, entry_bill_time, settlement_time, bill_status, orders_num, orders_money, orders_shipping, refund_service_money, refund_money, platform_settlement_money, factory_settlement_money ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fb := FactoryBill{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&fb.ID, &fb.CreatedAt, &fb.UserID, &fb.BillNo, &fb.Fid, &fb.EntryBillTime, &fb.SettlementTime, &fb.BillStatus, &fb.OrdersNum, &fb.OrdersMoney, &fb.OrdersShipping, &fb.RefundServiceMoney, &fb.RefundMoney, &fb.PlatformSettlementMoney, &fb.FactorySettlementMoney)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&fb.ID, &fb.CreatedAt, &fb.UserID, &fb.BillNo, &fb.Fid, &fb.EntryBillTime, &fb.SettlementTime, &fb.BillStatus, &fb.OrdersNum, &fb.OrdersMoney, &fb.OrdersShipping, &fb.RefundServiceMoney, &fb.RefundMoney, &fb.PlatformSettlementMoney, &fb.FactorySettlementMoney)
		if err != nil {
			return nil, err
		}
	}

	return &fb, nil
}
