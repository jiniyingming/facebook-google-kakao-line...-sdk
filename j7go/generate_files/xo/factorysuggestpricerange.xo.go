// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// FactorySuggestPriceRange represents a row from 'aypcddg.factory_suggest_price_range'.
type FactorySuggestPriceRange struct {
	ID           int     `json:"id"`             // id
	Fid          int     `json:"fid"`            // fid
	BrandID      int     `json:"brand_id"`       // brand_id
	PriceMin     float64 `json:"price_min"`      // price_min
	PriceMax     float64 `json:"price_max"`      // price_max
	PlusPercent  int     `json:"plus_percent"`   // plus_percent
	AbsPlusPrice float64 `json:"abs_plus_price"` // abs_plus_price
	Settype      int     `json:"settype"`        // settype

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactorySuggestPriceRange exists in the database.
func (fspr *FactorySuggestPriceRange) Exists() bool { //factory_suggest_price_range
	return fspr._exists
}

// Deleted provides information if the FactorySuggestPriceRange has been deleted from the database.
func (fspr *FactorySuggestPriceRange) Deleted() bool {
	return fspr._deleted
}

// Get table name
func GetFactorySuggestPriceRangeTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "factory_suggest_price_range", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactorySuggestPriceRange to the database.
func (fspr *FactorySuggestPriceRange) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fspr._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactorySuggestPriceRangeTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fid, brand_id, price_min, price_max, plus_percent, abs_plus_price, settype` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fspr.Fid, fspr.BrandID, fspr.PriceMin, fspr.PriceMax, fspr.PlusPercent, fspr.AbsPlusPrice, fspr.Settype)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fspr.Fid, fspr.BrandID, fspr.PriceMin, fspr.PriceMax, fspr.PlusPercent, fspr.AbsPlusPrice, fspr.Settype)
	} else {
		res, err = dbConn.Exec(sqlstr, fspr.Fid, fspr.BrandID, fspr.PriceMin, fspr.PriceMax, fspr.PlusPercent, fspr.AbsPlusPrice, fspr.Settype)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fspr.ID = int(id)
	fspr._exists = true

	return nil
}

// Update updates the FactorySuggestPriceRange in the database.
func (fspr *FactorySuggestPriceRange) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fspr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactorySuggestPriceRangeTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fid = ?, brand_id = ?, price_min = ?, price_max = ?, plus_percent = ?, abs_plus_price = ?, settype = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fspr.Fid, fspr.BrandID, fspr.PriceMin, fspr.PriceMax, fspr.PlusPercent, fspr.AbsPlusPrice, fspr.Settype, fspr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fspr.Fid, fspr.BrandID, fspr.PriceMin, fspr.PriceMax, fspr.PlusPercent, fspr.AbsPlusPrice, fspr.Settype, fspr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fspr.Fid, fspr.BrandID, fspr.PriceMin, fspr.PriceMax, fspr.PlusPercent, fspr.AbsPlusPrice, fspr.Settype, fspr.ID)
	}
	return err
}

// Save saves the FactorySuggestPriceRange to the database.
func (fspr *FactorySuggestPriceRange) Save(ctx context.Context) error {
	if fspr.Exists() {
		return fspr.Update(ctx)
	}

	return fspr.Insert(ctx)
}

// Delete deletes the FactorySuggestPriceRange from the database.
func (fspr *FactorySuggestPriceRange) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fspr._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactorySuggestPriceRangeTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fspr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fspr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fspr.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	fspr._deleted = true

	return nil
}

// FactorySuggestPriceRangesByBrandID retrieves a row from 'aypcddg.factory_suggest_price_range' as a FactorySuggestPriceRange.
//
// Generated from index 'brand_id'.
func FactorySuggestPriceRangesByBrandID(ctx context.Context, brandID int, key ...interface{}) ([]*FactorySuggestPriceRange, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySuggestPriceRangeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, brand_id, price_min, price_max, plus_percent, abs_plus_price, settype ` +
		`FROM ` + tableName +
		` WHERE brand_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, brandID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, brandID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, brandID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactorySuggestPriceRange, 0)
	for queryData.Next() {
		fspr := FactorySuggestPriceRange{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fspr.ID, &fspr.Fid, &fspr.BrandID, &fspr.PriceMin, &fspr.PriceMax, &fspr.PlusPercent, &fspr.AbsPlusPrice, &fspr.Settype)
		if err != nil {
			return nil, err
		}

		res = append(res, &fspr)
	}

	return res, nil
}

// FactorySuggestPriceRangesByBrandID retrieves a row from 'aypcddg.factory_suggest_price_range' as a FactorySuggestPriceRange.
//
// Generated from index 'brand_id_2'.
func FactorySuggestPriceRangesByBrandID(ctx context.Context, brandID int, key ...interface{}) ([]*FactorySuggestPriceRange, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySuggestPriceRangeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, brand_id, price_min, price_max, plus_percent, abs_plus_price, settype ` +
		`FROM ` + tableName +
		` WHERE brand_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, brandID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, brandID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, brandID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactorySuggestPriceRange, 0)
	for queryData.Next() {
		fspr := FactorySuggestPriceRange{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fspr.ID, &fspr.Fid, &fspr.BrandID, &fspr.PriceMin, &fspr.PriceMax, &fspr.PlusPercent, &fspr.AbsPlusPrice, &fspr.Settype)
		if err != nil {
			return nil, err
		}

		res = append(res, &fspr)
	}

	return res, nil
}

// FactorySuggestPriceRangeByID retrieves a row from 'aypcddg.factory_suggest_price_range' as a FactorySuggestPriceRange.
//
// Generated from index 'factory_suggest_price_range_id_pkey'.
func FactorySuggestPriceRangeByID(ctx context.Context, id int, key ...interface{}) (*FactorySuggestPriceRange, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySuggestPriceRangeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, brand_id, price_min, price_max, plus_percent, abs_plus_price, settype ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fspr := FactorySuggestPriceRange{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&fspr.ID, &fspr.Fid, &fspr.BrandID, &fspr.PriceMin, &fspr.PriceMax, &fspr.PlusPercent, &fspr.AbsPlusPrice, &fspr.Settype)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&fspr.ID, &fspr.Fid, &fspr.BrandID, &fspr.PriceMin, &fspr.PriceMax, &fspr.PlusPercent, &fspr.AbsPlusPrice, &fspr.Settype)
		if err != nil {
			return nil, err
		}
	}

	return &fspr, nil
}

// FactorySuggestPriceRangesByFid retrieves a row from 'aypcddg.factory_suggest_price_range' as a FactorySuggestPriceRange.
//
// Generated from index 'fid'.
func FactorySuggestPriceRangesByFid(ctx context.Context, fid int, key ...interface{}) ([]*FactorySuggestPriceRange, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySuggestPriceRangeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, brand_id, price_min, price_max, plus_percent, abs_plus_price, settype ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactorySuggestPriceRange, 0)
	for queryData.Next() {
		fspr := FactorySuggestPriceRange{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fspr.ID, &fspr.Fid, &fspr.BrandID, &fspr.PriceMin, &fspr.PriceMax, &fspr.PlusPercent, &fspr.AbsPlusPrice, &fspr.Settype)
		if err != nil {
			return nil, err
		}

		res = append(res, &fspr)
	}

	return res, nil
}

// FactorySuggestPriceRangesByPriceMax retrieves a row from 'aypcddg.factory_suggest_price_range' as a FactorySuggestPriceRange.
//
// Generated from index 'price_max'.
func FactorySuggestPriceRangesByPriceMax(ctx context.Context, priceMax float64, key ...interface{}) ([]*FactorySuggestPriceRange, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySuggestPriceRangeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, brand_id, price_min, price_max, plus_percent, abs_plus_price, settype ` +
		`FROM ` + tableName +
		` WHERE price_max = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, priceMax)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, priceMax)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, priceMax)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactorySuggestPriceRange, 0)
	for queryData.Next() {
		fspr := FactorySuggestPriceRange{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fspr.ID, &fspr.Fid, &fspr.BrandID, &fspr.PriceMin, &fspr.PriceMax, &fspr.PlusPercent, &fspr.AbsPlusPrice, &fspr.Settype)
		if err != nil {
			return nil, err
		}

		res = append(res, &fspr)
	}

	return res, nil
}

// FactorySuggestPriceRangesByPriceMin retrieves a row from 'aypcddg.factory_suggest_price_range' as a FactorySuggestPriceRange.
//
// Generated from index 'price_min'.
func FactorySuggestPriceRangesByPriceMin(ctx context.Context, priceMin float64, key ...interface{}) ([]*FactorySuggestPriceRange, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySuggestPriceRangeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, brand_id, price_min, price_max, plus_percent, abs_plus_price, settype ` +
		`FROM ` + tableName +
		` WHERE price_min = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, priceMin)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, priceMin)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, priceMin)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactorySuggestPriceRange, 0)
	for queryData.Next() {
		fspr := FactorySuggestPriceRange{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fspr.ID, &fspr.Fid, &fspr.BrandID, &fspr.PriceMin, &fspr.PriceMax, &fspr.PlusPercent, &fspr.AbsPlusPrice, &fspr.Settype)
		if err != nil {
			return nil, err
		}

		res = append(res, &fspr)
	}

	return res, nil
}

// FactorySuggestPriceRangesByPriceMin retrieves a row from 'aypcddg.factory_suggest_price_range' as a FactorySuggestPriceRange.
//
// Generated from index 'price_min_2'.
func FactorySuggestPriceRangesByPriceMin(ctx context.Context, priceMin float64, key ...interface{}) ([]*FactorySuggestPriceRange, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySuggestPriceRangeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, brand_id, price_min, price_max, plus_percent, abs_plus_price, settype ` +
		`FROM ` + tableName +
		` WHERE price_min = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, priceMin)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, priceMin)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, priceMin)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactorySuggestPriceRange, 0)
	for queryData.Next() {
		fspr := FactorySuggestPriceRange{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fspr.ID, &fspr.Fid, &fspr.BrandID, &fspr.PriceMin, &fspr.PriceMax, &fspr.PlusPercent, &fspr.AbsPlusPrice, &fspr.Settype)
		if err != nil {
			return nil, err
		}

		res = append(res, &fspr)
	}

	return res, nil
}

// FactorySuggestPriceRangesBySettype retrieves a row from 'aypcddg.factory_suggest_price_range' as a FactorySuggestPriceRange.
//
// Generated from index 'settype'.
func FactorySuggestPriceRangesBySettype(ctx context.Context, settype int, key ...interface{}) ([]*FactorySuggestPriceRange, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySuggestPriceRangeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, brand_id, price_min, price_max, plus_percent, abs_plus_price, settype ` +
		`FROM ` + tableName +
		` WHERE settype = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, settype)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, settype)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, settype)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactorySuggestPriceRange, 0)
	for queryData.Next() {
		fspr := FactorySuggestPriceRange{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fspr.ID, &fspr.Fid, &fspr.BrandID, &fspr.PriceMin, &fspr.PriceMax, &fspr.PlusPercent, &fspr.AbsPlusPrice, &fspr.Settype)
		if err != nil {
			return nil, err
		}

		res = append(res, &fspr)
	}

	return res, nil
}
