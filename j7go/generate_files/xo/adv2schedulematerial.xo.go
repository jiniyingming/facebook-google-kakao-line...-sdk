// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// Adv2ScheduleMaterial represents a row from 'aypcddg.adv2_schedule_material'.
type Adv2ScheduleMaterial struct {
	ID              int           `json:"id"`                // id
	ScheduleID      sql.NullInt64 `json:"schedule_id"`       // schedule_id
	PlaceMaterialID sql.NullInt64 `json:"place_material_id"` // place_material_id
	Sort            sql.NullInt64 `json:"sort"`              // sort
	Created         sql.NullInt64 `json:"created"`           // created
	Updated         sql.NullInt64 `json:"updated"`           // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Adv2ScheduleMaterial exists in the database.
func (am *Adv2ScheduleMaterial) Exists() bool { //adv2_schedule_material
	return am._exists
}

// Deleted provides information if the Adv2ScheduleMaterial has been deleted from the database.
func (am *Adv2ScheduleMaterial) Deleted() bool {
	return am._deleted
}

// Get table name
func GetAdv2ScheduleMaterialTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "adv2_schedule_material", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Adv2ScheduleMaterial to the database.
func (am *Adv2ScheduleMaterial) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if am._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdv2ScheduleMaterialTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`schedule_id, place_material_id, sort, created, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, am.ScheduleID, am.PlaceMaterialID, am.Sort, am.Created, am.Updated)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, am.ScheduleID, am.PlaceMaterialID, am.Sort, am.Created, am.Updated)
	} else {
		res, err = dbConn.Exec(sqlstr, am.ScheduleID, am.PlaceMaterialID, am.Sort, am.Created, am.Updated)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	am.ID = int(id)
	am._exists = true

	return nil
}

// Update updates the Adv2ScheduleMaterial in the database.
func (am *Adv2ScheduleMaterial) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if am._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdv2ScheduleMaterialTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`schedule_id = ?, place_material_id = ?, sort = ?, created = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, am.ScheduleID, am.PlaceMaterialID, am.Sort, am.Created, am.Updated, am.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, am.ScheduleID, am.PlaceMaterialID, am.Sort, am.Created, am.Updated, am.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, am.ScheduleID, am.PlaceMaterialID, am.Sort, am.Created, am.Updated, am.ID)
	}
	return err
}

// Save saves the Adv2ScheduleMaterial to the database.
func (am *Adv2ScheduleMaterial) Save(ctx context.Context) error {
	if am.Exists() {
		return am.Update(ctx)
	}

	return am.Insert(ctx)
}

// Delete deletes the Adv2ScheduleMaterial from the database.
func (am *Adv2ScheduleMaterial) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if am._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdv2ScheduleMaterialTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, am.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, am.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, am.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	am._deleted = true

	return nil
}

// Adv2ScheduleMaterialByID retrieves a row from 'aypcddg.adv2_schedule_material' as a Adv2ScheduleMaterial.
//
// Generated from index 'adv2_schedule_material_id_pkey'.
func Adv2ScheduleMaterialByID(ctx context.Context, id int, key ...interface{}) (*Adv2ScheduleMaterial, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAdv2ScheduleMaterialTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, schedule_id, place_material_id, sort, created, updated ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	am := Adv2ScheduleMaterial{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&am.ID, &am.ScheduleID, &am.PlaceMaterialID, &am.Sort, &am.Created, &am.Updated)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&am.ID, &am.ScheduleID, &am.PlaceMaterialID, &am.Sort, &am.Created, &am.Updated)
		if err != nil {
			return nil, err
		}
	}

	return &am, nil
}

// Adv2ScheduleMaterialsByScheduleIDSort retrieves a row from 'aypcddg.adv2_schedule_material' as a Adv2ScheduleMaterial.
//
// Generated from index 'idx_schedule_id_sort'.
func Adv2ScheduleMaterialsByScheduleIDSort(ctx context.Context, scheduleID sql.NullInt64, sort sql.NullInt64, key ...interface{}) ([]*Adv2ScheduleMaterial, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAdv2ScheduleMaterialTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, schedule_id, place_material_id, sort, created, updated ` +
		`FROM ` + tableName +
		` WHERE schedule_id = ? AND sort = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scheduleID, sort)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, scheduleID, sort)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, scheduleID, sort)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*Adv2ScheduleMaterial, 0)
	for queryData.Next() {
		am := Adv2ScheduleMaterial{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&am.ID, &am.ScheduleID, &am.PlaceMaterialID, &am.Sort, &am.Created, &am.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &am)
	}

	return res, nil
}
