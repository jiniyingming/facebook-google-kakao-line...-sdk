// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// AssetSummary represents a row from 'ddg_local.asset_summary'.
type AssetSummary struct {
	ID                 int64           `json:"id"`                   // id
	AssetID            sql.NullInt64   `json:"asset_id"`             // asset_id
	AlreadyMoney       sql.NullFloat64 `json:"already_money"`        // already_money
	UpdateAt           mysql.NullTime  `json:"update_at"`            // update_at
	CreatedAt          mysql.NullTime  `json:"created_at"`           // created_at
	AlreadySellNumber  sql.NullInt64   `json:"already_sell_number"`  // already_sell_number
	AlreadySellMoney   sql.NullFloat64 `json:"already_sell_money"`   // already_sell_money
	AlreadyIncomeMoney sql.NullFloat64 `json:"already_income_money"` // already_income_money

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AssetSummary exists in the database.
func (as *AssetSummary) Exists() bool { //asset_summary
	return as._exists
}

// Deleted provides information if the AssetSummary has been deleted from the database.
func (as *AssetSummary) Deleted() bool {
	return as._deleted
}

// Get table name
func GetAssetSummaryTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "asset_summary", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the AssetSummary to the database.
func (as *AssetSummary) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if as._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetSummaryTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`asset_id, already_money, update_at, created_at, already_sell_number, already_sell_money, already_income_money` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, as.AssetID, as.AlreadyMoney, as.UpdateAt, as.CreatedAt, as.AlreadySellNumber, as.AlreadySellMoney, as.AlreadyIncomeMoney)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, as.AssetID, as.AlreadyMoney, as.UpdateAt, as.CreatedAt, as.AlreadySellNumber, as.AlreadySellMoney, as.AlreadyIncomeMoney)
	} else {
		res, err = dbConn.Exec(sqlstr, as.AssetID, as.AlreadyMoney, as.UpdateAt, as.CreatedAt, as.AlreadySellNumber, as.AlreadySellMoney, as.AlreadyIncomeMoney)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	as.ID = int64(id)
	as._exists = true

	return nil
}

// Update updates the AssetSummary in the database.
func (as *AssetSummary) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if as._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetSummaryTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`asset_id = ?, already_money = ?, update_at = ?, created_at = ?, already_sell_number = ?, already_sell_money = ?, already_income_money = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, as.AssetID, as.AlreadyMoney, as.UpdateAt, as.CreatedAt, as.AlreadySellNumber, as.AlreadySellMoney, as.AlreadyIncomeMoney, as.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, as.AssetID, as.AlreadyMoney, as.UpdateAt, as.CreatedAt, as.AlreadySellNumber, as.AlreadySellMoney, as.AlreadyIncomeMoney, as.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, as.AssetID, as.AlreadyMoney, as.UpdateAt, as.CreatedAt, as.AlreadySellNumber, as.AlreadySellMoney, as.AlreadyIncomeMoney, as.ID)
	}
	return err
}

// Save saves the AssetSummary to the database.
func (as *AssetSummary) Save(ctx context.Context) error {
	if as.Exists() {
		return as.Update(ctx)
	}

	return as.Insert(ctx)
}

// Delete deletes the AssetSummary from the database.
func (as *AssetSummary) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if as._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetSummaryTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, as.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, as.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, as.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	as._deleted = true

	return nil
}

// AssetSummaryByID retrieves a row from 'ddg_local.asset_summary' as a AssetSummary.
//
// Generated from index 'asset_summary_id_pkey'.
func AssetSummaryByID(ctx context.Context, id int64, key ...interface{}) (*AssetSummary, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAssetSummaryTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, asset_id, already_money, update_at, created_at, already_sell_number, already_sell_money, already_income_money ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	as := AssetSummary{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&as.ID, &as.AssetID, &as.AlreadyMoney, &as.UpdateAt, &as.CreatedAt, &as.AlreadySellNumber, &as.AlreadySellMoney, &as.AlreadyIncomeMoney)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&as.ID, &as.AssetID, &as.AlreadyMoney, &as.UpdateAt, &as.CreatedAt, &as.AlreadySellNumber, &as.AlreadySellMoney, &as.AlreadyIncomeMoney)
		if err != nil {
			return nil, err
		}
	}

	return &as, nil
}
