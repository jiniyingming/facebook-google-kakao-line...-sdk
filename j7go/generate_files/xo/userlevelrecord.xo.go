// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// UserLevelRecord represents a row from 'ddg_local.user_level_record'.
type UserLevelRecord struct {
	ID               int64          `json:"id"`                  // id
	UpdateAt         mysql.NullTime `json:"update_at"`           // update_at
	CreatedAt        mysql.NullTime `json:"created_at"`          // created_at
	UserID           sql.NullInt64  `json:"user_id"`             // user_id
	UserLevelID      sql.NullInt64  `json:"user_level_id"`       // user_level_id
	OldLevelConfigID sql.NullInt64  `json:"old_level_config_id"` // old_level_config_id
	SetLevelConfigID sql.NullInt64  `json:"set_level_config_id"` // set_level_config_id
	Title            sql.NullString `json:"title"`               // title
	Content          sql.NullString `json:"content"`             // content

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserLevelRecord exists in the database.
func (ulr *UserLevelRecord) Exists() bool { //user_level_record
	return ulr._exists
}

// Deleted provides information if the UserLevelRecord has been deleted from the database.
func (ulr *UserLevelRecord) Deleted() bool {
	return ulr._deleted
}

// Get table name
func GetUserLevelRecordTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "user_level_record", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the UserLevelRecord to the database.
func (ulr *UserLevelRecord) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ulr._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserLevelRecordTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`update_at, created_at, user_id, user_level_id, old_level_config_id, set_level_config_id, title, content` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ulr.UpdateAt, ulr.CreatedAt, ulr.UserID, ulr.UserLevelID, ulr.OldLevelConfigID, ulr.SetLevelConfigID, ulr.Title, ulr.Content)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ulr.UpdateAt, ulr.CreatedAt, ulr.UserID, ulr.UserLevelID, ulr.OldLevelConfigID, ulr.SetLevelConfigID, ulr.Title, ulr.Content)
	} else {
		res, err = dbConn.Exec(sqlstr, ulr.UpdateAt, ulr.CreatedAt, ulr.UserID, ulr.UserLevelID, ulr.OldLevelConfigID, ulr.SetLevelConfigID, ulr.Title, ulr.Content)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ulr.ID = int64(id)
	ulr._exists = true

	return nil
}

// Update updates the UserLevelRecord in the database.
func (ulr *UserLevelRecord) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ulr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserLevelRecordTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`update_at = ?, created_at = ?, user_id = ?, user_level_id = ?, old_level_config_id = ?, set_level_config_id = ?, title = ?, content = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ulr.UpdateAt, ulr.CreatedAt, ulr.UserID, ulr.UserLevelID, ulr.OldLevelConfigID, ulr.SetLevelConfigID, ulr.Title, ulr.Content, ulr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ulr.UpdateAt, ulr.CreatedAt, ulr.UserID, ulr.UserLevelID, ulr.OldLevelConfigID, ulr.SetLevelConfigID, ulr.Title, ulr.Content, ulr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ulr.UpdateAt, ulr.CreatedAt, ulr.UserID, ulr.UserLevelID, ulr.OldLevelConfigID, ulr.SetLevelConfigID, ulr.Title, ulr.Content, ulr.ID)
	}
	return err
}

// Save saves the UserLevelRecord to the database.
func (ulr *UserLevelRecord) Save(ctx context.Context) error {
	if ulr.Exists() {
		return ulr.Update(ctx)
	}

	return ulr.Insert(ctx)
}

// Delete deletes the UserLevelRecord from the database.
func (ulr *UserLevelRecord) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ulr._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserLevelRecordTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ulr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ulr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ulr.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	ulr._deleted = true

	return nil
}

// UserLevelRecordByID retrieves a row from 'ddg_local.user_level_record' as a UserLevelRecord.
//
// Generated from index 'user_level_record_id_pkey'.
func UserLevelRecordByID(ctx context.Context, id int64, key ...interface{}) (*UserLevelRecord, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserLevelRecordTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, update_at, created_at, user_id, user_level_id, old_level_config_id, set_level_config_id, title, content ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ulr := UserLevelRecord{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&ulr.ID, &ulr.UpdateAt, &ulr.CreatedAt, &ulr.UserID, &ulr.UserLevelID, &ulr.OldLevelConfigID, &ulr.SetLevelConfigID, &ulr.Title, &ulr.Content)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&ulr.ID, &ulr.UpdateAt, &ulr.CreatedAt, &ulr.UserID, &ulr.UserLevelID, &ulr.OldLevelConfigID, &ulr.SetLevelConfigID, &ulr.Title, &ulr.Content)
		if err != nil {
			return nil, err
		}
	}

	return &ulr, nil
}
