// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// AssetAccountInfo represents a row from 'ddg_local.asset_account_info'.
type AssetAccountInfo struct {
	ID               int64          `json:"id"`                 // id
	AliAccount       sql.NullString `json:"ali_account"`        // ali_account
	AliName          sql.NullString `json:"ali_name"`           // ali_name
	AliIDCard        sql.NullString `json:"ali_id_card"`        // ali_id_card
	AssetID          sql.NullInt64  `json:"asset_id"`           // asset_id
	UpdateAt         mysql.NullTime `json:"update_at"`          // update_at
	CreatedAt        mysql.NullTime `json:"created_at"`         // created_at
	PayPwd           sql.NullString `json:"pay_pwd"`            // pay_pwd
	IdcardFrontImg   sql.NullString `json:"idcard_front_img"`   // idcard_front_img
	IdcardReverseImg sql.NullString `json:"idcard_reverse_img"` // idcard_reverse_img

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AssetAccountInfo exists in the database.
func (aai *AssetAccountInfo) Exists() bool { //asset_account_info
	return aai._exists
}

// Deleted provides information if the AssetAccountInfo has been deleted from the database.
func (aai *AssetAccountInfo) Deleted() bool {
	return aai._deleted
}

// Get table name
func GetAssetAccountInfoTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "asset_account_info", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the AssetAccountInfo to the database.
func (aai *AssetAccountInfo) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if aai._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetAccountInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`ali_account, ali_name, ali_id_card, asset_id, update_at, created_at, pay_pwd, idcard_front_img, idcard_reverse_img` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, aai.AliAccount, aai.AliName, aai.AliIDCard, aai.AssetID, aai.UpdateAt, aai.CreatedAt, aai.PayPwd, aai.IdcardFrontImg, aai.IdcardReverseImg)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, aai.AliAccount, aai.AliName, aai.AliIDCard, aai.AssetID, aai.UpdateAt, aai.CreatedAt, aai.PayPwd, aai.IdcardFrontImg, aai.IdcardReverseImg)
	} else {
		res, err = dbConn.Exec(sqlstr, aai.AliAccount, aai.AliName, aai.AliIDCard, aai.AssetID, aai.UpdateAt, aai.CreatedAt, aai.PayPwd, aai.IdcardFrontImg, aai.IdcardReverseImg)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	aai.ID = int64(id)
	aai._exists = true

	return nil
}

// Update updates the AssetAccountInfo in the database.
func (aai *AssetAccountInfo) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if aai._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetAccountInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`ali_account = ?, ali_name = ?, ali_id_card = ?, asset_id = ?, update_at = ?, created_at = ?, pay_pwd = ?, idcard_front_img = ?, idcard_reverse_img = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, aai.AliAccount, aai.AliName, aai.AliIDCard, aai.AssetID, aai.UpdateAt, aai.CreatedAt, aai.PayPwd, aai.IdcardFrontImg, aai.IdcardReverseImg, aai.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, aai.AliAccount, aai.AliName, aai.AliIDCard, aai.AssetID, aai.UpdateAt, aai.CreatedAt, aai.PayPwd, aai.IdcardFrontImg, aai.IdcardReverseImg, aai.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, aai.AliAccount, aai.AliName, aai.AliIDCard, aai.AssetID, aai.UpdateAt, aai.CreatedAt, aai.PayPwd, aai.IdcardFrontImg, aai.IdcardReverseImg, aai.ID)
	}
	return err
}

// Save saves the AssetAccountInfo to the database.
func (aai *AssetAccountInfo) Save(ctx context.Context) error {
	if aai.Exists() {
		return aai.Update(ctx)
	}

	return aai.Insert(ctx)
}

// Delete deletes the AssetAccountInfo from the database.
func (aai *AssetAccountInfo) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if aai._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetAccountInfoTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, aai.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, aai.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, aai.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	aai._deleted = true

	return nil
}

// AssetAccountInfoByID retrieves a row from 'ddg_local.asset_account_info' as a AssetAccountInfo.
//
// Generated from index 'asset_account_info_id_pkey'.
func AssetAccountInfoByID(ctx context.Context, id int64, key ...interface{}) (*AssetAccountInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAssetAccountInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, ali_account, ali_name, ali_id_card, asset_id, update_at, created_at, pay_pwd, idcard_front_img, idcard_reverse_img ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	aai := AssetAccountInfo{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&aai.ID, &aai.AliAccount, &aai.AliName, &aai.AliIDCard, &aai.AssetID, &aai.UpdateAt, &aai.CreatedAt, &aai.PayPwd, &aai.IdcardFrontImg, &aai.IdcardReverseImg)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&aai.ID, &aai.AliAccount, &aai.AliName, &aai.AliIDCard, &aai.AssetID, &aai.UpdateAt, &aai.CreatedAt, &aai.PayPwd, &aai.IdcardFrontImg, &aai.IdcardReverseImg)
		if err != nil {
			return nil, err
		}
	}

	return &aai, nil
}
