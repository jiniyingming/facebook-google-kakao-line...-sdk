// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// DpShopPersonnelInfo represents a row from 'aypcddg.dp_shop_personnel_info'.
type DpShopPersonnelInfo struct {
	ID           int            `json:"id"`             // id
	StaffID      int            `json:"staff_id"`       // staff_id
	StaffType    int8           `json:"staff_type"`     // staff_type
	WxNumber     string         `json:"wx_number"`      // wx_number
	WxQrCode     string         `json:"wx_qr_code"`     // wx_qr_code
	Remarks      sql.NullString `json:"remarks"`        // remarks
	Created      sql.NullInt64  `json:"created"`        // created
	Updated      sql.NullInt64  `json:"updated"`        // updated
	StaffName    sql.NullString `json:"staff_name"`     // staff_name
	IDCardName   sql.NullString `json:"id_card_name"`   // id_card_name
	IDCardNumber sql.NullString `json:"id_card_number"` // id_card_number
	Sex          sql.NullBool   `json:"sex"`            // sex
	Birthday     sql.NullString `json:"birthday"`       // birthday
	Address      sql.NullString `json:"address"`        // address

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DpShopPersonnelInfo exists in the database.
func (dspi *DpShopPersonnelInfo) Exists() bool { //dp_shop_personnel_info
	return dspi._exists
}

// Deleted provides information if the DpShopPersonnelInfo has been deleted from the database.
func (dspi *DpShopPersonnelInfo) Deleted() bool {
	return dspi._deleted
}

// Get table name
func GetDpShopPersonnelInfoTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "dp_shop_personnel_info", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the DpShopPersonnelInfo to the database.
func (dspi *DpShopPersonnelInfo) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if dspi._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDpShopPersonnelInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`staff_id, staff_type, wx_number, wx_qr_code, remarks, created, updated, staff_name, id_card_name, id_card_number, sex, birthday, address` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dspi.StaffID, dspi.StaffType, dspi.WxNumber, dspi.WxQrCode, dspi.Remarks, dspi.Created, dspi.Updated, dspi.StaffName, dspi.IDCardName, dspi.IDCardNumber, dspi.Sex, dspi.Birthday, dspi.Address)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, dspi.StaffID, dspi.StaffType, dspi.WxNumber, dspi.WxQrCode, dspi.Remarks, dspi.Created, dspi.Updated, dspi.StaffName, dspi.IDCardName, dspi.IDCardNumber, dspi.Sex, dspi.Birthday, dspi.Address)
	} else {
		res, err = dbConn.Exec(sqlstr, dspi.StaffID, dspi.StaffType, dspi.WxNumber, dspi.WxQrCode, dspi.Remarks, dspi.Created, dspi.Updated, dspi.StaffName, dspi.IDCardName, dspi.IDCardNumber, dspi.Sex, dspi.Birthday, dspi.Address)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	dspi.ID = int(id)
	dspi._exists = true

	return nil
}

// Update updates the DpShopPersonnelInfo in the database.
func (dspi *DpShopPersonnelInfo) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dspi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDpShopPersonnelInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`staff_id = ?, staff_type = ?, wx_number = ?, wx_qr_code = ?, remarks = ?, created = ?, updated = ?, staff_name = ?, id_card_name = ?, id_card_number = ?, sex = ?, birthday = ?, address = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dspi.StaffID, dspi.StaffType, dspi.WxNumber, dspi.WxQrCode, dspi.Remarks, dspi.Created, dspi.Updated, dspi.StaffName, dspi.IDCardName, dspi.IDCardNumber, dspi.Sex, dspi.Birthday, dspi.Address, dspi.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dspi.StaffID, dspi.StaffType, dspi.WxNumber, dspi.WxQrCode, dspi.Remarks, dspi.Created, dspi.Updated, dspi.StaffName, dspi.IDCardName, dspi.IDCardNumber, dspi.Sex, dspi.Birthday, dspi.Address, dspi.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, dspi.StaffID, dspi.StaffType, dspi.WxNumber, dspi.WxQrCode, dspi.Remarks, dspi.Created, dspi.Updated, dspi.StaffName, dspi.IDCardName, dspi.IDCardNumber, dspi.Sex, dspi.Birthday, dspi.Address, dspi.ID)
	}
	return err
}

// Save saves the DpShopPersonnelInfo to the database.
func (dspi *DpShopPersonnelInfo) Save(ctx context.Context) error {
	if dspi.Exists() {
		return dspi.Update(ctx)
	}

	return dspi.Insert(ctx)
}

// Delete deletes the DpShopPersonnelInfo from the database.
func (dspi *DpShopPersonnelInfo) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dspi._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDpShopPersonnelInfoTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dspi.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dspi.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, dspi.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	dspi._deleted = true

	return nil
}

// DpShopPersonnelInfoByID retrieves a row from 'aypcddg.dp_shop_personnel_info' as a DpShopPersonnelInfo.
//
// Generated from index 'dp_shop_personnel_info_id_pkey'.
func DpShopPersonnelInfoByID(ctx context.Context, id int, key ...interface{}) (*DpShopPersonnelInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDpShopPersonnelInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, staff_id, staff_type, wx_number, wx_qr_code, remarks, created, updated, staff_name, id_card_name, id_card_number, sex, birthday, address ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	dspi := DpShopPersonnelInfo{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&dspi.ID, &dspi.StaffID, &dspi.StaffType, &dspi.WxNumber, &dspi.WxQrCode, &dspi.Remarks, &dspi.Created, &dspi.Updated, &dspi.StaffName, &dspi.IDCardName, &dspi.IDCardNumber, &dspi.Sex, &dspi.Birthday, &dspi.Address)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&dspi.ID, &dspi.StaffID, &dspi.StaffType, &dspi.WxNumber, &dspi.WxQrCode, &dspi.Remarks, &dspi.Created, &dspi.Updated, &dspi.StaffName, &dspi.IDCardName, &dspi.IDCardNumber, &dspi.Sex, &dspi.Birthday, &dspi.Address)
		if err != nil {
			return nil, err
		}
	}

	return &dspi, nil
}

// DpShopPersonnelInfoByStaffIDStaffType retrieves a row from 'aypcddg.dp_shop_personnel_info' as a DpShopPersonnelInfo.
//
// Generated from index 'i_unique'.
func DpShopPersonnelInfoByStaffIDStaffType(ctx context.Context, staffID int, staffType int8, key ...interface{}) (*DpShopPersonnelInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDpShopPersonnelInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, staff_id, staff_type, wx_number, wx_qr_code, remarks, created, updated, staff_name, id_card_name, id_card_number, sex, birthday, address ` +
		`FROM ` + tableName +
		` WHERE staff_id = ? AND staff_type = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, staffID, staffType)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	dspi := DpShopPersonnelInfo{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, staffID, staffType).Scan(&dspi.ID, &dspi.StaffID, &dspi.StaffType, &dspi.WxNumber, &dspi.WxQrCode, &dspi.Remarks, &dspi.Created, &dspi.Updated, &dspi.StaffName, &dspi.IDCardName, &dspi.IDCardNumber, &dspi.Sex, &dspi.Birthday, &dspi.Address)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, staffID, staffType).Scan(&dspi.ID, &dspi.StaffID, &dspi.StaffType, &dspi.WxNumber, &dspi.WxQrCode, &dspi.Remarks, &dspi.Created, &dspi.Updated, &dspi.StaffName, &dspi.IDCardName, &dspi.IDCardNumber, &dspi.Sex, &dspi.Birthday, &dspi.Address)
		if err != nil {
			return nil, err
		}
	}

	return &dspi, nil
}

// DpShopPersonnelInfosByIDCardNumber retrieves a row from 'aypcddg.dp_shop_personnel_info' as a DpShopPersonnelInfo.
//
// Generated from index 'id_card_number_index'.
func DpShopPersonnelInfosByIDCardNumber(ctx context.Context, idCardNumber sql.NullString, key ...interface{}) ([]*DpShopPersonnelInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDpShopPersonnelInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, staff_id, staff_type, wx_number, wx_qr_code, remarks, created, updated, staff_name, id_card_name, id_card_number, sex, birthday, address ` +
		`FROM ` + tableName +
		` WHERE id_card_number = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, idCardNumber)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, idCardNumber)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, idCardNumber)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*DpShopPersonnelInfo, 0)
	for queryData.Next() {
		dspi := DpShopPersonnelInfo{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&dspi.ID, &dspi.StaffID, &dspi.StaffType, &dspi.WxNumber, &dspi.WxQrCode, &dspi.Remarks, &dspi.Created, &dspi.Updated, &dspi.StaffName, &dspi.IDCardName, &dspi.IDCardNumber, &dspi.Sex, &dspi.Birthday, &dspi.Address)
		if err != nil {
			return nil, err
		}

		res = append(res, &dspi)
	}

	return res, nil
}
