// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// OrdersAfterSalesSuplement represents a row from 'aypcddg.orders_after_sales_suplement'.
type OrdersAfterSalesSuplement struct {
	ID         int64           `json:"id"`          // id
	Orderid    sql.NullInt64   `json:"orderid"`     // orderid
	OrderGid   sql.NullInt64   `json:"order_gid"`   // order_gid
	OrderGsrid sql.NullInt64   `json:"order_gsrid"` // order_gsrid
	Number     sql.NullInt64   `json:"number"`      // number
	Price      sql.NullFloat64 `json:"price"`       // price
	Shipping   sql.NullFloat64 `json:"shipping"`    // shipping
	UID        sql.NullInt64   `json:"uid"`         // uid
	CreatedAt  mysql.NullTime  `json:"created_at"`  // created_at
	UpdateAt   mysql.NullTime  `json:"update_at"`   // update_at
	Remark     sql.NullString  `json:"remark"`      // remark

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OrdersAfterSalesSuplement exists in the database.
func (oass *OrdersAfterSalesSuplement) Exists() bool { //orders_after_sales_suplement
	return oass._exists
}

// Deleted provides information if the OrdersAfterSalesSuplement has been deleted from the database.
func (oass *OrdersAfterSalesSuplement) Deleted() bool {
	return oass._deleted
}

// Get table name
func GetOrdersAfterSalesSuplementTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "orders_after_sales_suplement", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the OrdersAfterSalesSuplement to the database.
func (oass *OrdersAfterSalesSuplement) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if oass._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersAfterSalesSuplementTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`orderid, order_gid, order_gsrid, number, price, shipping, uid, created_at, update_at, remark` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, oass.Orderid, oass.OrderGid, oass.OrderGsrid, oass.Number, oass.Price, oass.Shipping, oass.UID, oass.CreatedAt, oass.UpdateAt, oass.Remark)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, oass.Orderid, oass.OrderGid, oass.OrderGsrid, oass.Number, oass.Price, oass.Shipping, oass.UID, oass.CreatedAt, oass.UpdateAt, oass.Remark)
	} else {
		res, err = dbConn.Exec(sqlstr, oass.Orderid, oass.OrderGid, oass.OrderGsrid, oass.Number, oass.Price, oass.Shipping, oass.UID, oass.CreatedAt, oass.UpdateAt, oass.Remark)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	oass.ID = int64(id)
	oass._exists = true

	return nil
}

// Update updates the OrdersAfterSalesSuplement in the database.
func (oass *OrdersAfterSalesSuplement) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if oass._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersAfterSalesSuplementTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`orderid = ?, order_gid = ?, order_gsrid = ?, number = ?, price = ?, shipping = ?, uid = ?, created_at = ?, update_at = ?, remark = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, oass.Orderid, oass.OrderGid, oass.OrderGsrid, oass.Number, oass.Price, oass.Shipping, oass.UID, oass.CreatedAt, oass.UpdateAt, oass.Remark, oass.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, oass.Orderid, oass.OrderGid, oass.OrderGsrid, oass.Number, oass.Price, oass.Shipping, oass.UID, oass.CreatedAt, oass.UpdateAt, oass.Remark, oass.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, oass.Orderid, oass.OrderGid, oass.OrderGsrid, oass.Number, oass.Price, oass.Shipping, oass.UID, oass.CreatedAt, oass.UpdateAt, oass.Remark, oass.ID)
	}
	return err
}

// Save saves the OrdersAfterSalesSuplement to the database.
func (oass *OrdersAfterSalesSuplement) Save(ctx context.Context) error {
	if oass.Exists() {
		return oass.Update(ctx)
	}

	return oass.Insert(ctx)
}

// Delete deletes the OrdersAfterSalesSuplement from the database.
func (oass *OrdersAfterSalesSuplement) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if oass._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersAfterSalesSuplementTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, oass.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, oass.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, oass.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	oass._deleted = true

	return nil
}

// OrdersAfterSalesSuplementByID retrieves a row from 'aypcddg.orders_after_sales_suplement' as a OrdersAfterSalesSuplement.
//
// Generated from index 'orders_after_sales_suplement_id_pkey'.
func OrdersAfterSalesSuplementByID(ctx context.Context, id int64, key ...interface{}) (*OrdersAfterSalesSuplement, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOrdersAfterSalesSuplementTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, orderid, order_gid, order_gsrid, number, price, shipping, uid, created_at, update_at, remark ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	oass := OrdersAfterSalesSuplement{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&oass.ID, &oass.Orderid, &oass.OrderGid, &oass.OrderGsrid, &oass.Number, &oass.Price, &oass.Shipping, &oass.UID, &oass.CreatedAt, &oass.UpdateAt, &oass.Remark)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&oass.ID, &oass.Orderid, &oass.OrderGid, &oass.OrderGsrid, &oass.Number, &oass.Price, &oass.Shipping, &oass.UID, &oass.CreatedAt, &oass.UpdateAt, &oass.Remark)
		if err != nil {
			return nil, err
		}
	}

	return &oass, nil
}
