// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"fmt"
	"j7go/components"
	"j7go/utils"
	"time"

	"go.uber.org/zap"
)

// APISubscribe represents a row from 'aypcddg.api_subscribe'.
type APISubscribe struct {
	BelongKey   string         `json:"belong_key"`   // belong_key
	NameKey     string         `json:"name_key"`     // name_key
	URL         string         `json:"url"`          // url
	CustomerMap sql.NullString `json:"customer_map"` // customer_map
	RequestType []byte         `json:"request_type"` // request_type
	UpdateAt    time.Time      `json:"update_at"`    // update_at
}

// APISubscribesByBelongKey retrieves a row from 'aypcddg.api_subscribe' as a APISubscribe.
//
// Generated from index 'belong_key'.
func APISubscribesByBelongKey(ctx context.Context, belongKey string, key ...interface{}) ([]*APISubscribe, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAPISubscribeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`belong_key, name_key, url, customer_map, request_type, update_at ` +
		`FROM ` + tableName +
		` WHERE belong_key = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, belongKey)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, belongKey)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, belongKey)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*APISubscribe, 0)
	for queryData.Next() {
		as := APISubscribe{}

		// scan
		err = queryData.Scan(&as.BelongKey, &as.NameKey, &as.URL, &as.CustomerMap, &as.RequestType, &as.UpdateAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &as)
	}

	return res, nil
}

// APISubscribesByNameKey retrieves a row from 'aypcddg.api_subscribe' as a APISubscribe.
//
// Generated from index 'name_key'.
func APISubscribesByNameKey(ctx context.Context, nameKey string, key ...interface{}) ([]*APISubscribe, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAPISubscribeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`belong_key, name_key, url, customer_map, request_type, update_at ` +
		`FROM ` + tableName +
		` WHERE name_key = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, nameKey)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, nameKey)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, nameKey)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*APISubscribe, 0)
	for queryData.Next() {
		as := APISubscribe{}

		// scan
		err = queryData.Scan(&as.BelongKey, &as.NameKey, &as.URL, &as.CustomerMap, &as.RequestType, &as.UpdateAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &as)
	}

	return res, nil
}
