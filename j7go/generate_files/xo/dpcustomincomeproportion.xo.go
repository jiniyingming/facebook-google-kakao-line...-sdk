// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// DpCustomIncomeProportion represents a row from 'aypcddg.dp_custom_income_proportion'.
type DpCustomIncomeProportion struct {
	ID                      int           `json:"id"`                        // id
	ShopID                  int           `json:"shop_id"`                   // shop_id
	ShopOwnerID             int           `json:"shop_owner_id"`             // shop_owner_id
	ShopManagerID           int           `json:"shop_manager_id"`           // shop_manager_id
	IncomeProportionOwner   float64       `json:"income_proportion_owner"`   // income_proportion_owner
	IncomeProportionManager float64       `json:"income_proportion_manager"` // income_proportion_manager
	Type                    int8          `json:"type"`                      // type
	CreatedAt               sql.NullInt64 `json:"created_at"`                // created_at
	UpdatedAt               sql.NullInt64 `json:"updated_at"`                // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DpCustomIncomeProportion exists in the database.
func (dcip *DpCustomIncomeProportion) Exists() bool { //dp_custom_income_proportion
	return dcip._exists
}

// Deleted provides information if the DpCustomIncomeProportion has been deleted from the database.
func (dcip *DpCustomIncomeProportion) Deleted() bool {
	return dcip._deleted
}

// Get table name
func GetDpCustomIncomeProportionTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "dp_custom_income_proportion", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the DpCustomIncomeProportion to the database.
func (dcip *DpCustomIncomeProportion) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if dcip._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDpCustomIncomeProportionTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`shop_id, shop_owner_id, shop_manager_id, income_proportion_owner, income_proportion_manager, type, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dcip.ShopID, dcip.ShopOwnerID, dcip.ShopManagerID, dcip.IncomeProportionOwner, dcip.IncomeProportionManager, dcip.Type, dcip.CreatedAt, dcip.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, dcip.ShopID, dcip.ShopOwnerID, dcip.ShopManagerID, dcip.IncomeProportionOwner, dcip.IncomeProportionManager, dcip.Type, dcip.CreatedAt, dcip.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, dcip.ShopID, dcip.ShopOwnerID, dcip.ShopManagerID, dcip.IncomeProportionOwner, dcip.IncomeProportionManager, dcip.Type, dcip.CreatedAt, dcip.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	dcip.ID = int(id)
	dcip._exists = true

	return nil
}

// Update updates the DpCustomIncomeProportion in the database.
func (dcip *DpCustomIncomeProportion) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dcip._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDpCustomIncomeProportionTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`shop_id = ?, shop_owner_id = ?, shop_manager_id = ?, income_proportion_owner = ?, income_proportion_manager = ?, type = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dcip.ShopID, dcip.ShopOwnerID, dcip.ShopManagerID, dcip.IncomeProportionOwner, dcip.IncomeProportionManager, dcip.Type, dcip.CreatedAt, dcip.UpdatedAt, dcip.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dcip.ShopID, dcip.ShopOwnerID, dcip.ShopManagerID, dcip.IncomeProportionOwner, dcip.IncomeProportionManager, dcip.Type, dcip.CreatedAt, dcip.UpdatedAt, dcip.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, dcip.ShopID, dcip.ShopOwnerID, dcip.ShopManagerID, dcip.IncomeProportionOwner, dcip.IncomeProportionManager, dcip.Type, dcip.CreatedAt, dcip.UpdatedAt, dcip.ID)
	}
	return err
}

// Save saves the DpCustomIncomeProportion to the database.
func (dcip *DpCustomIncomeProportion) Save(ctx context.Context) error {
	if dcip.Exists() {
		return dcip.Update(ctx)
	}

	return dcip.Insert(ctx)
}

// Delete deletes the DpCustomIncomeProportion from the database.
func (dcip *DpCustomIncomeProportion) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dcip._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDpCustomIncomeProportionTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dcip.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dcip.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, dcip.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	dcip._deleted = true

	return nil
}

// DpCustomIncomeProportionByID retrieves a row from 'aypcddg.dp_custom_income_proportion' as a DpCustomIncomeProportion.
//
// Generated from index 'dp_custom_income_proportion_id_pkey'.
func DpCustomIncomeProportionByID(ctx context.Context, id int, key ...interface{}) (*DpCustomIncomeProportion, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDpCustomIncomeProportionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, shop_id, shop_owner_id, shop_manager_id, income_proportion_owner, income_proportion_manager, type, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	dcip := DpCustomIncomeProportion{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&dcip.ID, &dcip.ShopID, &dcip.ShopOwnerID, &dcip.ShopManagerID, &dcip.IncomeProportionOwner, &dcip.IncomeProportionManager, &dcip.Type, &dcip.CreatedAt, &dcip.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&dcip.ID, &dcip.ShopID, &dcip.ShopOwnerID, &dcip.ShopManagerID, &dcip.IncomeProportionOwner, &dcip.IncomeProportionManager, &dcip.Type, &dcip.CreatedAt, &dcip.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &dcip, nil
}

// DpCustomIncomeProportionsByType retrieves a row from 'aypcddg.dp_custom_income_proportion' as a DpCustomIncomeProportion.
//
// Generated from index 'proportion_type_index'.
func DpCustomIncomeProportionsByType(ctx context.Context, typ int8, key ...interface{}) ([]*DpCustomIncomeProportion, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDpCustomIncomeProportionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, shop_id, shop_owner_id, shop_manager_id, income_proportion_owner, income_proportion_manager, type, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE type = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, typ)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, typ)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, typ)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*DpCustomIncomeProportion, 0)
	for queryData.Next() {
		dcip := DpCustomIncomeProportion{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&dcip.ID, &dcip.ShopID, &dcip.ShopOwnerID, &dcip.ShopManagerID, &dcip.IncomeProportionOwner, &dcip.IncomeProportionManager, &dcip.Type, &dcip.CreatedAt, &dcip.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &dcip)
	}

	return res, nil
}
