// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// WalletDetailed represents a row from 'ddg_local.wallet_detailed'.
type WalletDetailed struct {
	ID                    int64           `json:"id"`                      // id
	WalletID              sql.NullInt64   `json:"wallet_id"`               // wallet_id
	OperationType         sql.NullInt64   `json:"operation_type"`          // operation_type
	ChangeMoney           sql.NullFloat64 `json:"change_money"`            // change_money
	Title                 sql.NullString  `json:"title"`                   // title
	Content               sql.NullString  `json:"content"`                 // content
	CurrentObtainMoney    sql.NullFloat64 `json:"current_obtain_money"`    // current_obtain_money
	CurrentConsumeMoney   sql.NullFloat64 `json:"current_consume_money"`   // current_consume_money
	AfterObtainMoney      sql.NullFloat64 `json:"after_obtain_money"`      // after_obtain_money
	AfterConsumeMoney     sql.NullFloat64 `json:"after_consume_money"`     // after_consume_money
	CreatedAt             mysql.NullTime  `json:"created_at"`              // created_at
	UpdateAt              mysql.NullTime  `json:"update_at"`               // update_at
	RelationOperationType sql.NullInt64   `json:"relation_operation_type"` // relation_operation_type

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WalletDetailed exists in the database.
func (wd *WalletDetailed) Exists() bool { //wallet_detailed
	return wd._exists
}

// Deleted provides information if the WalletDetailed has been deleted from the database.
func (wd *WalletDetailed) Deleted() bool {
	return wd._deleted
}

// Get table name
func GetWalletDetailedTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "wallet_detailed", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the WalletDetailed to the database.
func (wd *WalletDetailed) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if wd._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetWalletDetailedTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`wallet_id, operation_type, change_money, title, content, current_obtain_money, current_consume_money, after_obtain_money, after_consume_money, created_at, update_at, relation_operation_type` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, wd.WalletID, wd.OperationType, wd.ChangeMoney, wd.Title, wd.Content, wd.CurrentObtainMoney, wd.CurrentConsumeMoney, wd.AfterObtainMoney, wd.AfterConsumeMoney, wd.CreatedAt, wd.UpdateAt, wd.RelationOperationType)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, wd.WalletID, wd.OperationType, wd.ChangeMoney, wd.Title, wd.Content, wd.CurrentObtainMoney, wd.CurrentConsumeMoney, wd.AfterObtainMoney, wd.AfterConsumeMoney, wd.CreatedAt, wd.UpdateAt, wd.RelationOperationType)
	} else {
		res, err = dbConn.Exec(sqlstr, wd.WalletID, wd.OperationType, wd.ChangeMoney, wd.Title, wd.Content, wd.CurrentObtainMoney, wd.CurrentConsumeMoney, wd.AfterObtainMoney, wd.AfterConsumeMoney, wd.CreatedAt, wd.UpdateAt, wd.RelationOperationType)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wd.ID = int64(id)
	wd._exists = true

	return nil
}

// Update updates the WalletDetailed in the database.
func (wd *WalletDetailed) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if wd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetWalletDetailedTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`wallet_id = ?, operation_type = ?, change_money = ?, title = ?, content = ?, current_obtain_money = ?, current_consume_money = ?, after_obtain_money = ?, after_consume_money = ?, created_at = ?, update_at = ?, relation_operation_type = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, wd.WalletID, wd.OperationType, wd.ChangeMoney, wd.Title, wd.Content, wd.CurrentObtainMoney, wd.CurrentConsumeMoney, wd.AfterObtainMoney, wd.AfterConsumeMoney, wd.CreatedAt, wd.UpdateAt, wd.RelationOperationType, wd.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, wd.WalletID, wd.OperationType, wd.ChangeMoney, wd.Title, wd.Content, wd.CurrentObtainMoney, wd.CurrentConsumeMoney, wd.AfterObtainMoney, wd.AfterConsumeMoney, wd.CreatedAt, wd.UpdateAt, wd.RelationOperationType, wd.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, wd.WalletID, wd.OperationType, wd.ChangeMoney, wd.Title, wd.Content, wd.CurrentObtainMoney, wd.CurrentConsumeMoney, wd.AfterObtainMoney, wd.AfterConsumeMoney, wd.CreatedAt, wd.UpdateAt, wd.RelationOperationType, wd.ID)
	}
	return err
}

// Save saves the WalletDetailed to the database.
func (wd *WalletDetailed) Save(ctx context.Context) error {
	if wd.Exists() {
		return wd.Update(ctx)
	}

	return wd.Insert(ctx)
}

// Delete deletes the WalletDetailed from the database.
func (wd *WalletDetailed) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if wd._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetWalletDetailedTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, wd.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, wd.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, wd.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	wd._deleted = true

	return nil
}

// WalletDetailedByID retrieves a row from 'ddg_local.wallet_detailed' as a WalletDetailed.
//
// Generated from index 'wallet_detailed_id_pkey'.
func WalletDetailedByID(ctx context.Context, id int64, key ...interface{}) (*WalletDetailed, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetWalletDetailedTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, wallet_id, operation_type, change_money, title, content, current_obtain_money, current_consume_money, after_obtain_money, after_consume_money, created_at, update_at, relation_operation_type ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	wd := WalletDetailed{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&wd.ID, &wd.WalletID, &wd.OperationType, &wd.ChangeMoney, &wd.Title, &wd.Content, &wd.CurrentObtainMoney, &wd.CurrentConsumeMoney, &wd.AfterObtainMoney, &wd.AfterConsumeMoney, &wd.CreatedAt, &wd.UpdateAt, &wd.RelationOperationType)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&wd.ID, &wd.WalletID, &wd.OperationType, &wd.ChangeMoney, &wd.Title, &wd.Content, &wd.CurrentObtainMoney, &wd.CurrentConsumeMoney, &wd.AfterObtainMoney, &wd.AfterConsumeMoney, &wd.CreatedAt, &wd.UpdateAt, &wd.RelationOperationType)
		if err != nil {
			return nil, err
		}
	}

	return &wd, nil
}
