// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// SysregionCopy represents a row from 'ddg_local.sysregion_copy'.
type SysregionCopy struct {
	RegionID     int            `json:"region_id"`      // region_id
	Code         sql.NullString `json:"code"`           // code
	ParentID     int            `json:"parent_id"`      // parent_id
	Sort         int            `json:"sort"`           // sort
	RegionName   sql.NullString `json:"region_name"`    // region_name
	RegionType   int            `json:"region_type"`    // region_type
	Pinyin       sql.NullInt64  `json:"pinyin"`         // pinyin
	Lft          uint           `json:"lft"`            // lft
	Rgt          uint           `json:"rgt"`            // rgt
	MidAdminName sql.NullString `json:"mid_admin_name"` // mid_admin_name
	MidAdminID   int            `json:"mid_admin_id"`   // mid_admin_id
	IsDelete     int8           `json:"is_delete"`      // is_delete
	CreatedAt    mysql.NullTime `json:"created_at"`     // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SysregionCopy exists in the database.
func (sc *SysregionCopy) Exists() bool { //sysregion_copy
	return sc._exists
}

// Deleted provides information if the SysregionCopy has been deleted from the database.
func (sc *SysregionCopy) Deleted() bool {
	return sc._deleted
}

// Get table name
func GetSysregionCopyTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "sysregion_copy", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the SysregionCopy to the database.
func (sc *SysregionCopy) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if sc._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSysregionCopyTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`code, parent_id, sort, region_name, region_type, pinyin, lft, rgt, mid_admin_name, mid_admin_id, is_delete, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sc.Code, sc.ParentID, sc.Sort, sc.RegionName, sc.RegionType, sc.Pinyin, sc.Lft, sc.Rgt, sc.MidAdminName, sc.MidAdminID, sc.IsDelete, sc.CreatedAt, sc.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, sc.Code, sc.ParentID, sc.Sort, sc.RegionName, sc.RegionType, sc.Pinyin, sc.Lft, sc.Rgt, sc.MidAdminName, sc.MidAdminID, sc.IsDelete, sc.CreatedAt, sc.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, sc.Code, sc.ParentID, sc.Sort, sc.RegionName, sc.RegionType, sc.Pinyin, sc.Lft, sc.Rgt, sc.MidAdminName, sc.MidAdminID, sc.IsDelete, sc.CreatedAt, sc.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sc.RegionID = int(id)
	sc._exists = true

	return nil
}

// Update updates the SysregionCopy in the database.
func (sc *SysregionCopy) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSysregionCopyTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`code = ?, parent_id = ?, sort = ?, region_name = ?, region_type = ?, pinyin = ?, lft = ?, rgt = ?, mid_admin_name = ?, mid_admin_id = ?, is_delete = ?, created_at = ?, updated_at = ?` +
		` WHERE region_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sc.Code, sc.ParentID, sc.Sort, sc.RegionName, sc.RegionType, sc.Pinyin, sc.Lft, sc.Rgt, sc.MidAdminName, sc.MidAdminID, sc.IsDelete, sc.CreatedAt, sc.UpdatedAt, sc.RegionID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sc.Code, sc.ParentID, sc.Sort, sc.RegionName, sc.RegionType, sc.Pinyin, sc.Lft, sc.Rgt, sc.MidAdminName, sc.MidAdminID, sc.IsDelete, sc.CreatedAt, sc.UpdatedAt, sc.RegionID)
	} else {
		_, err = dbConn.Exec(sqlstr, sc.Code, sc.ParentID, sc.Sort, sc.RegionName, sc.RegionType, sc.Pinyin, sc.Lft, sc.Rgt, sc.MidAdminName, sc.MidAdminID, sc.IsDelete, sc.CreatedAt, sc.UpdatedAt, sc.RegionID)
	}
	return err
}

// Save saves the SysregionCopy to the database.
func (sc *SysregionCopy) Save(ctx context.Context) error {
	if sc.Exists() {
		return sc.Update(ctx)
	}

	return sc.Insert(ctx)
}

// Delete deletes the SysregionCopy from the database.
func (sc *SysregionCopy) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sc._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSysregionCopyTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE region_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sc.RegionID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sc.RegionID)
	} else {
		_, err = dbConn.Exec(sqlstr, sc.RegionID)
	}

	if err != nil {
		return err
	}

	// set deleted
	sc._deleted = true

	return nil
}

// SysregionCopyByRegionID retrieves a row from 'ddg_local.sysregion_copy' as a SysregionCopy.
//
// Generated from index 'sysregion_copy_region_id_pkey'.
func SysregionCopyByRegionID(ctx context.Context, regionID int, key ...interface{}) (*SysregionCopy, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSysregionCopyTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`region_id, code, parent_id, sort, region_name, region_type, pinyin, lft, rgt, mid_admin_name, mid_admin_id, is_delete, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE region_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, regionID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sc := SysregionCopy{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, regionID).Scan(&sc.RegionID, &sc.Code, &sc.ParentID, &sc.Sort, &sc.RegionName, &sc.RegionType, &sc.Pinyin, &sc.Lft, &sc.Rgt, &sc.MidAdminName, &sc.MidAdminID, &sc.IsDelete, &sc.CreatedAt, &sc.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, regionID).Scan(&sc.RegionID, &sc.Code, &sc.ParentID, &sc.Sort, &sc.RegionName, &sc.RegionType, &sc.Pinyin, &sc.Lft, &sc.Rgt, &sc.MidAdminName, &sc.MidAdminID, &sc.IsDelete, &sc.CreatedAt, &sc.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &sc, nil
}
