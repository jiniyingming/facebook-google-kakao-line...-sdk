// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// Wallet represents a row from 'ddg_local.wallet'.
type Wallet struct {
	ID           int64           `json:"id"`            // id
	AssetID      sql.NullInt64   `json:"asset_id"`      // asset_id
	ObtainMoney  sql.NullFloat64 `json:"obtain_money"`  // obtain_money
	ConsumeMoney sql.NullFloat64 `json:"consume_money"` // consume_money
	UseStatus    sql.NullInt64   `json:"use_status"`    // use_status
	CreatedAt    mysql.NullTime  `json:"created_at"`    // created_at
	UpdateAt     mysql.NullTime  `json:"update_at"`     // update_at
	Versions     sql.NullInt64   `json:"versions"`      // versions

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Wallet exists in the database.
func (w *Wallet) Exists() bool { //wallet
	return w._exists
}

// Deleted provides information if the Wallet has been deleted from the database.
func (w *Wallet) Deleted() bool {
	return w._deleted
}

// Get table name
func GetWalletTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "wallet", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Wallet to the database.
func (w *Wallet) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if w._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetWalletTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`asset_id, obtain_money, consume_money, use_status, created_at, update_at, versions` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, w.AssetID, w.ObtainMoney, w.ConsumeMoney, w.UseStatus, w.CreatedAt, w.UpdateAt, w.Versions)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, w.AssetID, w.ObtainMoney, w.ConsumeMoney, w.UseStatus, w.CreatedAt, w.UpdateAt, w.Versions)
	} else {
		res, err = dbConn.Exec(sqlstr, w.AssetID, w.ObtainMoney, w.ConsumeMoney, w.UseStatus, w.CreatedAt, w.UpdateAt, w.Versions)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	w.ID = int64(id)
	w._exists = true

	return nil
}

// Update updates the Wallet in the database.
func (w *Wallet) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if w._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetWalletTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`asset_id = ?, obtain_money = ?, consume_money = ?, use_status = ?, created_at = ?, update_at = ?, versions = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, w.AssetID, w.ObtainMoney, w.ConsumeMoney, w.UseStatus, w.CreatedAt, w.UpdateAt, w.Versions, w.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, w.AssetID, w.ObtainMoney, w.ConsumeMoney, w.UseStatus, w.CreatedAt, w.UpdateAt, w.Versions, w.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, w.AssetID, w.ObtainMoney, w.ConsumeMoney, w.UseStatus, w.CreatedAt, w.UpdateAt, w.Versions, w.ID)
	}
	return err
}

// Save saves the Wallet to the database.
func (w *Wallet) Save(ctx context.Context) error {
	if w.Exists() {
		return w.Update(ctx)
	}

	return w.Insert(ctx)
}

// Delete deletes the Wallet from the database.
func (w *Wallet) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if w._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetWalletTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, w.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, w.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, w.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	w._deleted = true

	return nil
}

// WalletByID retrieves a row from 'ddg_local.wallet' as a Wallet.
//
// Generated from index 'wallet_id_pkey'.
func WalletByID(ctx context.Context, id int64, key ...interface{}) (*Wallet, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetWalletTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, asset_id, obtain_money, consume_money, use_status, created_at, update_at, versions ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	w := Wallet{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&w.ID, &w.AssetID, &w.ObtainMoney, &w.ConsumeMoney, &w.UseStatus, &w.CreatedAt, &w.UpdateAt, &w.Versions)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&w.ID, &w.AssetID, &w.ObtainMoney, &w.ConsumeMoney, &w.UseStatus, &w.CreatedAt, &w.UpdateAt, &w.Versions)
		if err != nil {
			return nil, err
		}
	}

	return &w, nil
}
