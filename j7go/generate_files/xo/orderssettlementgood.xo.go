// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// OrdersSettlementGood represents a row from 'aypcddg.orders_settlement_goods'.
type OrdersSettlementGood struct {
	ID                        int64           `json:"id"`                           // id
	OrdersSettlementID        sql.NullInt64   `json:"orders_settlement_id"`         // orders_settlement_id
	GoodsID                   sql.NullInt64   `json:"goods_id"`                     // goods_id
	OrdersID                  sql.NullInt64   `json:"orders_id"`                    // orders_id
	OrdersGoodsID             sql.NullInt64   `json:"orders_goods_id"`              // orders_goods_id
	UserID                    sql.NullInt64   `json:"user_id"`                      // user_id
	PartakeSettlementMoney    sql.NullFloat64 `json:"partake_settlement_money"`     // partake_settlement_money
	RealSettlementMoney       sql.NullFloat64 `json:"real_settlement_money"`        // real_settlement_money
	ServiceMoney              sql.NullFloat64 `json:"service_money"`                // service_money
	UserType                  sql.NullInt64   `json:"user_type"`                    // user_type
	ServiceID                 sql.NullInt64   `json:"service_id"`                   // service_id
	ServiceCharge             sql.NullFloat64 `json:"service_charge"`               // service_charge
	CreatedAt                 mysql.NullTime  `json:"created_at"`                   // created_at
	UpdateAt                  mysql.NullTime  `json:"update_at"`                    // update_at
	DoStatus                  sql.NullInt64   `json:"do_status"`                    // do_status
	GoodsOriginFee            sql.NullFloat64 `json:"goods_origin_fee"`             // goods_origin_fee
	AfterServicesMoney        sql.NullFloat64 `json:"after_services_money"`         // after_services_money
	AfterServicesMoneyFactory sql.NullFloat64 `json:"after_services_money_factory"` // after_services_money_factory
	XiaobServiceMoney         sql.NullFloat64 `json:"xiaob_service_money"`          // xiaob_service_money
	RefundServicesMoney       sql.NullFloat64 `json:"refund_services_money"`        // refund_services_money
	RealSettlementPushMoney   sql.NullFloat64 `json:"real_settlement_push_money"`   // real_settlement_push_money
	RealSettlementShareMoney  sql.NullFloat64 `json:"real_settlement_share_money"`  // real_settlement_share_money

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OrdersSettlementGood exists in the database.
func (osg *OrdersSettlementGood) Exists() bool { //orders_settlement_goods
	return osg._exists
}

// Deleted provides information if the OrdersSettlementGood has been deleted from the database.
func (osg *OrdersSettlementGood) Deleted() bool {
	return osg._deleted
}

// Get table name
func GetOrdersSettlementGoodTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "orders_settlement_goods", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the OrdersSettlementGood to the database.
func (osg *OrdersSettlementGood) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if osg._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersSettlementGoodTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`orders_settlement_id, goods_id, orders_id, orders_goods_id, user_id, partake_settlement_money, real_settlement_money, service_money, user_type, service_id, service_charge, created_at, update_at, do_status, goods_origin_fee, after_services_money, after_services_money_factory, xiaob_service_money, refund_services_money, real_settlement_push_money, real_settlement_share_money` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, osg.OrdersSettlementID, osg.GoodsID, osg.OrdersID, osg.OrdersGoodsID, osg.UserID, osg.PartakeSettlementMoney, osg.RealSettlementMoney, osg.ServiceMoney, osg.UserType, osg.ServiceID, osg.ServiceCharge, osg.CreatedAt, osg.UpdateAt, osg.DoStatus, osg.GoodsOriginFee, osg.AfterServicesMoney, osg.AfterServicesMoneyFactory, osg.XiaobServiceMoney, osg.RefundServicesMoney, osg.RealSettlementPushMoney, osg.RealSettlementShareMoney)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, osg.OrdersSettlementID, osg.GoodsID, osg.OrdersID, osg.OrdersGoodsID, osg.UserID, osg.PartakeSettlementMoney, osg.RealSettlementMoney, osg.ServiceMoney, osg.UserType, osg.ServiceID, osg.ServiceCharge, osg.CreatedAt, osg.UpdateAt, osg.DoStatus, osg.GoodsOriginFee, osg.AfterServicesMoney, osg.AfterServicesMoneyFactory, osg.XiaobServiceMoney, osg.RefundServicesMoney, osg.RealSettlementPushMoney, osg.RealSettlementShareMoney)
	} else {
		res, err = dbConn.Exec(sqlstr, osg.OrdersSettlementID, osg.GoodsID, osg.OrdersID, osg.OrdersGoodsID, osg.UserID, osg.PartakeSettlementMoney, osg.RealSettlementMoney, osg.ServiceMoney, osg.UserType, osg.ServiceID, osg.ServiceCharge, osg.CreatedAt, osg.UpdateAt, osg.DoStatus, osg.GoodsOriginFee, osg.AfterServicesMoney, osg.AfterServicesMoneyFactory, osg.XiaobServiceMoney, osg.RefundServicesMoney, osg.RealSettlementPushMoney, osg.RealSettlementShareMoney)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	osg.ID = int64(id)
	osg._exists = true

	return nil
}

// Update updates the OrdersSettlementGood in the database.
func (osg *OrdersSettlementGood) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if osg._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersSettlementGoodTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`orders_settlement_id = ?, goods_id = ?, orders_id = ?, orders_goods_id = ?, user_id = ?, partake_settlement_money = ?, real_settlement_money = ?, service_money = ?, user_type = ?, service_id = ?, service_charge = ?, created_at = ?, update_at = ?, do_status = ?, goods_origin_fee = ?, after_services_money = ?, after_services_money_factory = ?, xiaob_service_money = ?, refund_services_money = ?, real_settlement_push_money = ?, real_settlement_share_money = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, osg.OrdersSettlementID, osg.GoodsID, osg.OrdersID, osg.OrdersGoodsID, osg.UserID, osg.PartakeSettlementMoney, osg.RealSettlementMoney, osg.ServiceMoney, osg.UserType, osg.ServiceID, osg.ServiceCharge, osg.CreatedAt, osg.UpdateAt, osg.DoStatus, osg.GoodsOriginFee, osg.AfterServicesMoney, osg.AfterServicesMoneyFactory, osg.XiaobServiceMoney, osg.RefundServicesMoney, osg.RealSettlementPushMoney, osg.RealSettlementShareMoney, osg.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, osg.OrdersSettlementID, osg.GoodsID, osg.OrdersID, osg.OrdersGoodsID, osg.UserID, osg.PartakeSettlementMoney, osg.RealSettlementMoney, osg.ServiceMoney, osg.UserType, osg.ServiceID, osg.ServiceCharge, osg.CreatedAt, osg.UpdateAt, osg.DoStatus, osg.GoodsOriginFee, osg.AfterServicesMoney, osg.AfterServicesMoneyFactory, osg.XiaobServiceMoney, osg.RefundServicesMoney, osg.RealSettlementPushMoney, osg.RealSettlementShareMoney, osg.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, osg.OrdersSettlementID, osg.GoodsID, osg.OrdersID, osg.OrdersGoodsID, osg.UserID, osg.PartakeSettlementMoney, osg.RealSettlementMoney, osg.ServiceMoney, osg.UserType, osg.ServiceID, osg.ServiceCharge, osg.CreatedAt, osg.UpdateAt, osg.DoStatus, osg.GoodsOriginFee, osg.AfterServicesMoney, osg.AfterServicesMoneyFactory, osg.XiaobServiceMoney, osg.RefundServicesMoney, osg.RealSettlementPushMoney, osg.RealSettlementShareMoney, osg.ID)
	}
	return err
}

// Save saves the OrdersSettlementGood to the database.
func (osg *OrdersSettlementGood) Save(ctx context.Context) error {
	if osg.Exists() {
		return osg.Update(ctx)
	}

	return osg.Insert(ctx)
}

// Delete deletes the OrdersSettlementGood from the database.
func (osg *OrdersSettlementGood) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if osg._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersSettlementGoodTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, osg.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, osg.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, osg.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	osg._deleted = true

	return nil
}

// OrdersSettlementGoodByID retrieves a row from 'aypcddg.orders_settlement_goods' as a OrdersSettlementGood.
//
// Generated from index 'orders_settlement_goods_id_pkey'.
func OrdersSettlementGoodByID(ctx context.Context, id int64, key ...interface{}) (*OrdersSettlementGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOrdersSettlementGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, orders_settlement_id, goods_id, orders_id, orders_goods_id, user_id, partake_settlement_money, real_settlement_money, service_money, user_type, service_id, service_charge, created_at, update_at, do_status, goods_origin_fee, after_services_money, after_services_money_factory, xiaob_service_money, refund_services_money, real_settlement_push_money, real_settlement_share_money ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	osg := OrdersSettlementGood{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&osg.ID, &osg.OrdersSettlementID, &osg.GoodsID, &osg.OrdersID, &osg.OrdersGoodsID, &osg.UserID, &osg.PartakeSettlementMoney, &osg.RealSettlementMoney, &osg.ServiceMoney, &osg.UserType, &osg.ServiceID, &osg.ServiceCharge, &osg.CreatedAt, &osg.UpdateAt, &osg.DoStatus, &osg.GoodsOriginFee, &osg.AfterServicesMoney, &osg.AfterServicesMoneyFactory, &osg.XiaobServiceMoney, &osg.RefundServicesMoney, &osg.RealSettlementPushMoney, &osg.RealSettlementShareMoney)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&osg.ID, &osg.OrdersSettlementID, &osg.GoodsID, &osg.OrdersID, &osg.OrdersGoodsID, &osg.UserID, &osg.PartakeSettlementMoney, &osg.RealSettlementMoney, &osg.ServiceMoney, &osg.UserType, &osg.ServiceID, &osg.ServiceCharge, &osg.CreatedAt, &osg.UpdateAt, &osg.DoStatus, &osg.GoodsOriginFee, &osg.AfterServicesMoney, &osg.AfterServicesMoneyFactory, &osg.XiaobServiceMoney, &osg.RefundServicesMoney, &osg.RealSettlementPushMoney, &osg.RealSettlementShareMoney)
		if err != nil {
			return nil, err
		}
	}

	return &osg, nil
}
