// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// BaseActivityCustomizeGood represents a row from 'aypcddg.base_activity_customize_goods'.
type BaseActivityCustomizeGood struct {
	ID         int           `json:"id"`          // id
	Gid        sql.NullInt64 `json:"gid"`         // gid
	Status     int8          `json:"status"`      // status
	ActivityID sql.NullInt64 `json:"activity_id"` // activity_id
	PlaceID    sql.NullInt64 `json:"place_id"`    // place_id
	IsTop      sql.NullInt64 `json:"is_top"`      // is_top
	Sort       sql.NullInt64 `json:"sort"`        // sort
	Created    sql.NullInt64 `json:"created"`     // created
	Updated    sql.NullInt64 `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BaseActivityCustomizeGood exists in the database.
func (bacg *BaseActivityCustomizeGood) Exists() bool { //base_activity_customize_goods
	return bacg._exists
}

// Deleted provides information if the BaseActivityCustomizeGood has been deleted from the database.
func (bacg *BaseActivityCustomizeGood) Deleted() bool {
	return bacg._deleted
}

// Get table name
func GetBaseActivityCustomizeGoodTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "base_activity_customize_goods", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the BaseActivityCustomizeGood to the database.
func (bacg *BaseActivityCustomizeGood) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if bacg._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseActivityCustomizeGoodTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`gid, status, activity_id, place_id, is_top, sort, created, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bacg.Gid, bacg.Status, bacg.ActivityID, bacg.PlaceID, bacg.IsTop, bacg.Sort, bacg.Created, bacg.Updated)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, bacg.Gid, bacg.Status, bacg.ActivityID, bacg.PlaceID, bacg.IsTop, bacg.Sort, bacg.Created, bacg.Updated)
	} else {
		res, err = dbConn.Exec(sqlstr, bacg.Gid, bacg.Status, bacg.ActivityID, bacg.PlaceID, bacg.IsTop, bacg.Sort, bacg.Created, bacg.Updated)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	bacg.ID = int(id)
	bacg._exists = true

	return nil
}

// Update updates the BaseActivityCustomizeGood in the database.
func (bacg *BaseActivityCustomizeGood) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bacg._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseActivityCustomizeGoodTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`gid = ?, status = ?, activity_id = ?, place_id = ?, is_top = ?, sort = ?, created = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bacg.Gid, bacg.Status, bacg.ActivityID, bacg.PlaceID, bacg.IsTop, bacg.Sort, bacg.Created, bacg.Updated, bacg.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bacg.Gid, bacg.Status, bacg.ActivityID, bacg.PlaceID, bacg.IsTop, bacg.Sort, bacg.Created, bacg.Updated, bacg.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bacg.Gid, bacg.Status, bacg.ActivityID, bacg.PlaceID, bacg.IsTop, bacg.Sort, bacg.Created, bacg.Updated, bacg.ID)
	}
	return err
}

// Save saves the BaseActivityCustomizeGood to the database.
func (bacg *BaseActivityCustomizeGood) Save(ctx context.Context) error {
	if bacg.Exists() {
		return bacg.Update(ctx)
	}

	return bacg.Insert(ctx)
}

// Delete deletes the BaseActivityCustomizeGood from the database.
func (bacg *BaseActivityCustomizeGood) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bacg._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseActivityCustomizeGoodTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bacg.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bacg.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bacg.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	bacg._deleted = true

	return nil
}

// BaseActivityCustomizeGoodByID retrieves a row from 'aypcddg.base_activity_customize_goods' as a BaseActivityCustomizeGood.
//
// Generated from index 'base_activity_customize_goods_id_pkey'.
func BaseActivityCustomizeGoodByID(ctx context.Context, id int, key ...interface{}) (*BaseActivityCustomizeGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBaseActivityCustomizeGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, status, activity_id, place_id, is_top, sort, created, updated ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	bacg := BaseActivityCustomizeGood{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&bacg.ID, &bacg.Gid, &bacg.Status, &bacg.ActivityID, &bacg.PlaceID, &bacg.IsTop, &bacg.Sort, &bacg.Created, &bacg.Updated)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&bacg.ID, &bacg.Gid, &bacg.Status, &bacg.ActivityID, &bacg.PlaceID, &bacg.IsTop, &bacg.Sort, &bacg.Created, &bacg.Updated)
		if err != nil {
			return nil, err
		}
	}

	return &bacg, nil
}

// BaseActivityCustomizeGoodsByActivityIDGid retrieves a row from 'aypcddg.base_activity_customize_goods' as a BaseActivityCustomizeGood.
//
// Generated from index 'idx_gid_activity_id'.
func BaseActivityCustomizeGoodsByActivityIDGid(ctx context.Context, activityID sql.NullInt64, gid sql.NullInt64, key ...interface{}) ([]*BaseActivityCustomizeGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBaseActivityCustomizeGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, status, activity_id, place_id, is_top, sort, created, updated ` +
		`FROM ` + tableName +
		` WHERE activity_id = ? AND gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, activityID, gid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, activityID, gid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, activityID, gid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*BaseActivityCustomizeGood, 0)
	for queryData.Next() {
		bacg := BaseActivityCustomizeGood{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&bacg.ID, &bacg.Gid, &bacg.Status, &bacg.ActivityID, &bacg.PlaceID, &bacg.IsTop, &bacg.Sort, &bacg.Created, &bacg.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &bacg)
	}

	return res, nil
}
