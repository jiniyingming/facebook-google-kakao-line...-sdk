// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// LevelConfigEquity represents a row from 'ddg_local.level_config_equity'.
type LevelConfigEquity struct {
	ID                  int64           `json:"id"`                    // id
	UpdateAt            mysql.NullTime  `json:"update_at"`             // update_at
	CreatedAt           mysql.NullTime  `json:"created_at"`            // created_at
	LevelConfigID       sql.NullInt64   `json:"level_config_id"`       // level_config_id
	Title               sql.NullString  `json:"title"`                 // title
	TeamShareProportion sql.NullFloat64 `json:"team_share_proportion"` // team_share_proportion
	Content             sql.NullString  `json:"content"`               // content
	IconURL             string          `json:"icon_url"`              // icon_url

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LevelConfigEquity exists in the database.
func (lce *LevelConfigEquity) Exists() bool { //level_config_equity
	return lce._exists
}

// Deleted provides information if the LevelConfigEquity has been deleted from the database.
func (lce *LevelConfigEquity) Deleted() bool {
	return lce._deleted
}

// Get table name
func GetLevelConfigEquityTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "level_config_equity", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the LevelConfigEquity to the database.
func (lce *LevelConfigEquity) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if lce._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetLevelConfigEquityTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`update_at, created_at, level_config_id, title, team_share_proportion, content, icon_url` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, lce.UpdateAt, lce.CreatedAt, lce.LevelConfigID, lce.Title, lce.TeamShareProportion, lce.Content, lce.IconURL)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, lce.UpdateAt, lce.CreatedAt, lce.LevelConfigID, lce.Title, lce.TeamShareProportion, lce.Content, lce.IconURL)
	} else {
		res, err = dbConn.Exec(sqlstr, lce.UpdateAt, lce.CreatedAt, lce.LevelConfigID, lce.Title, lce.TeamShareProportion, lce.Content, lce.IconURL)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	lce.ID = int64(id)
	lce._exists = true

	return nil
}

// Update updates the LevelConfigEquity in the database.
func (lce *LevelConfigEquity) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if lce._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetLevelConfigEquityTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`update_at = ?, created_at = ?, level_config_id = ?, title = ?, team_share_proportion = ?, content = ?, icon_url = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, lce.UpdateAt, lce.CreatedAt, lce.LevelConfigID, lce.Title, lce.TeamShareProportion, lce.Content, lce.IconURL, lce.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, lce.UpdateAt, lce.CreatedAt, lce.LevelConfigID, lce.Title, lce.TeamShareProportion, lce.Content, lce.IconURL, lce.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, lce.UpdateAt, lce.CreatedAt, lce.LevelConfigID, lce.Title, lce.TeamShareProportion, lce.Content, lce.IconURL, lce.ID)
	}
	return err
}

// Save saves the LevelConfigEquity to the database.
func (lce *LevelConfigEquity) Save(ctx context.Context) error {
	if lce.Exists() {
		return lce.Update(ctx)
	}

	return lce.Insert(ctx)
}

// Delete deletes the LevelConfigEquity from the database.
func (lce *LevelConfigEquity) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if lce._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetLevelConfigEquityTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, lce.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, lce.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, lce.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	lce._deleted = true

	return nil
}

// LevelConfigEquityByID retrieves a row from 'ddg_local.level_config_equity' as a LevelConfigEquity.
//
// Generated from index 'level_config_equity_id_pkey'.
func LevelConfigEquityByID(ctx context.Context, id int64, key ...interface{}) (*LevelConfigEquity, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetLevelConfigEquityTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, update_at, created_at, level_config_id, title, team_share_proportion, content, icon_url ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	lce := LevelConfigEquity{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&lce.ID, &lce.UpdateAt, &lce.CreatedAt, &lce.LevelConfigID, &lce.Title, &lce.TeamShareProportion, &lce.Content, &lce.IconURL)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&lce.ID, &lce.UpdateAt, &lce.CreatedAt, &lce.LevelConfigID, &lce.Title, &lce.TeamShareProportion, &lce.Content, &lce.IconURL)
		if err != nil {
			return nil, err
		}
	}

	return &lce, nil
}
