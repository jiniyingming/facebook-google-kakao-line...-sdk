// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"
	"time"

	"go.uber.org/zap"
)

// RequestLog represents a row from 'aypcddg.request_log'.
type RequestLog struct {
	ID        int            `json:"id"`           // id
	Fid       int            `json:"fid"`          // fid
	CreatedAt time.Time      `json:"created_at"`   // created_at
	Data      sql.NullString `json:"data"`         // data
	Response  sql.NullString `json:"response"`     // response
	Notes     sql.NullString `json:"notes"`        // notes
	Source    string         `json:"source"`       // source
	TraceUUID sql.NullString `json:"__trace_uuid"` // __trace_uuid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RequestLog exists in the database.
func (rl *RequestLog) Exists() bool { //request_log
	return rl._exists
}

// Deleted provides information if the RequestLog has been deleted from the database.
func (rl *RequestLog) Deleted() bool {
	return rl._deleted
}

// Get table name
func GetRequestLogTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "request_log", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the RequestLog to the database.
func (rl *RequestLog) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if rl._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRequestLogTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fid, created_at, data, response, notes, source, __trace_uuid` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rl.Fid, rl.CreatedAt, rl.Data, rl.Response, rl.Notes, rl.Source, rl.TraceUUID)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, rl.Fid, rl.CreatedAt, rl.Data, rl.Response, rl.Notes, rl.Source, rl.TraceUUID)
	} else {
		res, err = dbConn.Exec(sqlstr, rl.Fid, rl.CreatedAt, rl.Data, rl.Response, rl.Notes, rl.Source, rl.TraceUUID)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	rl.ID = int(id)
	rl._exists = true

	return nil
}

// Update updates the RequestLog in the database.
func (rl *RequestLog) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if rl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRequestLogTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fid = ?, created_at = ?, data = ?, response = ?, notes = ?, source = ?, __trace_uuid = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rl.Fid, rl.CreatedAt, rl.Data, rl.Response, rl.Notes, rl.Source, rl.TraceUUID, rl.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, rl.Fid, rl.CreatedAt, rl.Data, rl.Response, rl.Notes, rl.Source, rl.TraceUUID, rl.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, rl.Fid, rl.CreatedAt, rl.Data, rl.Response, rl.Notes, rl.Source, rl.TraceUUID, rl.ID)
	}
	return err
}

// Save saves the RequestLog to the database.
func (rl *RequestLog) Save(ctx context.Context) error {
	if rl.Exists() {
		return rl.Update(ctx)
	}

	return rl.Insert(ctx)
}

// Delete deletes the RequestLog from the database.
func (rl *RequestLog) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if rl._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRequestLogTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rl.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, rl.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, rl.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	rl._deleted = true

	return nil
}

// RequestLogsByTraceUUID retrieves a row from 'aypcddg.request_log' as a RequestLog.
//
// Generated from index '__trace_uuid'.
func RequestLogsByTraceUUID(ctx context.Context, traceUUID sql.NullString, key ...interface{}) ([]*RequestLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetRequestLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, created_at, data, response, notes, source, __trace_uuid ` +
		`FROM ` + tableName +
		` WHERE __trace_uuid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, traceUUID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, traceUUID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, traceUUID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*RequestLog, 0)
	for queryData.Next() {
		rl := RequestLog{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&rl.ID, &rl.Fid, &rl.CreatedAt, &rl.Data, &rl.Response, &rl.Notes, &rl.Source, &rl.TraceUUID)
		if err != nil {
			return nil, err
		}

		res = append(res, &rl)
	}

	return res, nil
}

// RequestLogsByFid retrieves a row from 'aypcddg.request_log' as a RequestLog.
//
// Generated from index 'fid'.
func RequestLogsByFid(ctx context.Context, fid int, key ...interface{}) ([]*RequestLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetRequestLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, created_at, data, response, notes, source, __trace_uuid ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*RequestLog, 0)
	for queryData.Next() {
		rl := RequestLog{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&rl.ID, &rl.Fid, &rl.CreatedAt, &rl.Data, &rl.Response, &rl.Notes, &rl.Source, &rl.TraceUUID)
		if err != nil {
			return nil, err
		}

		res = append(res, &rl)
	}

	return res, nil
}

// RequestLogByID retrieves a row from 'aypcddg.request_log' as a RequestLog.
//
// Generated from index 'request_log_id_pkey'.
func RequestLogByID(ctx context.Context, id int, key ...interface{}) (*RequestLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetRequestLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, created_at, data, response, notes, source, __trace_uuid ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	rl := RequestLog{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&rl.ID, &rl.Fid, &rl.CreatedAt, &rl.Data, &rl.Response, &rl.Notes, &rl.Source, &rl.TraceUUID)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&rl.ID, &rl.Fid, &rl.CreatedAt, &rl.Data, &rl.Response, &rl.Notes, &rl.Source, &rl.TraceUUID)
		if err != nil {
			return nil, err
		}
	}

	return &rl, nil
}

// RequestLogsBySource retrieves a row from 'aypcddg.request_log' as a RequestLog.
//
// Generated from index 'source'.
func RequestLogsBySource(ctx context.Context, source string, key ...interface{}) ([]*RequestLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetRequestLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, created_at, data, response, notes, source, __trace_uuid ` +
		`FROM ` + tableName +
		` WHERE source = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, source)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, source)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, source)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*RequestLog, 0)
	for queryData.Next() {
		rl := RequestLog{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&rl.ID, &rl.Fid, &rl.CreatedAt, &rl.Data, &rl.Response, &rl.Notes, &rl.Source, &rl.TraceUUID)
		if err != nil {
			return nil, err
		}

		res = append(res, &rl)
	}

	return res, nil
}
