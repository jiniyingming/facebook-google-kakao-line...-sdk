// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// AssetIncomeOrderRecord represents a row from 'aypcddg.asset_income_order_record'.
type AssetIncomeOrderRecord struct {
	ID           int64          `json:"id"`            // id
	AssetID      sql.NullInt64  `json:"asset_id"`      // asset_id
	OrderID      sql.NullInt64  `json:"order_id"`      // order_id
	DoStatus     sql.NullInt64  `json:"do_status"`     // do_status
	CreatedAt    mysql.NullTime `json:"created_at"`    // created_at
	UpdateAt     mysql.NullTime `json:"update_at"`     // update_at
	RefundStatus sql.NullInt64  `json:"refund_status"` // refund_status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AssetIncomeOrderRecord exists in the database.
func (aior *AssetIncomeOrderRecord) Exists() bool { //asset_income_order_record
	return aior._exists
}

// Deleted provides information if the AssetIncomeOrderRecord has been deleted from the database.
func (aior *AssetIncomeOrderRecord) Deleted() bool {
	return aior._deleted
}

// Get table name
func GetAssetIncomeOrderRecordTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "asset_income_order_record", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the AssetIncomeOrderRecord to the database.
func (aior *AssetIncomeOrderRecord) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if aior._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetIncomeOrderRecordTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`asset_id, order_id, do_status, created_at, update_at, refund_status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, aior.AssetID, aior.OrderID, aior.DoStatus, aior.CreatedAt, aior.UpdateAt, aior.RefundStatus)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, aior.AssetID, aior.OrderID, aior.DoStatus, aior.CreatedAt, aior.UpdateAt, aior.RefundStatus)
	} else {
		res, err = dbConn.Exec(sqlstr, aior.AssetID, aior.OrderID, aior.DoStatus, aior.CreatedAt, aior.UpdateAt, aior.RefundStatus)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	aior.ID = int64(id)
	aior._exists = true

	return nil
}

// Update updates the AssetIncomeOrderRecord in the database.
func (aior *AssetIncomeOrderRecord) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if aior._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetIncomeOrderRecordTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`asset_id = ?, order_id = ?, do_status = ?, created_at = ?, update_at = ?, refund_status = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, aior.AssetID, aior.OrderID, aior.DoStatus, aior.CreatedAt, aior.UpdateAt, aior.RefundStatus, aior.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, aior.AssetID, aior.OrderID, aior.DoStatus, aior.CreatedAt, aior.UpdateAt, aior.RefundStatus, aior.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, aior.AssetID, aior.OrderID, aior.DoStatus, aior.CreatedAt, aior.UpdateAt, aior.RefundStatus, aior.ID)
	}
	return err
}

// Save saves the AssetIncomeOrderRecord to the database.
func (aior *AssetIncomeOrderRecord) Save(ctx context.Context) error {
	if aior.Exists() {
		return aior.Update(ctx)
	}

	return aior.Insert(ctx)
}

// Delete deletes the AssetIncomeOrderRecord from the database.
func (aior *AssetIncomeOrderRecord) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if aior._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetIncomeOrderRecordTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, aior.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, aior.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, aior.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	aior._deleted = true

	return nil
}

// AssetIncomeOrderRecordByID retrieves a row from 'aypcddg.asset_income_order_record' as a AssetIncomeOrderRecord.
//
// Generated from index 'asset_income_order_record_id_pkey'.
func AssetIncomeOrderRecordByID(ctx context.Context, id int64, key ...interface{}) (*AssetIncomeOrderRecord, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAssetIncomeOrderRecordTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, asset_id, order_id, do_status, created_at, update_at, refund_status ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	aior := AssetIncomeOrderRecord{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&aior.ID, &aior.AssetID, &aior.OrderID, &aior.DoStatus, &aior.CreatedAt, &aior.UpdateAt, &aior.RefundStatus)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&aior.ID, &aior.AssetID, &aior.OrderID, &aior.DoStatus, &aior.CreatedAt, &aior.UpdateAt, &aior.RefundStatus)
		if err != nil {
			return nil, err
		}
	}

	return &aior, nil
}
