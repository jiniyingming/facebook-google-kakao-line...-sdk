// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// Organization represents a row from 'ddg_local.organization'.
type Organization struct {
	ID           int64          `json:"id"`            // id
	Title        sql.NullString `json:"title"`         // title
	Remark       sql.NullString `json:"remark"`        // remark
	UseStatus    sql.NullInt64  `json:"use_status"`    // use_status
	DeleteStatus sql.NullInt64  `json:"delete_status"` // delete_status
	CreatedAt    mysql.NullTime `json:"created_at"`    // created_at
	UpdateAt     mysql.NullTime `json:"update_at"`     // update_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Organization exists in the database.
func (o *Organization) Exists() bool { //organization
	return o._exists
}

// Deleted provides information if the Organization has been deleted from the database.
func (o *Organization) Deleted() bool {
	return o._deleted
}

// Get table name
func GetOrganizationTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "organization", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Organization to the database.
func (o *Organization) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if o._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrganizationTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`title, remark, use_status, delete_status, created_at, update_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, o.Title, o.Remark, o.UseStatus, o.DeleteStatus, o.CreatedAt, o.UpdateAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, o.Title, o.Remark, o.UseStatus, o.DeleteStatus, o.CreatedAt, o.UpdateAt)
	} else {
		res, err = dbConn.Exec(sqlstr, o.Title, o.Remark, o.UseStatus, o.DeleteStatus, o.CreatedAt, o.UpdateAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	o.ID = int64(id)
	o._exists = true

	return nil
}

// Update updates the Organization in the database.
func (o *Organization) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if o._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrganizationTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`title = ?, remark = ?, use_status = ?, delete_status = ?, created_at = ?, update_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, o.Title, o.Remark, o.UseStatus, o.DeleteStatus, o.CreatedAt, o.UpdateAt, o.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, o.Title, o.Remark, o.UseStatus, o.DeleteStatus, o.CreatedAt, o.UpdateAt, o.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, o.Title, o.Remark, o.UseStatus, o.DeleteStatus, o.CreatedAt, o.UpdateAt, o.ID)
	}
	return err
}

// Save saves the Organization to the database.
func (o *Organization) Save(ctx context.Context) error {
	if o.Exists() {
		return o.Update(ctx)
	}

	return o.Insert(ctx)
}

// Delete deletes the Organization from the database.
func (o *Organization) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if o._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrganizationTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, o.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, o.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, o.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	o._deleted = true

	return nil
}

// OrganizationByID retrieves a row from 'ddg_local.organization' as a Organization.
//
// Generated from index 'organization_id_pkey'.
func OrganizationByID(ctx context.Context, id int64, key ...interface{}) (*Organization, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOrganizationTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, title, remark, use_status, delete_status, created_at, update_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	o := Organization{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&o.ID, &o.Title, &o.Remark, &o.UseStatus, &o.DeleteStatus, &o.CreatedAt, &o.UpdateAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&o.ID, &o.Title, &o.Remark, &o.UseStatus, &o.DeleteStatus, &o.CreatedAt, &o.UpdateAt)
		if err != nil {
			return nil, err
		}
	}

	return &o, nil
}
