// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// StatisticsUserOrdersPerMinute represents a row from 'aypcddg.statistics_user_orders_per_minutes'.
type StatisticsUserOrdersPerMinute struct {
	ID                          int64           `json:"id"`                             // id
	UpdateAt                    mysql.NullTime  `json:"update_at"`                      // update_at
	CreatedAt                   mysql.NullTime  `json:"created_at"`                     // created_at
	UserID                      sql.NullInt64   `json:"user_id"`                        // user_id
	Dates                       sql.NullString  `json:"dates"`                          // dates
	Days                        sql.NullString  `json:"days"`                           // days
	Hours                       sql.NullString  `json:"hours"`                          // hours
	Minutes                     sql.NullString  `json:"minutes"`                        // minutes
	OrdersNum                   sql.NullInt64   `json:"orders_num"`                     // orders_num
	OrdersTotalMoney            sql.NullFloat64 `json:"orders_total_money"`             // orders_total_money
	OrdersPayMoney              sql.NullFloat64 `json:"orders_pay_money"`               // orders_pay_money
	OrdersGoodsMoney            sql.NullFloat64 `json:"orders_goods_money"`             // orders_goods_money
	OrdersShippingMoney         sql.NullFloat64 `json:"orders_shipping_money"`          // orders_shipping_money
	OrdersFactoryDiscountMoney  sql.NullFloat64 `json:"orders_factory_discount_money"`  // orders_factory_discount_money
	OrdersPlatformDiscountMoney sql.NullFloat64 `json:"orders_platform_discount_money"` // orders_platform_discount_money

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the StatisticsUserOrdersPerMinute exists in the database.
func (suopm *StatisticsUserOrdersPerMinute) Exists() bool { //statistics_user_orders_per_minutes
	return suopm._exists
}

// Deleted provides information if the StatisticsUserOrdersPerMinute has been deleted from the database.
func (suopm *StatisticsUserOrdersPerMinute) Deleted() bool {
	return suopm._deleted
}

// Get table name
func GetStatisticsUserOrdersPerMinuteTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "statistics_user_orders_per_minutes", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the StatisticsUserOrdersPerMinute to the database.
func (suopm *StatisticsUserOrdersPerMinute) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if suopm._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetStatisticsUserOrdersPerMinuteTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`update_at, created_at, user_id, dates, days, hours, minutes, orders_num, orders_total_money, orders_pay_money, orders_goods_money, orders_shipping_money, orders_factory_discount_money, orders_platform_discount_money` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, suopm.UpdateAt, suopm.CreatedAt, suopm.UserID, suopm.Dates, suopm.Days, suopm.Hours, suopm.Minutes, suopm.OrdersNum, suopm.OrdersTotalMoney, suopm.OrdersPayMoney, suopm.OrdersGoodsMoney, suopm.OrdersShippingMoney, suopm.OrdersFactoryDiscountMoney, suopm.OrdersPlatformDiscountMoney)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, suopm.UpdateAt, suopm.CreatedAt, suopm.UserID, suopm.Dates, suopm.Days, suopm.Hours, suopm.Minutes, suopm.OrdersNum, suopm.OrdersTotalMoney, suopm.OrdersPayMoney, suopm.OrdersGoodsMoney, suopm.OrdersShippingMoney, suopm.OrdersFactoryDiscountMoney, suopm.OrdersPlatformDiscountMoney)
	} else {
		res, err = dbConn.Exec(sqlstr, suopm.UpdateAt, suopm.CreatedAt, suopm.UserID, suopm.Dates, suopm.Days, suopm.Hours, suopm.Minutes, suopm.OrdersNum, suopm.OrdersTotalMoney, suopm.OrdersPayMoney, suopm.OrdersGoodsMoney, suopm.OrdersShippingMoney, suopm.OrdersFactoryDiscountMoney, suopm.OrdersPlatformDiscountMoney)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	suopm.ID = int64(id)
	suopm._exists = true

	return nil
}

// Update updates the StatisticsUserOrdersPerMinute in the database.
func (suopm *StatisticsUserOrdersPerMinute) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if suopm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetStatisticsUserOrdersPerMinuteTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`update_at = ?, created_at = ?, user_id = ?, dates = ?, days = ?, hours = ?, minutes = ?, orders_num = ?, orders_total_money = ?, orders_pay_money = ?, orders_goods_money = ?, orders_shipping_money = ?, orders_factory_discount_money = ?, orders_platform_discount_money = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, suopm.UpdateAt, suopm.CreatedAt, suopm.UserID, suopm.Dates, suopm.Days, suopm.Hours, suopm.Minutes, suopm.OrdersNum, suopm.OrdersTotalMoney, suopm.OrdersPayMoney, suopm.OrdersGoodsMoney, suopm.OrdersShippingMoney, suopm.OrdersFactoryDiscountMoney, suopm.OrdersPlatformDiscountMoney, suopm.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, suopm.UpdateAt, suopm.CreatedAt, suopm.UserID, suopm.Dates, suopm.Days, suopm.Hours, suopm.Minutes, suopm.OrdersNum, suopm.OrdersTotalMoney, suopm.OrdersPayMoney, suopm.OrdersGoodsMoney, suopm.OrdersShippingMoney, suopm.OrdersFactoryDiscountMoney, suopm.OrdersPlatformDiscountMoney, suopm.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, suopm.UpdateAt, suopm.CreatedAt, suopm.UserID, suopm.Dates, suopm.Days, suopm.Hours, suopm.Minutes, suopm.OrdersNum, suopm.OrdersTotalMoney, suopm.OrdersPayMoney, suopm.OrdersGoodsMoney, suopm.OrdersShippingMoney, suopm.OrdersFactoryDiscountMoney, suopm.OrdersPlatformDiscountMoney, suopm.ID)
	}
	return err
}

// Save saves the StatisticsUserOrdersPerMinute to the database.
func (suopm *StatisticsUserOrdersPerMinute) Save(ctx context.Context) error {
	if suopm.Exists() {
		return suopm.Update(ctx)
	}

	return suopm.Insert(ctx)
}

// Delete deletes the StatisticsUserOrdersPerMinute from the database.
func (suopm *StatisticsUserOrdersPerMinute) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if suopm._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetStatisticsUserOrdersPerMinuteTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, suopm.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, suopm.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, suopm.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	suopm._deleted = true

	return nil
}

// StatisticsUserOrdersPerMinuteByID retrieves a row from 'aypcddg.statistics_user_orders_per_minutes' as a StatisticsUserOrdersPerMinute.
//
// Generated from index 'statistics_user_orders_per_minutes_id_pkey'.
func StatisticsUserOrdersPerMinuteByID(ctx context.Context, id int64, key ...interface{}) (*StatisticsUserOrdersPerMinute, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetStatisticsUserOrdersPerMinuteTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, update_at, created_at, user_id, dates, days, hours, minutes, orders_num, orders_total_money, orders_pay_money, orders_goods_money, orders_shipping_money, orders_factory_discount_money, orders_platform_discount_money ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	suopm := StatisticsUserOrdersPerMinute{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&suopm.ID, &suopm.UpdateAt, &suopm.CreatedAt, &suopm.UserID, &suopm.Dates, &suopm.Days, &suopm.Hours, &suopm.Minutes, &suopm.OrdersNum, &suopm.OrdersTotalMoney, &suopm.OrdersPayMoney, &suopm.OrdersGoodsMoney, &suopm.OrdersShippingMoney, &suopm.OrdersFactoryDiscountMoney, &suopm.OrdersPlatformDiscountMoney)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&suopm.ID, &suopm.UpdateAt, &suopm.CreatedAt, &suopm.UserID, &suopm.Dates, &suopm.Days, &suopm.Hours, &suopm.Minutes, &suopm.OrdersNum, &suopm.OrdersTotalMoney, &suopm.OrdersPayMoney, &suopm.OrdersGoodsMoney, &suopm.OrdersShippingMoney, &suopm.OrdersFactoryDiscountMoney, &suopm.OrdersPlatformDiscountMoney)
		if err != nil {
			return nil, err
		}
	}

	return &suopm, nil
}
