// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// OrdersAfterSale represents a row from 'aypcddg.orders_after_sales'.
type OrdersAfterSale struct {
	ID              int64           `json:"id"`                // id
	CreatedAt       mysql.NullTime  `json:"created_at"`        // created_at
	UpdateAt        mysql.NullTime  `json:"update_at"`         // update_at
	Oid             sql.NullInt64   `json:"oid"`               // oid
	Fid             sql.NullInt64   `json:"fid"`               // fid
	OrderGid        sql.NullInt64   `json:"order_gid"`         // order_gid
	RefundStatus    sql.NullInt64   `json:"refund_status"`     // refund_status
	Remark          sql.NullString  `json:"remark"`            // remark
	RefundNumber    sql.NullString  `json:"refund_number"`     // refund_number
	RefundChannel   sql.NullInt64   `json:"refund_channel"`    // refund_channel
	RefundMoney     sql.NullFloat64 `json:"refund_money"`      // refund_money
	AfterReasonType sql.NullInt64   `json:"after_reason_type"` // after_reason_type
	AfterContent    sql.NullString  `json:"after_content"`     // after_content
	ExpressCode     sql.NullString  `json:"express_code"`      // express_code
	ApplyRemark     sql.NullString  `json:"apply_remark"`      // apply_remark
	RefundNum       sql.NullInt64   `json:"refund_num"`        // refund_num
	RefundID        sql.NullInt64   `json:"refund_id"`         // refund_id
	ProportionJSON  sql.NullString  `json:"proportion_json"`   // proportion_json

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OrdersAfterSale exists in the database.
func (oas *OrdersAfterSale) Exists() bool { //orders_after_sales
	return oas._exists
}

// Deleted provides information if the OrdersAfterSale has been deleted from the database.
func (oas *OrdersAfterSale) Deleted() bool {
	return oas._deleted
}

// Get table name
func GetOrdersAfterSaleTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "orders_after_sales", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the OrdersAfterSale to the database.
func (oas *OrdersAfterSale) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if oas._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersAfterSaleTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`created_at, update_at, oid, fid, order_gid, refund_status, remark, refund_number, refund_channel, refund_money, after_reason_type, after_content, express_code, apply_remark, refund_num, refund_id, proportion_json` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, oas.CreatedAt, oas.UpdateAt, oas.Oid, oas.Fid, oas.OrderGid, oas.RefundStatus, oas.Remark, oas.RefundNumber, oas.RefundChannel, oas.RefundMoney, oas.AfterReasonType, oas.AfterContent, oas.ExpressCode, oas.ApplyRemark, oas.RefundNum, oas.RefundID, oas.ProportionJSON)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, oas.CreatedAt, oas.UpdateAt, oas.Oid, oas.Fid, oas.OrderGid, oas.RefundStatus, oas.Remark, oas.RefundNumber, oas.RefundChannel, oas.RefundMoney, oas.AfterReasonType, oas.AfterContent, oas.ExpressCode, oas.ApplyRemark, oas.RefundNum, oas.RefundID, oas.ProportionJSON)
	} else {
		res, err = dbConn.Exec(sqlstr, oas.CreatedAt, oas.UpdateAt, oas.Oid, oas.Fid, oas.OrderGid, oas.RefundStatus, oas.Remark, oas.RefundNumber, oas.RefundChannel, oas.RefundMoney, oas.AfterReasonType, oas.AfterContent, oas.ExpressCode, oas.ApplyRemark, oas.RefundNum, oas.RefundID, oas.ProportionJSON)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	oas.ID = int64(id)
	oas._exists = true

	return nil
}

// Update updates the OrdersAfterSale in the database.
func (oas *OrdersAfterSale) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if oas._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersAfterSaleTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`created_at = ?, update_at = ?, oid = ?, fid = ?, order_gid = ?, refund_status = ?, remark = ?, refund_number = ?, refund_channel = ?, refund_money = ?, after_reason_type = ?, after_content = ?, express_code = ?, apply_remark = ?, refund_num = ?, refund_id = ?, proportion_json = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, oas.CreatedAt, oas.UpdateAt, oas.Oid, oas.Fid, oas.OrderGid, oas.RefundStatus, oas.Remark, oas.RefundNumber, oas.RefundChannel, oas.RefundMoney, oas.AfterReasonType, oas.AfterContent, oas.ExpressCode, oas.ApplyRemark, oas.RefundNum, oas.RefundID, oas.ProportionJSON, oas.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, oas.CreatedAt, oas.UpdateAt, oas.Oid, oas.Fid, oas.OrderGid, oas.RefundStatus, oas.Remark, oas.RefundNumber, oas.RefundChannel, oas.RefundMoney, oas.AfterReasonType, oas.AfterContent, oas.ExpressCode, oas.ApplyRemark, oas.RefundNum, oas.RefundID, oas.ProportionJSON, oas.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, oas.CreatedAt, oas.UpdateAt, oas.Oid, oas.Fid, oas.OrderGid, oas.RefundStatus, oas.Remark, oas.RefundNumber, oas.RefundChannel, oas.RefundMoney, oas.AfterReasonType, oas.AfterContent, oas.ExpressCode, oas.ApplyRemark, oas.RefundNum, oas.RefundID, oas.ProportionJSON, oas.ID)
	}
	return err
}

// Save saves the OrdersAfterSale to the database.
func (oas *OrdersAfterSale) Save(ctx context.Context) error {
	if oas.Exists() {
		return oas.Update(ctx)
	}

	return oas.Insert(ctx)
}

// Delete deletes the OrdersAfterSale from the database.
func (oas *OrdersAfterSale) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if oas._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersAfterSaleTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, oas.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, oas.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, oas.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	oas._deleted = true

	return nil
}

// OrdersAfterSaleByID retrieves a row from 'aypcddg.orders_after_sales' as a OrdersAfterSale.
//
// Generated from index 'orders_after_sales_id_pkey'.
func OrdersAfterSaleByID(ctx context.Context, id int64, key ...interface{}) (*OrdersAfterSale, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOrdersAfterSaleTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, created_at, update_at, oid, fid, order_gid, refund_status, remark, refund_number, refund_channel, refund_money, after_reason_type, after_content, express_code, apply_remark, refund_num, refund_id, proportion_json ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	oas := OrdersAfterSale{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&oas.ID, &oas.CreatedAt, &oas.UpdateAt, &oas.Oid, &oas.Fid, &oas.OrderGid, &oas.RefundStatus, &oas.Remark, &oas.RefundNumber, &oas.RefundChannel, &oas.RefundMoney, &oas.AfterReasonType, &oas.AfterContent, &oas.ExpressCode, &oas.ApplyRemark, &oas.RefundNum, &oas.RefundID, &oas.ProportionJSON)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&oas.ID, &oas.CreatedAt, &oas.UpdateAt, &oas.Oid, &oas.Fid, &oas.OrderGid, &oas.RefundStatus, &oas.Remark, &oas.RefundNumber, &oas.RefundChannel, &oas.RefundMoney, &oas.AfterReasonType, &oas.AfterContent, &oas.ExpressCode, &oas.ApplyRemark, &oas.RefundNum, &oas.RefundID, &oas.ProportionJSON)
		if err != nil {
			return nil, err
		}
	}

	return &oas, nil
}
