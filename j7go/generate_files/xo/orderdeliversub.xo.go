// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// OrderDeliverSub represents a row from 'aypcddg.order_deliver_sub'.
type OrderDeliverSub struct {
	ID                 int64          `json:"id"`                   // id
	Orderid            sql.NullInt64  `json:"orderid"`              // orderid
	DeliverSn          sql.NullString `json:"deliver_sn"`           // deliver_sn
	DeliverCompanyName sql.NullString `json:"deliver_company_name"` // deliver_company_name
	DeliverCode        sql.NullString `json:"deliver_code"`         // deliver_code
	Ycodes             sql.NullString `json:"ycodes"`               // ycodes
	GoodsNums          sql.NullString `json:"goods_nums"`           // goods_nums
	CreatedAt          mysql.NullTime `json:"created_at"`           // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OrderDeliverSub exists in the database.
func (ods *OrderDeliverSub) Exists() bool { //order_deliver_sub
	return ods._exists
}

// Deleted provides information if the OrderDeliverSub has been deleted from the database.
func (ods *OrderDeliverSub) Deleted() bool {
	return ods._deleted
}

// Get table name
func GetOrderDeliverSubTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "order_deliver_sub", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the OrderDeliverSub to the database.
func (ods *OrderDeliverSub) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ods._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderDeliverSubTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`orderid, deliver_sn, deliver_company_name, deliver_code, ycodes, goods_nums, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ods.Orderid, ods.DeliverSn, ods.DeliverCompanyName, ods.DeliverCode, ods.Ycodes, ods.GoodsNums, ods.CreatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ods.Orderid, ods.DeliverSn, ods.DeliverCompanyName, ods.DeliverCode, ods.Ycodes, ods.GoodsNums, ods.CreatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, ods.Orderid, ods.DeliverSn, ods.DeliverCompanyName, ods.DeliverCode, ods.Ycodes, ods.GoodsNums, ods.CreatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ods.ID = int64(id)
	ods._exists = true

	return nil
}

// Update updates the OrderDeliverSub in the database.
func (ods *OrderDeliverSub) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ods._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderDeliverSubTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`orderid = ?, deliver_sn = ?, deliver_company_name = ?, deliver_code = ?, ycodes = ?, goods_nums = ?, created_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ods.Orderid, ods.DeliverSn, ods.DeliverCompanyName, ods.DeliverCode, ods.Ycodes, ods.GoodsNums, ods.CreatedAt, ods.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ods.Orderid, ods.DeliverSn, ods.DeliverCompanyName, ods.DeliverCode, ods.Ycodes, ods.GoodsNums, ods.CreatedAt, ods.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ods.Orderid, ods.DeliverSn, ods.DeliverCompanyName, ods.DeliverCode, ods.Ycodes, ods.GoodsNums, ods.CreatedAt, ods.ID)
	}
	return err
}

// Save saves the OrderDeliverSub to the database.
func (ods *OrderDeliverSub) Save(ctx context.Context) error {
	if ods.Exists() {
		return ods.Update(ctx)
	}

	return ods.Insert(ctx)
}

// Delete deletes the OrderDeliverSub from the database.
func (ods *OrderDeliverSub) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ods._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderDeliverSubTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ods.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ods.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ods.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	ods._deleted = true

	return nil
}

// OrderDeliverSubByID retrieves a row from 'aypcddg.order_deliver_sub' as a OrderDeliverSub.
//
// Generated from index 'order_deliver_sub_id_pkey'.
func OrderDeliverSubByID(ctx context.Context, id int64, key ...interface{}) (*OrderDeliverSub, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOrderDeliverSubTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, orderid, deliver_sn, deliver_company_name, deliver_code, ycodes, goods_nums, created_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ods := OrderDeliverSub{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&ods.ID, &ods.Orderid, &ods.DeliverSn, &ods.DeliverCompanyName, &ods.DeliverCode, &ods.Ycodes, &ods.GoodsNums, &ods.CreatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&ods.ID, &ods.Orderid, &ods.DeliverSn, &ods.DeliverCompanyName, &ods.DeliverCode, &ods.Ycodes, &ods.GoodsNums, &ods.CreatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &ods, nil
}
