// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"
	"time"

	"go.uber.org/zap"
)

// FlywaySchemaHistoryLevel represents a row from 'ddg_local.flyway_schema_history_level'.
type FlywaySchemaHistoryLevel struct {
	InstalledRank int            `json:"installed_rank"` // installed_rank
	Version       sql.NullString `json:"version"`        // version
	Description   string         `json:"description"`    // description
	Type          string         `json:"type"`           // type
	Script        string         `json:"script"`         // script
	Checksum      sql.NullInt64  `json:"checksum"`       // checksum
	InstalledBy   string         `json:"installed_by"`   // installed_by
	InstalledOn   time.Time      `json:"installed_on"`   // installed_on
	ExecutionTime int            `json:"execution_time"` // execution_time
	Success       bool           `json:"success"`        // success

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FlywaySchemaHistoryLevel exists in the database.
func (fshl *FlywaySchemaHistoryLevel) Exists() bool { //flyway_schema_history_level
	return fshl._exists
}

// Deleted provides information if the FlywaySchemaHistoryLevel has been deleted from the database.
func (fshl *FlywaySchemaHistoryLevel) Deleted() bool {
	return fshl._deleted
}

// Get table name
func GetFlywaySchemaHistoryLevelTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "flyway_schema_history_level", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FlywaySchemaHistoryLevel to the database.
func (fshl *FlywaySchemaHistoryLevel) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fshl._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFlywaySchemaHistoryLevelTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fshl.InstalledRank, fshl.Version, fshl.Description, fshl.Type, fshl.Script, fshl.Checksum, fshl.InstalledBy, fshl.InstalledOn, fshl.ExecutionTime, fshl.Success)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, fshl.InstalledRank, fshl.Version, fshl.Description, fshl.Type, fshl.Script, fshl.Checksum, fshl.InstalledBy, fshl.InstalledOn, fshl.ExecutionTime, fshl.Success)
	} else {
		res, err = dbConn.Exec(sqlstr, fshl.InstalledRank, fshl.Version, fshl.Description, fshl.Type, fshl.Script, fshl.Checksum, fshl.InstalledBy, fshl.InstalledOn, fshl.ExecutionTime, fshl.Success)
	}

	if err != nil {
		return err
	}

	// set existence
	fshl._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fshl.InstalledRank = int(id)
	fshl._exists = true

	return nil
}

// Update updates the FlywaySchemaHistoryLevel in the database.
func (fshl *FlywaySchemaHistoryLevel) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fshl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFlywaySchemaHistoryLevelTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`version = ?, description = ?, type = ?, script = ?, checksum = ?, installed_by = ?, installed_on = ?, execution_time = ?, success = ?` +
		` WHERE installed_rank = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fshl.Version, fshl.Description, fshl.Type, fshl.Script, fshl.Checksum, fshl.InstalledBy, fshl.InstalledOn, fshl.ExecutionTime, fshl.Success, fshl.InstalledRank)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fshl.Version, fshl.Description, fshl.Type, fshl.Script, fshl.Checksum, fshl.InstalledBy, fshl.InstalledOn, fshl.ExecutionTime, fshl.Success, fshl.InstalledRank)
	} else {
		_, err = dbConn.Exec(sqlstr, fshl.Version, fshl.Description, fshl.Type, fshl.Script, fshl.Checksum, fshl.InstalledBy, fshl.InstalledOn, fshl.ExecutionTime, fshl.Success, fshl.InstalledRank)
	}
	return err
}

// Save saves the FlywaySchemaHistoryLevel to the database.
func (fshl *FlywaySchemaHistoryLevel) Save(ctx context.Context) error {
	if fshl.Exists() {
		return fshl.Update(ctx)
	}

	return fshl.Insert(ctx)
}

// Delete deletes the FlywaySchemaHistoryLevel from the database.
func (fshl *FlywaySchemaHistoryLevel) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fshl._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFlywaySchemaHistoryLevelTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE installed_rank = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fshl.InstalledRank)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fshl.InstalledRank)
	} else {
		_, err = dbConn.Exec(sqlstr, fshl.InstalledRank)
	}

	if err != nil {
		return err
	}

	// set deleted
	fshl._deleted = true

	return nil
}

// FlywaySchemaHistoryLevelByInstalledRank retrieves a row from 'ddg_local.flyway_schema_history_level' as a FlywaySchemaHistoryLevel.
//
// Generated from index 'flyway_schema_history_level_installed_rank_pkey'.
func FlywaySchemaHistoryLevelByInstalledRank(ctx context.Context, installedRank int, key ...interface{}) (*FlywaySchemaHistoryLevel, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFlywaySchemaHistoryLevelTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success ` +
		`FROM ` + tableName +
		` WHERE installed_rank = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, installedRank)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fshl := FlywaySchemaHistoryLevel{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, installedRank).Scan(&fshl.InstalledRank, &fshl.Version, &fshl.Description, &fshl.Type, &fshl.Script, &fshl.Checksum, &fshl.InstalledBy, &fshl.InstalledOn, &fshl.ExecutionTime, &fshl.Success)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, installedRank).Scan(&fshl.InstalledRank, &fshl.Version, &fshl.Description, &fshl.Type, &fshl.Script, &fshl.Checksum, &fshl.InstalledBy, &fshl.InstalledOn, &fshl.ExecutionTime, &fshl.Success)
		if err != nil {
			return nil, err
		}
	}

	return &fshl, nil
}

// FlywaySchemaHistoryLevelsBySuccess retrieves a row from 'ddg_local.flyway_schema_history_level' as a FlywaySchemaHistoryLevel.
//
// Generated from index 'flyway_schema_history_level_s_idx'.
func FlywaySchemaHistoryLevelsBySuccess(ctx context.Context, success bool, key ...interface{}) ([]*FlywaySchemaHistoryLevel, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFlywaySchemaHistoryLevelTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success ` +
		`FROM ` + tableName +
		` WHERE success = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, success)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, success)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, success)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FlywaySchemaHistoryLevel, 0)
	for queryData.Next() {
		fshl := FlywaySchemaHistoryLevel{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fshl.InstalledRank, &fshl.Version, &fshl.Description, &fshl.Type, &fshl.Script, &fshl.Checksum, &fshl.InstalledBy, &fshl.InstalledOn, &fshl.ExecutionTime, &fshl.Success)
		if err != nil {
			return nil, err
		}

		res = append(res, &fshl)
	}

	return res, nil
}
