// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// RequestLimit represents a row from 'aypcddg.request_limit'.
type RequestLimit struct {
	ID           int    `json:"id"`             // id
	UID          uint   `json:"uid"`            // uid
	Key          string `json:"key"`            // key
	AllLimit     int    `json:"all_limit"`      // all_limit
	DayLimitJSON JSON   `json:"day_limit_json"` // day_limit_json

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RequestLimit exists in the database.
func (rl *RequestLimit) Exists() bool { //request_limit
	return rl._exists
}

// Deleted provides information if the RequestLimit has been deleted from the database.
func (rl *RequestLimit) Deleted() bool {
	return rl._deleted
}

// Get table name
func GetRequestLimitTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "request_limit", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the RequestLimit to the database.
func (rl *RequestLimit) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if rl._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRequestLimitTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, key, all_limit, day_limit_json` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rl.UID, rl.Key, rl.AllLimit, rl.DayLimitJSON)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, rl.UID, rl.Key, rl.AllLimit, rl.DayLimitJSON)
	} else {
		res, err = dbConn.Exec(sqlstr, rl.UID, rl.Key, rl.AllLimit, rl.DayLimitJSON)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	rl.ID = int(id)
	rl._exists = true

	return nil
}

// Update updates the RequestLimit in the database.
func (rl *RequestLimit) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if rl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRequestLimitTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`uid = ?, key = ?, all_limit = ?, day_limit_json = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rl.UID, rl.Key, rl.AllLimit, rl.DayLimitJSON, rl.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, rl.UID, rl.Key, rl.AllLimit, rl.DayLimitJSON, rl.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, rl.UID, rl.Key, rl.AllLimit, rl.DayLimitJSON, rl.ID)
	}
	return err
}

// Save saves the RequestLimit to the database.
func (rl *RequestLimit) Save(ctx context.Context) error {
	if rl.Exists() {
		return rl.Update(ctx)
	}

	return rl.Insert(ctx)
}

// Delete deletes the RequestLimit from the database.
func (rl *RequestLimit) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if rl._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRequestLimitTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rl.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, rl.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, rl.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	rl._deleted = true

	return nil
}

// RequestLimitByUIDKey retrieves a row from 'aypcddg.request_limit' as a RequestLimit.
//
// Generated from index 'q'.
func RequestLimitByUIDKey(ctx context.Context, uid uint, key string, key ...interface{}) (*RequestLimit, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetRequestLimitTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, key, all_limit, day_limit_json ` +
		`FROM ` + tableName +
		` WHERE uid = ? AND key = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid, key)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	rl := RequestLimit{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, uid, key).Scan(&rl.ID, &rl.UID, &rl.Key, &rl.AllLimit, &rl.DayLimitJSON)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, uid, key).Scan(&rl.ID, &rl.UID, &rl.Key, &rl.AllLimit, &rl.DayLimitJSON)
		if err != nil {
			return nil, err
		}
	}

	return &rl, nil
}

// RequestLimitByID retrieves a row from 'aypcddg.request_limit' as a RequestLimit.
//
// Generated from index 'request_limit_id_pkey'.
func RequestLimitByID(ctx context.Context, id int, key ...interface{}) (*RequestLimit, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetRequestLimitTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, key, all_limit, day_limit_json ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	rl := RequestLimit{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&rl.ID, &rl.UID, &rl.Key, &rl.AllLimit, &rl.DayLimitJSON)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&rl.ID, &rl.UID, &rl.Key, &rl.AllLimit, &rl.DayLimitJSON)
		if err != nil {
			return nil, err
		}
	}

	return &rl, nil
}
