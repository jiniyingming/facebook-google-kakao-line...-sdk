// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// AssetIncomeSummaryDate represents a row from 'aypcddg.asset_income_summary_dates'.
type AssetIncomeSummaryDate struct {
	ID                         int64           `json:"id"`                            // id
	AssetID                    sql.NullInt64   `json:"asset_id"`                      // asset_id
	Dates                      sql.NullString  `json:"dates"`                         // dates
	CreatedAt                  mysql.NullTime  `json:"created_at"`                    // created_at
	UpdateAt                   mysql.NullTime  `json:"update_at"`                     // update_at
	OrdersNum                  sql.NullInt64   `json:"orders_num"`                    // orders_num
	OrdersSoldMoney            sql.NullFloat64 `json:"orders_sold_money"`             // orders_sold_money
	OrdersIncomeMoney          sql.NullFloat64 `json:"orders_income_money"`           // orders_income_money
	OrdersShareIncomeMoney     sql.NullFloat64 `json:"orders_share_income_money"`     // orders_share_income_money
	SettlementNum              sql.NullInt64   `json:"settlement_num"`                // settlement_num
	SettlementIncomeMoney      sql.NullFloat64 `json:"settlement_income_money"`       // settlement_income_money
	SettlementShareIncomeMoney sql.NullFloat64 `json:"settlement_share_income_money"` // settlement_share_income_money
	Versions                   sql.NullInt64   `json:"versions"`                      // versions

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AssetIncomeSummaryDate exists in the database.
func (aisd *AssetIncomeSummaryDate) Exists() bool { //asset_income_summary_dates
	return aisd._exists
}

// Deleted provides information if the AssetIncomeSummaryDate has been deleted from the database.
func (aisd *AssetIncomeSummaryDate) Deleted() bool {
	return aisd._deleted
}

// Get table name
func GetAssetIncomeSummaryDateTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "asset_income_summary_dates", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the AssetIncomeSummaryDate to the database.
func (aisd *AssetIncomeSummaryDate) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if aisd._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetIncomeSummaryDateTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`asset_id, dates, created_at, update_at, orders_num, orders_sold_money, orders_income_money, orders_share_income_money, settlement_num, settlement_income_money, settlement_share_income_money, versions` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, aisd.AssetID, aisd.Dates, aisd.CreatedAt, aisd.UpdateAt, aisd.OrdersNum, aisd.OrdersSoldMoney, aisd.OrdersIncomeMoney, aisd.OrdersShareIncomeMoney, aisd.SettlementNum, aisd.SettlementIncomeMoney, aisd.SettlementShareIncomeMoney, aisd.Versions)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, aisd.AssetID, aisd.Dates, aisd.CreatedAt, aisd.UpdateAt, aisd.OrdersNum, aisd.OrdersSoldMoney, aisd.OrdersIncomeMoney, aisd.OrdersShareIncomeMoney, aisd.SettlementNum, aisd.SettlementIncomeMoney, aisd.SettlementShareIncomeMoney, aisd.Versions)
	} else {
		res, err = dbConn.Exec(sqlstr, aisd.AssetID, aisd.Dates, aisd.CreatedAt, aisd.UpdateAt, aisd.OrdersNum, aisd.OrdersSoldMoney, aisd.OrdersIncomeMoney, aisd.OrdersShareIncomeMoney, aisd.SettlementNum, aisd.SettlementIncomeMoney, aisd.SettlementShareIncomeMoney, aisd.Versions)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	aisd.ID = int64(id)
	aisd._exists = true

	return nil
}

// Update updates the AssetIncomeSummaryDate in the database.
func (aisd *AssetIncomeSummaryDate) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if aisd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetIncomeSummaryDateTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`asset_id = ?, dates = ?, created_at = ?, update_at = ?, orders_num = ?, orders_sold_money = ?, orders_income_money = ?, orders_share_income_money = ?, settlement_num = ?, settlement_income_money = ?, settlement_share_income_money = ?, versions = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, aisd.AssetID, aisd.Dates, aisd.CreatedAt, aisd.UpdateAt, aisd.OrdersNum, aisd.OrdersSoldMoney, aisd.OrdersIncomeMoney, aisd.OrdersShareIncomeMoney, aisd.SettlementNum, aisd.SettlementIncomeMoney, aisd.SettlementShareIncomeMoney, aisd.Versions, aisd.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, aisd.AssetID, aisd.Dates, aisd.CreatedAt, aisd.UpdateAt, aisd.OrdersNum, aisd.OrdersSoldMoney, aisd.OrdersIncomeMoney, aisd.OrdersShareIncomeMoney, aisd.SettlementNum, aisd.SettlementIncomeMoney, aisd.SettlementShareIncomeMoney, aisd.Versions, aisd.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, aisd.AssetID, aisd.Dates, aisd.CreatedAt, aisd.UpdateAt, aisd.OrdersNum, aisd.OrdersSoldMoney, aisd.OrdersIncomeMoney, aisd.OrdersShareIncomeMoney, aisd.SettlementNum, aisd.SettlementIncomeMoney, aisd.SettlementShareIncomeMoney, aisd.Versions, aisd.ID)
	}
	return err
}

// Save saves the AssetIncomeSummaryDate to the database.
func (aisd *AssetIncomeSummaryDate) Save(ctx context.Context) error {
	if aisd.Exists() {
		return aisd.Update(ctx)
	}

	return aisd.Insert(ctx)
}

// Delete deletes the AssetIncomeSummaryDate from the database.
func (aisd *AssetIncomeSummaryDate) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if aisd._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetIncomeSummaryDateTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, aisd.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, aisd.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, aisd.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	aisd._deleted = true

	return nil
}

// AssetIncomeSummaryDateByAssetIDDates retrieves a row from 'aypcddg.asset_income_summary_dates' as a AssetIncomeSummaryDate.
//
// Generated from index 'asset_dates'.
func AssetIncomeSummaryDateByAssetIDDates(ctx context.Context, assetID sql.NullInt64, dates sql.NullString, key ...interface{}) (*AssetIncomeSummaryDate, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAssetIncomeSummaryDateTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, asset_id, dates, created_at, update_at, orders_num, orders_sold_money, orders_income_money, orders_share_income_money, settlement_num, settlement_income_money, settlement_share_income_money, versions ` +
		`FROM ` + tableName +
		` WHERE asset_id = ? AND dates = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, assetID, dates)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	aisd := AssetIncomeSummaryDate{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, assetID, dates).Scan(&aisd.ID, &aisd.AssetID, &aisd.Dates, &aisd.CreatedAt, &aisd.UpdateAt, &aisd.OrdersNum, &aisd.OrdersSoldMoney, &aisd.OrdersIncomeMoney, &aisd.OrdersShareIncomeMoney, &aisd.SettlementNum, &aisd.SettlementIncomeMoney, &aisd.SettlementShareIncomeMoney, &aisd.Versions)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, assetID, dates).Scan(&aisd.ID, &aisd.AssetID, &aisd.Dates, &aisd.CreatedAt, &aisd.UpdateAt, &aisd.OrdersNum, &aisd.OrdersSoldMoney, &aisd.OrdersIncomeMoney, &aisd.OrdersShareIncomeMoney, &aisd.SettlementNum, &aisd.SettlementIncomeMoney, &aisd.SettlementShareIncomeMoney, &aisd.Versions)
		if err != nil {
			return nil, err
		}
	}

	return &aisd, nil
}

// AssetIncomeSummaryDateByID retrieves a row from 'aypcddg.asset_income_summary_dates' as a AssetIncomeSummaryDate.
//
// Generated from index 'asset_income_summary_dates_id_pkey'.
func AssetIncomeSummaryDateByID(ctx context.Context, id int64, key ...interface{}) (*AssetIncomeSummaryDate, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAssetIncomeSummaryDateTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, asset_id, dates, created_at, update_at, orders_num, orders_sold_money, orders_income_money, orders_share_income_money, settlement_num, settlement_income_money, settlement_share_income_money, versions ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	aisd := AssetIncomeSummaryDate{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&aisd.ID, &aisd.AssetID, &aisd.Dates, &aisd.CreatedAt, &aisd.UpdateAt, &aisd.OrdersNum, &aisd.OrdersSoldMoney, &aisd.OrdersIncomeMoney, &aisd.OrdersShareIncomeMoney, &aisd.SettlementNum, &aisd.SettlementIncomeMoney, &aisd.SettlementShareIncomeMoney, &aisd.Versions)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&aisd.ID, &aisd.AssetID, &aisd.Dates, &aisd.CreatedAt, &aisd.UpdateAt, &aisd.OrdersNum, &aisd.OrdersSoldMoney, &aisd.OrdersIncomeMoney, &aisd.OrdersShareIncomeMoney, &aisd.SettlementNum, &aisd.SettlementIncomeMoney, &aisd.SettlementShareIncomeMoney, &aisd.Versions)
		if err != nil {
			return nil, err
		}
	}

	return &aisd, nil
}
