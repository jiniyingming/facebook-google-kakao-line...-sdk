// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// OrdersSettlementObject represents a row from 'aypcddg.orders_settlement_object'.
type OrdersSettlementObject struct {
	ID                        int64           `json:"id"`                           // id
	OrdersSettlementID        sql.NullInt64   `json:"orders_settlement_id"`         // orders_settlement_id
	OrdersID                  sql.NullInt64   `json:"orders_id"`                    // orders_id
	UserID                    sql.NullInt64   `json:"user_id"`                      // user_id
	PartakeSettlementMoney    sql.NullFloat64 `json:"partake_settlement_money"`     // partake_settlement_money
	RealSettlementMoney       sql.NullFloat64 `json:"real_settlement_money"`        // real_settlement_money
	ServiceMoney              sql.NullFloat64 `json:"service_money"`                // service_money
	UserType                  sql.NullInt64   `json:"user_type"`                    // user_type
	ServiceID                 sql.NullInt64   `json:"service_id"`                   // service_id
	ServiceCharge             sql.NullFloat64 `json:"service_charge"`               // service_charge
	CreatedAt                 mysql.NullTime  `json:"created_at"`                   // created_at
	UpdateAt                  mysql.NullTime  `json:"update_at"`                    // update_at
	DoStatus                  sql.NullInt64   `json:"do_status"`                    // do_status
	GoodsOriginFee            sql.NullFloat64 `json:"goods_origin_fee"`             // goods_origin_fee
	AfterServicesMoney        sql.NullFloat64 `json:"after_services_money"`         // after_services_money
	AfterServicesMoneyFactory sql.NullFloat64 `json:"after_services_money_factory"` // after_services_money_factory
	XiaobServiceMoney         sql.NullFloat64 `json:"xiaob_service_money"`          // xiaob_service_money
	RealSettlementPushMoney   sql.NullFloat64 `json:"real_settlement_push_money"`   // real_settlement_push_money
	RealSettlementShareMoney  sql.NullFloat64 `json:"real_settlement_share_money"`  // real_settlement_share_money

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OrdersSettlementObject exists in the database.
func (oso *OrdersSettlementObject) Exists() bool { //orders_settlement_object
	return oso._exists
}

// Deleted provides information if the OrdersSettlementObject has been deleted from the database.
func (oso *OrdersSettlementObject) Deleted() bool {
	return oso._deleted
}

// Get table name
func GetOrdersSettlementObjectTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "orders_settlement_object", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the OrdersSettlementObject to the database.
func (oso *OrdersSettlementObject) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if oso._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersSettlementObjectTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`orders_settlement_id, orders_id, user_id, partake_settlement_money, real_settlement_money, service_money, user_type, service_id, service_charge, created_at, update_at, do_status, goods_origin_fee, after_services_money, after_services_money_factory, xiaob_service_money, real_settlement_push_money, real_settlement_share_money` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, oso.OrdersSettlementID, oso.OrdersID, oso.UserID, oso.PartakeSettlementMoney, oso.RealSettlementMoney, oso.ServiceMoney, oso.UserType, oso.ServiceID, oso.ServiceCharge, oso.CreatedAt, oso.UpdateAt, oso.DoStatus, oso.GoodsOriginFee, oso.AfterServicesMoney, oso.AfterServicesMoneyFactory, oso.XiaobServiceMoney, oso.RealSettlementPushMoney, oso.RealSettlementShareMoney)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, oso.OrdersSettlementID, oso.OrdersID, oso.UserID, oso.PartakeSettlementMoney, oso.RealSettlementMoney, oso.ServiceMoney, oso.UserType, oso.ServiceID, oso.ServiceCharge, oso.CreatedAt, oso.UpdateAt, oso.DoStatus, oso.GoodsOriginFee, oso.AfterServicesMoney, oso.AfterServicesMoneyFactory, oso.XiaobServiceMoney, oso.RealSettlementPushMoney, oso.RealSettlementShareMoney)
	} else {
		res, err = dbConn.Exec(sqlstr, oso.OrdersSettlementID, oso.OrdersID, oso.UserID, oso.PartakeSettlementMoney, oso.RealSettlementMoney, oso.ServiceMoney, oso.UserType, oso.ServiceID, oso.ServiceCharge, oso.CreatedAt, oso.UpdateAt, oso.DoStatus, oso.GoodsOriginFee, oso.AfterServicesMoney, oso.AfterServicesMoneyFactory, oso.XiaobServiceMoney, oso.RealSettlementPushMoney, oso.RealSettlementShareMoney)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	oso.ID = int64(id)
	oso._exists = true

	return nil
}

// Update updates the OrdersSettlementObject in the database.
func (oso *OrdersSettlementObject) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if oso._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersSettlementObjectTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`orders_settlement_id = ?, orders_id = ?, user_id = ?, partake_settlement_money = ?, real_settlement_money = ?, service_money = ?, user_type = ?, service_id = ?, service_charge = ?, created_at = ?, update_at = ?, do_status = ?, goods_origin_fee = ?, after_services_money = ?, after_services_money_factory = ?, xiaob_service_money = ?, real_settlement_push_money = ?, real_settlement_share_money = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, oso.OrdersSettlementID, oso.OrdersID, oso.UserID, oso.PartakeSettlementMoney, oso.RealSettlementMoney, oso.ServiceMoney, oso.UserType, oso.ServiceID, oso.ServiceCharge, oso.CreatedAt, oso.UpdateAt, oso.DoStatus, oso.GoodsOriginFee, oso.AfterServicesMoney, oso.AfterServicesMoneyFactory, oso.XiaobServiceMoney, oso.RealSettlementPushMoney, oso.RealSettlementShareMoney, oso.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, oso.OrdersSettlementID, oso.OrdersID, oso.UserID, oso.PartakeSettlementMoney, oso.RealSettlementMoney, oso.ServiceMoney, oso.UserType, oso.ServiceID, oso.ServiceCharge, oso.CreatedAt, oso.UpdateAt, oso.DoStatus, oso.GoodsOriginFee, oso.AfterServicesMoney, oso.AfterServicesMoneyFactory, oso.XiaobServiceMoney, oso.RealSettlementPushMoney, oso.RealSettlementShareMoney, oso.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, oso.OrdersSettlementID, oso.OrdersID, oso.UserID, oso.PartakeSettlementMoney, oso.RealSettlementMoney, oso.ServiceMoney, oso.UserType, oso.ServiceID, oso.ServiceCharge, oso.CreatedAt, oso.UpdateAt, oso.DoStatus, oso.GoodsOriginFee, oso.AfterServicesMoney, oso.AfterServicesMoneyFactory, oso.XiaobServiceMoney, oso.RealSettlementPushMoney, oso.RealSettlementShareMoney, oso.ID)
	}
	return err
}

// Save saves the OrdersSettlementObject to the database.
func (oso *OrdersSettlementObject) Save(ctx context.Context) error {
	if oso.Exists() {
		return oso.Update(ctx)
	}

	return oso.Insert(ctx)
}

// Delete deletes the OrdersSettlementObject from the database.
func (oso *OrdersSettlementObject) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if oso._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersSettlementObjectTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, oso.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, oso.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, oso.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	oso._deleted = true

	return nil
}

// OrdersSettlementObjectByID retrieves a row from 'aypcddg.orders_settlement_object' as a OrdersSettlementObject.
//
// Generated from index 'orders_settlement_object_id_pkey'.
func OrdersSettlementObjectByID(ctx context.Context, id int64, key ...interface{}) (*OrdersSettlementObject, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOrdersSettlementObjectTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, orders_settlement_id, orders_id, user_id, partake_settlement_money, real_settlement_money, service_money, user_type, service_id, service_charge, created_at, update_at, do_status, goods_origin_fee, after_services_money, after_services_money_factory, xiaob_service_money, real_settlement_push_money, real_settlement_share_money ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	oso := OrdersSettlementObject{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&oso.ID, &oso.OrdersSettlementID, &oso.OrdersID, &oso.UserID, &oso.PartakeSettlementMoney, &oso.RealSettlementMoney, &oso.ServiceMoney, &oso.UserType, &oso.ServiceID, &oso.ServiceCharge, &oso.CreatedAt, &oso.UpdateAt, &oso.DoStatus, &oso.GoodsOriginFee, &oso.AfterServicesMoney, &oso.AfterServicesMoneyFactory, &oso.XiaobServiceMoney, &oso.RealSettlementPushMoney, &oso.RealSettlementShareMoney)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&oso.ID, &oso.OrdersSettlementID, &oso.OrdersID, &oso.UserID, &oso.PartakeSettlementMoney, &oso.RealSettlementMoney, &oso.ServiceMoney, &oso.UserType, &oso.ServiceID, &oso.ServiceCharge, &oso.CreatedAt, &oso.UpdateAt, &oso.DoStatus, &oso.GoodsOriginFee, &oso.AfterServicesMoney, &oso.AfterServicesMoneyFactory, &oso.XiaobServiceMoney, &oso.RealSettlementPushMoney, &oso.RealSettlementShareMoney)
		if err != nil {
			return nil, err
		}
	}

	return &oso, nil
}
