// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// Asset represents a row from 'ddg_local.asset'.
type Asset struct {
	ID                 int64          `json:"id"`                   // id
	OrganizationID     sql.NullInt64  `json:"organization_id"`      // organization_id
	OrganizationUserID sql.NullInt64  `json:"organization_user_id"` // organization_user_id
	CreatedAt          mysql.NullTime `json:"created_at"`           // created_at
	UpdateAt           mysql.NullTime `json:"update_at"`            // update_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Asset exists in the database.
func (a *Asset) Exists() bool { //asset
	return a._exists
}

// Deleted provides information if the Asset has been deleted from the database.
func (a *Asset) Deleted() bool {
	return a._deleted
}

// Get table name
func GetAssetTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "asset", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Asset to the database.
func (a *Asset) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`organization_id, organization_user_id, created_at, update_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.OrganizationID, a.OrganizationUserID, a.CreatedAt, a.UpdateAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, a.OrganizationID, a.OrganizationUserID, a.CreatedAt, a.UpdateAt)
	} else {
		res, err = dbConn.Exec(sqlstr, a.OrganizationID, a.OrganizationUserID, a.CreatedAt, a.UpdateAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.ID = int64(id)
	a._exists = true

	return nil
}

// Update updates the Asset in the database.
func (a *Asset) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`organization_id = ?, organization_user_id = ?, created_at = ?, update_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.OrganizationID, a.OrganizationUserID, a.CreatedAt, a.UpdateAt, a.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, a.OrganizationID, a.OrganizationUserID, a.CreatedAt, a.UpdateAt, a.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, a.OrganizationID, a.OrganizationUserID, a.CreatedAt, a.UpdateAt, a.ID)
	}
	return err
}

// Save saves the Asset to the database.
func (a *Asset) Save(ctx context.Context) error {
	if a.Exists() {
		return a.Update(ctx)
	}

	return a.Insert(ctx)
}

// Delete deletes the Asset from the database.
func (a *Asset) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if a._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAssetTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, a.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, a.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AssetByID retrieves a row from 'ddg_local.asset' as a Asset.
//
// Generated from index 'asset_id_pkey'.
func AssetByID(ctx context.Context, id int64, key ...interface{}) (*Asset, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAssetTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, organization_id, organization_user_id, created_at, update_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	a := Asset{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&a.ID, &a.OrganizationID, &a.OrganizationUserID, &a.CreatedAt, &a.UpdateAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&a.ID, &a.OrganizationID, &a.OrganizationUserID, &a.CreatedAt, &a.UpdateAt)
		if err != nil {
			return nil, err
		}
	}

	return &a, nil
}

// AssetByOrganizationUserID retrieves a row from 'ddg_local.asset' as a Asset.
//
// Generated from index 'organization_user_id'.
func AssetByOrganizationUserID(ctx context.Context, organizationUserID sql.NullInt64, key ...interface{}) (*Asset, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAssetTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, organization_id, organization_user_id, created_at, update_at ` +
		`FROM ` + tableName +
		` WHERE organization_user_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, organizationUserID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	a := Asset{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, organizationUserID).Scan(&a.ID, &a.OrganizationID, &a.OrganizationUserID, &a.CreatedAt, &a.UpdateAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, organizationUserID).Scan(&a.ID, &a.OrganizationID, &a.OrganizationUserID, &a.CreatedAt, &a.UpdateAt)
		if err != nil {
			return nil, err
		}
	}

	return &a, nil
}
