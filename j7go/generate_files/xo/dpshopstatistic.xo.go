// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// DpShopStatistic represents a row from 'aypcddg.dp_shop_statistics'.
type DpShopStatistic struct {
	ID        int            `json:"id"`         // id
	ShopID    int            `json:"shop_id"`    // shop_id
	ShareSign string         `json:"share_sign"` // share_sign
	ViewNum   int            `json:"view_num"`   // view_num
	Day       mysql.NullTime `json:"day"`        // day

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DpShopStatistic exists in the database.
func (dss *DpShopStatistic) Exists() bool { //dp_shop_statistics
	return dss._exists
}

// Deleted provides information if the DpShopStatistic has been deleted from the database.
func (dss *DpShopStatistic) Deleted() bool {
	return dss._deleted
}

// Get table name
func GetDpShopStatisticTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "dp_shop_statistics", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the DpShopStatistic to the database.
func (dss *DpShopStatistic) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if dss._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDpShopStatisticTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`shop_id, share_sign, view_num, day` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dss.ShopID, dss.ShareSign, dss.ViewNum, dss.Day)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, dss.ShopID, dss.ShareSign, dss.ViewNum, dss.Day)
	} else {
		res, err = dbConn.Exec(sqlstr, dss.ShopID, dss.ShareSign, dss.ViewNum, dss.Day)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	dss.ID = int(id)
	dss._exists = true

	return nil
}

// Update updates the DpShopStatistic in the database.
func (dss *DpShopStatistic) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dss._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDpShopStatisticTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`shop_id = ?, share_sign = ?, view_num = ?, day = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dss.ShopID, dss.ShareSign, dss.ViewNum, dss.Day, dss.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dss.ShopID, dss.ShareSign, dss.ViewNum, dss.Day, dss.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, dss.ShopID, dss.ShareSign, dss.ViewNum, dss.Day, dss.ID)
	}
	return err
}

// Save saves the DpShopStatistic to the database.
func (dss *DpShopStatistic) Save(ctx context.Context) error {
	if dss.Exists() {
		return dss.Update(ctx)
	}

	return dss.Insert(ctx)
}

// Delete deletes the DpShopStatistic from the database.
func (dss *DpShopStatistic) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dss._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDpShopStatisticTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dss.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dss.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, dss.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	dss._deleted = true

	return nil
}

// DpShopStatisticByID retrieves a row from 'aypcddg.dp_shop_statistics' as a DpShopStatistic.
//
// Generated from index 'dp_shop_statistics_id_pkey'.
func DpShopStatisticByID(ctx context.Context, id int, key ...interface{}) (*DpShopStatistic, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDpShopStatisticTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, shop_id, share_sign, view_num, day ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	dss := DpShopStatistic{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&dss.ID, &dss.ShopID, &dss.ShareSign, &dss.ViewNum, &dss.Day)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&dss.ID, &dss.ShopID, &dss.ShareSign, &dss.ViewNum, &dss.Day)
		if err != nil {
			return nil, err
		}
	}

	return &dss, nil
}

// DpShopStatisticsByShopIDShareSignDay retrieves a row from 'aypcddg.dp_shop_statistics' as a DpShopStatistic.
//
// Generated from index 'shop_sign_day'.
func DpShopStatisticsByShopIDShareSignDay(ctx context.Context, shopID int, shareSign string, day mysql.NullTime, key ...interface{}) ([]*DpShopStatistic, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDpShopStatisticTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, shop_id, share_sign, view_num, day ` +
		`FROM ` + tableName +
		` WHERE shop_id = ? AND share_sign = ? AND day = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, shopID, shareSign, day)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, shopID, shareSign, day)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, shopID, shareSign, day)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*DpShopStatistic, 0)
	for queryData.Next() {
		dss := DpShopStatistic{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&dss.ID, &dss.ShopID, &dss.ShareSign, &dss.ViewNum, &dss.Day)
		if err != nil {
			return nil, err
		}

		res = append(res, &dss)
	}

	return res, nil
}
