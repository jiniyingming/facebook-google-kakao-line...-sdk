// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"
	"time"

	"go.uber.org/zap"
)

// InvitationCode represents a row from 'aypcddg.invitation_code'.
type InvitationCode struct {
	Code      string    `json:"code"`       // code
	Bunionid  int       `json:"bunionid"`   // bunionid
	UsedNums  int       `json:"used_nums"`  // used_nums
	LimitNums int       `json:"limit_nums"` // limit_nums
	CreatedAt time.Time `json:"created_at"` // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the InvitationCode exists in the database.
func (ic *InvitationCode) Exists() bool { //invitation_code
	return ic._exists
}

// Deleted provides information if the InvitationCode has been deleted from the database.
func (ic *InvitationCode) Deleted() bool {
	return ic._deleted
}

// Get table name
func GetInvitationCodeTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "invitation_code", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the InvitationCode to the database.
func (ic *InvitationCode) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ic._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetInvitationCodeTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`code, bunionid, used_nums, limit_nums, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ic.Code, ic.Bunionid, ic.UsedNums, ic.LimitNums, ic.CreatedAt)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, ic.Code, ic.Bunionid, ic.UsedNums, ic.LimitNums, ic.CreatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, ic.Code, ic.Bunionid, ic.UsedNums, ic.LimitNums, ic.CreatedAt)
	}

	if err != nil {
		return err
	}

	// set existence
	ic._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ic.Code = string(id)
	ic._exists = true

	return nil
}

// Update updates the InvitationCode in the database.
func (ic *InvitationCode) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ic._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetInvitationCodeTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`bunionid = ?, used_nums = ?, limit_nums = ?, created_at = ?` +
		` WHERE code = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ic.Bunionid, ic.UsedNums, ic.LimitNums, ic.CreatedAt, ic.Code)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ic.Bunionid, ic.UsedNums, ic.LimitNums, ic.CreatedAt, ic.Code)
	} else {
		_, err = dbConn.Exec(sqlstr, ic.Bunionid, ic.UsedNums, ic.LimitNums, ic.CreatedAt, ic.Code)
	}
	return err
}

// Save saves the InvitationCode to the database.
func (ic *InvitationCode) Save(ctx context.Context) error {
	if ic.Exists() {
		return ic.Update(ctx)
	}

	return ic.Insert(ctx)
}

// Delete deletes the InvitationCode from the database.
func (ic *InvitationCode) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ic._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetInvitationCodeTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE code = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ic.Code)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ic.Code)
	} else {
		_, err = dbConn.Exec(sqlstr, ic.Code)
	}

	if err != nil {
		return err
	}

	// set deleted
	ic._deleted = true

	return nil
}

// InvitationCodesByBunionid retrieves a row from 'aypcddg.invitation_code' as a InvitationCode.
//
// Generated from index 'bunionid'.
func InvitationCodesByBunionid(ctx context.Context, bunionid int, key ...interface{}) ([]*InvitationCode, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetInvitationCodeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`code, bunionid, used_nums, limit_nums, created_at ` +
		`FROM ` + tableName +
		` WHERE bunionid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bunionid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, bunionid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, bunionid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*InvitationCode, 0)
	for queryData.Next() {
		ic := InvitationCode{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&ic.Code, &ic.Bunionid, &ic.UsedNums, &ic.LimitNums, &ic.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &ic)
	}

	return res, nil
}

// InvitationCodeByCode retrieves a row from 'aypcddg.invitation_code' as a InvitationCode.
//
// Generated from index 'code'.
func InvitationCodeByCode(ctx context.Context, code string, key ...interface{}) (*InvitationCode, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetInvitationCodeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`code, bunionid, used_nums, limit_nums, created_at ` +
		`FROM ` + tableName +
		` WHERE code = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, code)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ic := InvitationCode{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, code).Scan(&ic.Code, &ic.Bunionid, &ic.UsedNums, &ic.LimitNums, &ic.CreatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, code).Scan(&ic.Code, &ic.Bunionid, &ic.UsedNums, &ic.LimitNums, &ic.CreatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &ic, nil
}

// InvitationCodesByCreatedAt retrieves a row from 'aypcddg.invitation_code' as a InvitationCode.
//
// Generated from index 'created_at'.
func InvitationCodesByCreatedAt(ctx context.Context, createdAt time.Time, key ...interface{}) ([]*InvitationCode, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetInvitationCodeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`code, bunionid, used_nums, limit_nums, created_at ` +
		`FROM ` + tableName +
		` WHERE created_at = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, createdAt)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, createdAt)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, createdAt)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*InvitationCode, 0)
	for queryData.Next() {
		ic := InvitationCode{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&ic.Code, &ic.Bunionid, &ic.UsedNums, &ic.LimitNums, &ic.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &ic)
	}

	return res, nil
}

// InvitationCodeByCode retrieves a row from 'aypcddg.invitation_code' as a InvitationCode.
//
// Generated from index 'invitation_code_code_pkey'.
func InvitationCodeByCode(ctx context.Context, code string, key ...interface{}) (*InvitationCode, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetInvitationCodeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`code, bunionid, used_nums, limit_nums, created_at ` +
		`FROM ` + tableName +
		` WHERE code = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, code)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ic := InvitationCode{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, code).Scan(&ic.Code, &ic.Bunionid, &ic.UsedNums, &ic.LimitNums, &ic.CreatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, code).Scan(&ic.Code, &ic.Bunionid, &ic.UsedNums, &ic.LimitNums, &ic.CreatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &ic, nil
}

// InvitationCodesByUsedNums retrieves a row from 'aypcddg.invitation_code' as a InvitationCode.
//
// Generated from index 'used_nums'.
func InvitationCodesByUsedNums(ctx context.Context, usedNums int, key ...interface{}) ([]*InvitationCode, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetInvitationCodeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`code, bunionid, used_nums, limit_nums, created_at ` +
		`FROM ` + tableName +
		` WHERE used_nums = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, usedNums)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, usedNums)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, usedNums)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*InvitationCode, 0)
	for queryData.Next() {
		ic := InvitationCode{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&ic.Code, &ic.Bunionid, &ic.UsedNums, &ic.LimitNums, &ic.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &ic)
	}

	return res, nil
}
