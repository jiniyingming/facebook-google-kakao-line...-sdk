// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// DdgUserFavorite represents a row from 'aypcddg.ddg_user_favorite'.
type DdgUserFavorite struct {
	ID         uint64         `json:"id"`          // id
	UID        int            `json:"uid"`         // uid
	Type       int8           `json:"type"`        // type
	FavoriteID int            `json:"favorite_id"` // favorite_id
	ActivityID int            `json:"activity_id"` // activity_id
	Status     int8           `json:"status"`      // status
	CreatedAt  mysql.NullTime `json:"created_at"`  // created_at
	UpdatedAt  mysql.NullTime `json:"updated_at"`  // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DdgUserFavorite exists in the database.
func (duf *DdgUserFavorite) Exists() bool { //ddg_user_favorite
	return duf._exists
}

// Deleted provides information if the DdgUserFavorite has been deleted from the database.
func (duf *DdgUserFavorite) Deleted() bool {
	return duf._deleted
}

// Get table name
func GetDdgUserFavoriteTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "ddg_user_favorite", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the DdgUserFavorite to the database.
func (duf *DdgUserFavorite) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if duf._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDdgUserFavoriteTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`id, uid, type, favorite_id, activity_id, status, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, duf.ID, duf.UID, duf.Type, duf.FavoriteID, duf.ActivityID, duf.Status, duf.CreatedAt, duf.UpdatedAt)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, duf.ID, duf.UID, duf.Type, duf.FavoriteID, duf.ActivityID, duf.Status, duf.CreatedAt, duf.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, duf.ID, duf.UID, duf.Type, duf.FavoriteID, duf.ActivityID, duf.Status, duf.CreatedAt, duf.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// set existence
	duf._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	duf.ID = uint64(id)
	duf._exists = true

	return nil
}

// Update updates the DdgUserFavorite in the database.
func (duf *DdgUserFavorite) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if duf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDdgUserFavoriteTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`uid = ?, type = ?, favorite_id = ?, activity_id = ?, status = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, duf.UID, duf.Type, duf.FavoriteID, duf.ActivityID, duf.Status, duf.CreatedAt, duf.UpdatedAt, duf.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, duf.UID, duf.Type, duf.FavoriteID, duf.ActivityID, duf.Status, duf.CreatedAt, duf.UpdatedAt, duf.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, duf.UID, duf.Type, duf.FavoriteID, duf.ActivityID, duf.Status, duf.CreatedAt, duf.UpdatedAt, duf.ID)
	}
	return err
}

// Save saves the DdgUserFavorite to the database.
func (duf *DdgUserFavorite) Save(ctx context.Context) error {
	if duf.Exists() {
		return duf.Update(ctx)
	}

	return duf.Insert(ctx)
}

// Delete deletes the DdgUserFavorite from the database.
func (duf *DdgUserFavorite) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if duf._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDdgUserFavoriteTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, duf.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, duf.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, duf.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	duf._deleted = true

	return nil
}

// DdgUserFavoriteByID retrieves a row from 'aypcddg.ddg_user_favorite' as a DdgUserFavorite.
//
// Generated from index 'ddg_user_favorite_id_pkey'.
func DdgUserFavoriteByID(ctx context.Context, id uint64, key ...interface{}) (*DdgUserFavorite, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDdgUserFavoriteTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, type, favorite_id, activity_id, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	duf := DdgUserFavorite{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&duf.ID, &duf.UID, &duf.Type, &duf.FavoriteID, &duf.ActivityID, &duf.Status, &duf.CreatedAt, &duf.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&duf.ID, &duf.UID, &duf.Type, &duf.FavoriteID, &duf.ActivityID, &duf.Status, &duf.CreatedAt, &duf.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &duf, nil
}

// DdgUserFavoritesByUIDTypeStatus retrieves a row from 'aypcddg.ddg_user_favorite' as a DdgUserFavorite.
//
// Generated from index 'user_favorite_uid_type_status_index'.
func DdgUserFavoritesByUIDTypeStatus(ctx context.Context, uid int, typ int8, status int8, key ...interface{}) ([]*DdgUserFavorite, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDdgUserFavoriteTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, type, favorite_id, activity_id, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE uid = ? AND type = ? AND status = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid, typ, status)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, uid, typ, status)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, uid, typ, status)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*DdgUserFavorite, 0)
	for queryData.Next() {
		duf := DdgUserFavorite{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&duf.ID, &duf.UID, &duf.Type, &duf.FavoriteID, &duf.ActivityID, &duf.Status, &duf.CreatedAt, &duf.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &duf)
	}

	return res, nil
}
