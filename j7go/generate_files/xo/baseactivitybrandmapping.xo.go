// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// BaseActivityBrandMapping represents a row from 'aypcddg.base_activity_brand_mapping'.
type BaseActivityBrandMapping struct {
	ID         int           `json:"id"`          // id
	BrandID    sql.NullInt64 `json:"brand_id"`    // brand_id
	GoodsNum   sql.NullInt64 `json:"goods_num"`   // goods_num
	ActivityID sql.NullInt64 `json:"activity_id"` // activity_id
	Created    sql.NullInt64 `json:"created"`     // created
	Updated    sql.NullInt64 `json:"updated"`     // updated
	ShowType   int8          `json:"show_type"`   // show_type

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BaseActivityBrandMapping exists in the database.
func (babm *BaseActivityBrandMapping) Exists() bool { //base_activity_brand_mapping
	return babm._exists
}

// Deleted provides information if the BaseActivityBrandMapping has been deleted from the database.
func (babm *BaseActivityBrandMapping) Deleted() bool {
	return babm._deleted
}

// Get table name
func GetBaseActivityBrandMappingTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "base_activity_brand_mapping", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the BaseActivityBrandMapping to the database.
func (babm *BaseActivityBrandMapping) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if babm._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseActivityBrandMappingTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, goods_num, activity_id, created, updated, show_type` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, babm.BrandID, babm.GoodsNum, babm.ActivityID, babm.Created, babm.Updated, babm.ShowType)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, babm.BrandID, babm.GoodsNum, babm.ActivityID, babm.Created, babm.Updated, babm.ShowType)
	} else {
		res, err = dbConn.Exec(sqlstr, babm.BrandID, babm.GoodsNum, babm.ActivityID, babm.Created, babm.Updated, babm.ShowType)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	babm.ID = int(id)
	babm._exists = true

	return nil
}

// Update updates the BaseActivityBrandMapping in the database.
func (babm *BaseActivityBrandMapping) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if babm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseActivityBrandMappingTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, goods_num = ?, activity_id = ?, created = ?, updated = ?, show_type = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, babm.BrandID, babm.GoodsNum, babm.ActivityID, babm.Created, babm.Updated, babm.ShowType, babm.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, babm.BrandID, babm.GoodsNum, babm.ActivityID, babm.Created, babm.Updated, babm.ShowType, babm.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, babm.BrandID, babm.GoodsNum, babm.ActivityID, babm.Created, babm.Updated, babm.ShowType, babm.ID)
	}
	return err
}

// Save saves the BaseActivityBrandMapping to the database.
func (babm *BaseActivityBrandMapping) Save(ctx context.Context) error {
	if babm.Exists() {
		return babm.Update(ctx)
	}

	return babm.Insert(ctx)
}

// Delete deletes the BaseActivityBrandMapping from the database.
func (babm *BaseActivityBrandMapping) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if babm._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseActivityBrandMappingTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, babm.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, babm.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, babm.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	babm._deleted = true

	return nil
}

// BaseActivityBrandMappingByID retrieves a row from 'aypcddg.base_activity_brand_mapping' as a BaseActivityBrandMapping.
//
// Generated from index 'base_activity_brand_mapping_id_pkey'.
func BaseActivityBrandMappingByID(ctx context.Context, id int, key ...interface{}) (*BaseActivityBrandMapping, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBaseActivityBrandMappingTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, goods_num, activity_id, created, updated, show_type ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	babm := BaseActivityBrandMapping{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&babm.ID, &babm.BrandID, &babm.GoodsNum, &babm.ActivityID, &babm.Created, &babm.Updated, &babm.ShowType)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&babm.ID, &babm.BrandID, &babm.GoodsNum, &babm.ActivityID, &babm.Created, &babm.Updated, &babm.ShowType)
		if err != nil {
			return nil, err
		}
	}

	return &babm, nil
}

// BaseActivityBrandMappingsByActivityID retrieves a row from 'aypcddg.base_activity_brand_mapping' as a BaseActivityBrandMapping.
//
// Generated from index 'idx_activity_id'.
func BaseActivityBrandMappingsByActivityID(ctx context.Context, activityID sql.NullInt64, key ...interface{}) ([]*BaseActivityBrandMapping, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBaseActivityBrandMappingTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, goods_num, activity_id, created, updated, show_type ` +
		`FROM ` + tableName +
		` WHERE activity_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, activityID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, activityID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, activityID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*BaseActivityBrandMapping, 0)
	for queryData.Next() {
		babm := BaseActivityBrandMapping{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&babm.ID, &babm.BrandID, &babm.GoodsNum, &babm.ActivityID, &babm.Created, &babm.Updated, &babm.ShowType)
		if err != nil {
			return nil, err
		}

		res = append(res, &babm)
	}

	return res, nil
}

// BaseActivityBrandMappingsByBrandID retrieves a row from 'aypcddg.base_activity_brand_mapping' as a BaseActivityBrandMapping.
//
// Generated from index 'idx_bid'.
func BaseActivityBrandMappingsByBrandID(ctx context.Context, brandID sql.NullInt64, key ...interface{}) ([]*BaseActivityBrandMapping, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBaseActivityBrandMappingTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, goods_num, activity_id, created, updated, show_type ` +
		`FROM ` + tableName +
		` WHERE brand_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, brandID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, brandID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, brandID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*BaseActivityBrandMapping, 0)
	for queryData.Next() {
		babm := BaseActivityBrandMapping{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&babm.ID, &babm.BrandID, &babm.GoodsNum, &babm.ActivityID, &babm.Created, &babm.Updated, &babm.ShowType)
		if err != nil {
			return nil, err
		}

		res = append(res, &babm)
	}

	return res, nil
}
