// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// SettlementWalletDetailed represents a row from 'ddg_local.settlement_wallet_detailed'.
type SettlementWalletDetailed struct {
	ID                 int64           `json:"id"`                   // id
	AssetID            sql.NullInt64   `json:"asset_id"`             // asset_id
	SettlementWalletID sql.NullInt64   `json:"settlement_wallet_id"` // settlement_wallet_id
	OperationType      sql.NullInt64   `json:"operation_type"`       // operation_type
	ChangeMoney        sql.NullFloat64 `json:"change_money"`         // change_money
	Title              sql.NullString  `json:"title"`                // title
	Content            sql.NullString  `json:"content"`              // content
	CurrentStayMoney   sql.NullFloat64 `json:"current_stay_money"`   // current_stay_money
	AfterStayMoney     sql.NullFloat64 `json:"after_stay_money"`     // after_stay_money
	CreatedAt          mysql.NullTime  `json:"created_at"`           // created_at
	UpdateAt           mysql.NullTime  `json:"update_at"`            // update_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SettlementWalletDetailed exists in the database.
func (swd *SettlementWalletDetailed) Exists() bool { //settlement_wallet_detailed
	return swd._exists
}

// Deleted provides information if the SettlementWalletDetailed has been deleted from the database.
func (swd *SettlementWalletDetailed) Deleted() bool {
	return swd._deleted
}

// Get table name
func GetSettlementWalletDetailedTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "settlement_wallet_detailed", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the SettlementWalletDetailed to the database.
func (swd *SettlementWalletDetailed) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if swd._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSettlementWalletDetailedTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`asset_id, settlement_wallet_id, operation_type, change_money, title, content, current_stay_money, after_stay_money, created_at, update_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, swd.AssetID, swd.SettlementWalletID, swd.OperationType, swd.ChangeMoney, swd.Title, swd.Content, swd.CurrentStayMoney, swd.AfterStayMoney, swd.CreatedAt, swd.UpdateAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, swd.AssetID, swd.SettlementWalletID, swd.OperationType, swd.ChangeMoney, swd.Title, swd.Content, swd.CurrentStayMoney, swd.AfterStayMoney, swd.CreatedAt, swd.UpdateAt)
	} else {
		res, err = dbConn.Exec(sqlstr, swd.AssetID, swd.SettlementWalletID, swd.OperationType, swd.ChangeMoney, swd.Title, swd.Content, swd.CurrentStayMoney, swd.AfterStayMoney, swd.CreatedAt, swd.UpdateAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	swd.ID = int64(id)
	swd._exists = true

	return nil
}

// Update updates the SettlementWalletDetailed in the database.
func (swd *SettlementWalletDetailed) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if swd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSettlementWalletDetailedTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`asset_id = ?, settlement_wallet_id = ?, operation_type = ?, change_money = ?, title = ?, content = ?, current_stay_money = ?, after_stay_money = ?, created_at = ?, update_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, swd.AssetID, swd.SettlementWalletID, swd.OperationType, swd.ChangeMoney, swd.Title, swd.Content, swd.CurrentStayMoney, swd.AfterStayMoney, swd.CreatedAt, swd.UpdateAt, swd.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, swd.AssetID, swd.SettlementWalletID, swd.OperationType, swd.ChangeMoney, swd.Title, swd.Content, swd.CurrentStayMoney, swd.AfterStayMoney, swd.CreatedAt, swd.UpdateAt, swd.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, swd.AssetID, swd.SettlementWalletID, swd.OperationType, swd.ChangeMoney, swd.Title, swd.Content, swd.CurrentStayMoney, swd.AfterStayMoney, swd.CreatedAt, swd.UpdateAt, swd.ID)
	}
	return err
}

// Save saves the SettlementWalletDetailed to the database.
func (swd *SettlementWalletDetailed) Save(ctx context.Context) error {
	if swd.Exists() {
		return swd.Update(ctx)
	}

	return swd.Insert(ctx)
}

// Delete deletes the SettlementWalletDetailed from the database.
func (swd *SettlementWalletDetailed) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if swd._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSettlementWalletDetailedTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, swd.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, swd.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, swd.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	swd._deleted = true

	return nil
}

// SettlementWalletDetailedByID retrieves a row from 'ddg_local.settlement_wallet_detailed' as a SettlementWalletDetailed.
//
// Generated from index 'settlement_wallet_detailed_id_pkey'.
func SettlementWalletDetailedByID(ctx context.Context, id int64, key ...interface{}) (*SettlementWalletDetailed, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSettlementWalletDetailedTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, asset_id, settlement_wallet_id, operation_type, change_money, title, content, current_stay_money, after_stay_money, created_at, update_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	swd := SettlementWalletDetailed{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&swd.ID, &swd.AssetID, &swd.SettlementWalletID, &swd.OperationType, &swd.ChangeMoney, &swd.Title, &swd.Content, &swd.CurrentStayMoney, &swd.AfterStayMoney, &swd.CreatedAt, &swd.UpdateAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&swd.ID, &swd.AssetID, &swd.SettlementWalletID, &swd.OperationType, &swd.ChangeMoney, &swd.Title, &swd.Content, &swd.CurrentStayMoney, &swd.AfterStayMoney, &swd.CreatedAt, &swd.UpdateAt)
		if err != nil {
			return nil, err
		}
	}

	return &swd, nil
}
