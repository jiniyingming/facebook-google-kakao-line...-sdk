// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// FactoryRefundAddress represents a row from 'aypcddg.factory_refund_address'.
type FactoryRefundAddress struct {
	ID          int64          `json:"id"`           // id
	Fid         sql.NullInt64  `json:"fid"`          // fid
	Name        sql.NullString `json:"name"`         // name
	Phone       sql.NullString `json:"phone"`        // phone
	Address     sql.NullString `json:"address"`      // address
	AddressInfo sql.NullString `json:"address_info"` // address_info
	ProvinceID  sql.NullInt64  `json:"province_id"`  // province_id
	CityID      sql.NullInt64  `json:"city_id"`      // city_id
	AreaID      sql.NullInt64  `json:"area_id"`      // area_id
	Status      sql.NullInt64  `json:"status"`       // status
	CreatedAt   mysql.NullTime `json:"created_at"`   // created_at
	UpdatedAt   mysql.NullTime `json:"updated_at"`   // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryRefundAddress exists in the database.
func (fra *FactoryRefundAddress) Exists() bool { //factory_refund_address
	return fra._exists
}

// Deleted provides information if the FactoryRefundAddress has been deleted from the database.
func (fra *FactoryRefundAddress) Deleted() bool {
	return fra._deleted
}

// Get table name
func GetFactoryRefundAddressTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "factory_refund_address", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryRefundAddress to the database.
func (fra *FactoryRefundAddress) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fra._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryRefundAddressTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fid, name, phone, address, address_info, province_id, city_id, area_id, status, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fra.Fid, fra.Name, fra.Phone, fra.Address, fra.AddressInfo, fra.ProvinceID, fra.CityID, fra.AreaID, fra.Status, fra.CreatedAt, fra.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fra.Fid, fra.Name, fra.Phone, fra.Address, fra.AddressInfo, fra.ProvinceID, fra.CityID, fra.AreaID, fra.Status, fra.CreatedAt, fra.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, fra.Fid, fra.Name, fra.Phone, fra.Address, fra.AddressInfo, fra.ProvinceID, fra.CityID, fra.AreaID, fra.Status, fra.CreatedAt, fra.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fra.ID = int64(id)
	fra._exists = true

	return nil
}

// Update updates the FactoryRefundAddress in the database.
func (fra *FactoryRefundAddress) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fra._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryRefundAddressTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fid = ?, name = ?, phone = ?, address = ?, address_info = ?, province_id = ?, city_id = ?, area_id = ?, status = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fra.Fid, fra.Name, fra.Phone, fra.Address, fra.AddressInfo, fra.ProvinceID, fra.CityID, fra.AreaID, fra.Status, fra.CreatedAt, fra.UpdatedAt, fra.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fra.Fid, fra.Name, fra.Phone, fra.Address, fra.AddressInfo, fra.ProvinceID, fra.CityID, fra.AreaID, fra.Status, fra.CreatedAt, fra.UpdatedAt, fra.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fra.Fid, fra.Name, fra.Phone, fra.Address, fra.AddressInfo, fra.ProvinceID, fra.CityID, fra.AreaID, fra.Status, fra.CreatedAt, fra.UpdatedAt, fra.ID)
	}
	return err
}

// Save saves the FactoryRefundAddress to the database.
func (fra *FactoryRefundAddress) Save(ctx context.Context) error {
	if fra.Exists() {
		return fra.Update(ctx)
	}

	return fra.Insert(ctx)
}

// Delete deletes the FactoryRefundAddress from the database.
func (fra *FactoryRefundAddress) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fra._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryRefundAddressTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fra.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fra.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fra.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	fra._deleted = true

	return nil
}

// FactoryRefundAddressesByAreaID retrieves a row from 'aypcddg.factory_refund_address' as a FactoryRefundAddress.
//
// Generated from index 'area_id'.
func FactoryRefundAddressesByAreaID(ctx context.Context, areaID sql.NullInt64, key ...interface{}) ([]*FactoryRefundAddress, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryRefundAddressTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, name, phone, address, address_info, province_id, city_id, area_id, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE area_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, areaID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, areaID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, areaID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactoryRefundAddress, 0)
	for queryData.Next() {
		fra := FactoryRefundAddress{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fra.ID, &fra.Fid, &fra.Name, &fra.Phone, &fra.Address, &fra.AddressInfo, &fra.ProvinceID, &fra.CityID, &fra.AreaID, &fra.Status, &fra.CreatedAt, &fra.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &fra)
	}

	return res, nil
}

// FactoryRefundAddressesByCityID retrieves a row from 'aypcddg.factory_refund_address' as a FactoryRefundAddress.
//
// Generated from index 'city_id'.
func FactoryRefundAddressesByCityID(ctx context.Context, cityID sql.NullInt64, key ...interface{}) ([]*FactoryRefundAddress, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryRefundAddressTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, name, phone, address, address_info, province_id, city_id, area_id, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE city_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cityID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, cityID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, cityID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactoryRefundAddress, 0)
	for queryData.Next() {
		fra := FactoryRefundAddress{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fra.ID, &fra.Fid, &fra.Name, &fra.Phone, &fra.Address, &fra.AddressInfo, &fra.ProvinceID, &fra.CityID, &fra.AreaID, &fra.Status, &fra.CreatedAt, &fra.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &fra)
	}

	return res, nil
}

// FactoryRefundAddressByID retrieves a row from 'aypcddg.factory_refund_address' as a FactoryRefundAddress.
//
// Generated from index 'factory_refund_address_id_pkey'.
func FactoryRefundAddressByID(ctx context.Context, id int64, key ...interface{}) (*FactoryRefundAddress, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryRefundAddressTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, name, phone, address, address_info, province_id, city_id, area_id, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fra := FactoryRefundAddress{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&fra.ID, &fra.Fid, &fra.Name, &fra.Phone, &fra.Address, &fra.AddressInfo, &fra.ProvinceID, &fra.CityID, &fra.AreaID, &fra.Status, &fra.CreatedAt, &fra.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&fra.ID, &fra.Fid, &fra.Name, &fra.Phone, &fra.Address, &fra.AddressInfo, &fra.ProvinceID, &fra.CityID, &fra.AreaID, &fra.Status, &fra.CreatedAt, &fra.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &fra, nil
}

// FactoryRefundAddressesByFid retrieves a row from 'aypcddg.factory_refund_address' as a FactoryRefundAddress.
//
// Generated from index 'fid'.
func FactoryRefundAddressesByFid(ctx context.Context, fid sql.NullInt64, key ...interface{}) ([]*FactoryRefundAddress, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryRefundAddressTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, name, phone, address, address_info, province_id, city_id, area_id, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactoryRefundAddress, 0)
	for queryData.Next() {
		fra := FactoryRefundAddress{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fra.ID, &fra.Fid, &fra.Name, &fra.Phone, &fra.Address, &fra.AddressInfo, &fra.ProvinceID, &fra.CityID, &fra.AreaID, &fra.Status, &fra.CreatedAt, &fra.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &fra)
	}

	return res, nil
}

// FactoryRefundAddressesByProvinceID retrieves a row from 'aypcddg.factory_refund_address' as a FactoryRefundAddress.
//
// Generated from index 'province_id'.
func FactoryRefundAddressesByProvinceID(ctx context.Context, provinceID sql.NullInt64, key ...interface{}) ([]*FactoryRefundAddress, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryRefundAddressTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, name, phone, address, address_info, province_id, city_id, area_id, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE province_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, provinceID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, provinceID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, provinceID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactoryRefundAddress, 0)
	for queryData.Next() {
		fra := FactoryRefundAddress{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fra.ID, &fra.Fid, &fra.Name, &fra.Phone, &fra.Address, &fra.AddressInfo, &fra.ProvinceID, &fra.CityID, &fra.AreaID, &fra.Status, &fra.CreatedAt, &fra.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &fra)
	}

	return res, nil
}
