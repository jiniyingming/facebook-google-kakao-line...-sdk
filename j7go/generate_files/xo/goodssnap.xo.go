// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// GoodsSnap represents a row from 'aypcddg.goods_snap'.
type GoodsSnap struct {
	IndexID                   int             `json:"index_id"`                     // index_id
	TraceUUID                 sql.NullString  `json:"__trace_uuid"`                 // __trace_uuid
	Gid                       uint64          `json:"gid"`                          // gid
	Pid                       sql.NullInt64   `json:"pid"`                          // pid
	Fpid                      sql.NullInt64   `json:"fpid"`                         // fpid
	Fid                       sql.NullInt64   `json:"fid"`                          // fid
	Fgid                      sql.NullInt64   `json:"fgid"`                         // fgid
	Sid                       sql.NullInt64   `json:"sid"`                          // sid
	Fbid                      sql.NullInt64   `json:"fbid"`                         // fbid
	Gcid                      sql.NullInt64   `json:"gcid"`                         // gcid
	GcidFirst                 sql.NullInt64   `json:"gcid_first"`                   // gcid_first
	Fcid                      sql.NullInt64   `json:"fcid"`                         // fcid
	Status                    sql.NullBool    `json:"status"`                       // status
	StatusChangeLastTimestamp sql.NullInt64   `json:"status_change_last_timestamp"` // status_change_last_timestamp
	FactoryOnly               sql.NullBool    `json:"factory_only"`                 // factory_only
	PriceMode                 sql.NullString  `json:"price_mode"`                   // price_mode
	Price                     sql.NullFloat64 `json:"price"`                        // price
	PlanID                    sql.NullInt64   `json:"plan_id"`                      // plan_id
	PlanIDStatus              sql.NullInt64   `json:"plan_id_status"`               // plan_id_status
	PlanNextID                sql.NullInt64   `json:"plan_next_id"`                 // plan_next_id
	PlanNextTime              sql.NullInt64   `json:"plan_next_time"`               // plan_next_time
	PlanNextPrice             sql.NullFloat64 `json:"plan_next_price"`              // plan_next_price
	PlanNextIDStatus          sql.NullInt64   `json:"plan_next_id_status"`          // plan_next_id_status
	PrepayPrice               sql.NullFloat64 `json:"prepay_price"`                 // prepay_price
	CanCod                    sql.NullBool    `json:"can_cod"`                      // can_cod
	HasInvoice                sql.NullBool    `json:"has_invoice"`                  // has_invoice
	Title                     sql.NullString  `json:"title"`                        // title
	Subtitle                  sql.NullString  `json:"subtitle"`                     // subtitle
	Content                   sql.NullString  `json:"content"`                      // content
	Packinfo                  sql.NullString  `json:"packinfo"`                     // packinfo
	Weight                    sql.NullInt64   `json:"weight"`                       // weight
	Volume                    sql.NullFloat64 `json:"volume"`                       // volume
	Sku                       sql.NullString  `json:"sku"`                          // sku
	ProductCode               sql.NullString  `json:"product_code"`                 // product_code
	BarCode                   sql.NullString  `json:"bar_code"`                     // bar_code
	Stock                     sql.NullInt64   `json:"stock"`                        // stock
	Stockday                  sql.NullInt64   `json:"stockday"`                     // stockday
	Unit                      sql.NullString  `json:"unit"`                         // unit
	SoldNum                   sql.NullInt64   `json:"sold_num"`                     // sold_num
	ListPicPath               sql.NullString  `json:"list_pic_path"`                // list_pic_path
	ListPicPicids             sql.NullString  `json:"list_pic_picids"`              // list_pic_picids
	Created                   sql.NullInt64   `json:"created"`                      // created
	Updated                   uint            `json:"updated"`                      // updated
	PlanUpTimestamp           sql.NullInt64   `json:"plan_up_timestamp"`            // plan_up_timestamp
	PlanDownTimestamp         sql.NullInt64   `json:"plan_down_timestamp"`          // plan_down_timestamp
	SeoKeyword                sql.NullString  `json:"seo_keyword"`                  // seo_keyword
	SeoDescription            sql.NullString  `json:"seo_description"`              // seo_description
	Fwid                      sql.NullInt64   `json:"fwid"`                         // fwid
	ShipID                    sql.NullInt64   `json:"ship_id"`                      // ship_id
	IsCheck                   sql.NullInt64   `json:"is_check"`                     // is_check
	ImageMode                 sql.NullString  `json:"image_mode"`                   // image_mode
	MarketPrice               sql.NullFloat64 `json:"market_price"`                 // market_price
	OtherImagePath            sql.NullString  `json:"other_image_path"`             // other_image_path
	BrandTpID                 sql.NullInt64   `json:"brand_tp_id"`                  // brand_tp_id
	PackTpID                  sql.NullInt64   `json:"pack_tp_id"`                   // pack_tp_id
	DelegationTpID            sql.NullInt64   `json:"delegation_tp_id"`             // delegation_tp_id
	ServiceTpID               sql.NullInt64   `json:"service_tp_id"`                // service_tp_id
	ReportTpID                sql.NullInt64   `json:"report_tp_id"`                 // report_tp_id
	RegionID                  sql.NullInt64   `json:"region_id"`                    // region_id
	RegionRgt                 sql.NullInt64   `json:"region_rgt"`                   // region_rgt
	RegionLft                 sql.NullInt64   `json:"region_lft"`                   // region_lft
	CustomContent             sql.NullString  `json:"custom_content"`               // custom_content
	Visited                   sql.NullInt64   `json:"visited"`                      // visited
	GoodsCommentNum           sql.NullInt64   `json:"goods_comment_num"`            // goods_comment_num
	CategoryGlobalPathIds     sql.NullString  `json:"category_global_path_ids"`     // category_global_path_ids
	AttributeValueIds         sql.NullString  `json:"attribute_value_ids"`          // attribute_value_ids
	AttributeGoodTitle        sql.NullString  `json:"attribute_good_title"`         // attribute_good_title
	HelpMap                   sql.NullString  `json:"help_map"`                     // help_map
	BrandID                   sql.NullInt64   `json:"brand_id"`                     // brand_id
	ProfitPrice               sql.NullFloat64 `json:"profit_price"`                 // profit_price
	CommissionPrice           sql.NullFloat64 `json:"commission_price"`             // commission_price
	Code                      sql.NullInt64   `json:"code"`                         // code
	RecomputeProfit           sql.NullInt64   `json:"recompute_profit"`             // recompute_profit
	RecomputeSaleplan         sql.NullInt64   `json:"recompute_saleplan"`           // recompute_saleplan
	SellPrice                 sql.NullFloat64 `json:"sell_price"`                   // sell_price

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GoodsSnap exists in the database.
func (gs *GoodsSnap) Exists() bool { //goods_snap
	return gs._exists
}

// Deleted provides information if the GoodsSnap has been deleted from the database.
func (gs *GoodsSnap) Deleted() bool {
	return gs._deleted
}

// Get table name
func GetGoodsSnapTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "goods_snap", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the GoodsSnap to the database.
func (gs *GoodsSnap) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if gs._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`__trace_uuid, gid, pid, fpid, fid, fgid, sid, fbid, gcid, gcid_first, fcid, status, status_change_last_timestamp, factory_only, price_mode, price, plan_id, plan_id_status, plan_next_id, plan_next_time, plan_next_price, plan_next_id_status, prepay_price, can_cod, has_invoice, title, subtitle, content, packinfo, weight, volume, sku, product_code, bar_code, stock, stockday, unit, sold_num, list_pic_path, list_pic_picids, created, updated, plan_up_timestamp, plan_down_timestamp, seo_keyword, seo_description, fwid, ship_id, is_check, image_mode, market_price, other_image_path, brand_tp_id, pack_tp_id, delegation_tp_id, service_tp_id, report_tp_id, region_id, region_rgt, region_lft, custom_content, visited, goods_comment_num, category_global_path_ids, attribute_value_ids, attribute_good_title, help_map, brand_id, profit_price, commission_price, code, recompute_profit, recompute_saleplan, sell_price` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gs.TraceUUID, gs.Gid, gs.Pid, gs.Fpid, gs.Fid, gs.Fgid, gs.Sid, gs.Fbid, gs.Gcid, gs.GcidFirst, gs.Fcid, gs.Status, gs.StatusChangeLastTimestamp, gs.FactoryOnly, gs.PriceMode, gs.Price, gs.PlanID, gs.PlanIDStatus, gs.PlanNextID, gs.PlanNextTime, gs.PlanNextPrice, gs.PlanNextIDStatus, gs.PrepayPrice, gs.CanCod, gs.HasInvoice, gs.Title, gs.Subtitle, gs.Content, gs.Packinfo, gs.Weight, gs.Volume, gs.Sku, gs.ProductCode, gs.BarCode, gs.Stock, gs.Stockday, gs.Unit, gs.SoldNum, gs.ListPicPath, gs.ListPicPicids, gs.Created, gs.Updated, gs.PlanUpTimestamp, gs.PlanDownTimestamp, gs.SeoKeyword, gs.SeoDescription, gs.Fwid, gs.ShipID, gs.IsCheck, gs.ImageMode, gs.MarketPrice, gs.OtherImagePath, gs.BrandTpID, gs.PackTpID, gs.DelegationTpID, gs.ServiceTpID, gs.ReportTpID, gs.RegionID, gs.RegionRgt, gs.RegionLft, gs.CustomContent, gs.Visited, gs.GoodsCommentNum, gs.CategoryGlobalPathIds, gs.AttributeValueIds, gs.AttributeGoodTitle, gs.HelpMap, gs.BrandID, gs.ProfitPrice, gs.CommissionPrice, gs.Code, gs.RecomputeProfit, gs.RecomputeSaleplan, gs.SellPrice)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, gs.TraceUUID, gs.Gid, gs.Pid, gs.Fpid, gs.Fid, gs.Fgid, gs.Sid, gs.Fbid, gs.Gcid, gs.GcidFirst, gs.Fcid, gs.Status, gs.StatusChangeLastTimestamp, gs.FactoryOnly, gs.PriceMode, gs.Price, gs.PlanID, gs.PlanIDStatus, gs.PlanNextID, gs.PlanNextTime, gs.PlanNextPrice, gs.PlanNextIDStatus, gs.PrepayPrice, gs.CanCod, gs.HasInvoice, gs.Title, gs.Subtitle, gs.Content, gs.Packinfo, gs.Weight, gs.Volume, gs.Sku, gs.ProductCode, gs.BarCode, gs.Stock, gs.Stockday, gs.Unit, gs.SoldNum, gs.ListPicPath, gs.ListPicPicids, gs.Created, gs.Updated, gs.PlanUpTimestamp, gs.PlanDownTimestamp, gs.SeoKeyword, gs.SeoDescription, gs.Fwid, gs.ShipID, gs.IsCheck, gs.ImageMode, gs.MarketPrice, gs.OtherImagePath, gs.BrandTpID, gs.PackTpID, gs.DelegationTpID, gs.ServiceTpID, gs.ReportTpID, gs.RegionID, gs.RegionRgt, gs.RegionLft, gs.CustomContent, gs.Visited, gs.GoodsCommentNum, gs.CategoryGlobalPathIds, gs.AttributeValueIds, gs.AttributeGoodTitle, gs.HelpMap, gs.BrandID, gs.ProfitPrice, gs.CommissionPrice, gs.Code, gs.RecomputeProfit, gs.RecomputeSaleplan, gs.SellPrice)
	} else {
		res, err = dbConn.Exec(sqlstr, gs.TraceUUID, gs.Gid, gs.Pid, gs.Fpid, gs.Fid, gs.Fgid, gs.Sid, gs.Fbid, gs.Gcid, gs.GcidFirst, gs.Fcid, gs.Status, gs.StatusChangeLastTimestamp, gs.FactoryOnly, gs.PriceMode, gs.Price, gs.PlanID, gs.PlanIDStatus, gs.PlanNextID, gs.PlanNextTime, gs.PlanNextPrice, gs.PlanNextIDStatus, gs.PrepayPrice, gs.CanCod, gs.HasInvoice, gs.Title, gs.Subtitle, gs.Content, gs.Packinfo, gs.Weight, gs.Volume, gs.Sku, gs.ProductCode, gs.BarCode, gs.Stock, gs.Stockday, gs.Unit, gs.SoldNum, gs.ListPicPath, gs.ListPicPicids, gs.Created, gs.Updated, gs.PlanUpTimestamp, gs.PlanDownTimestamp, gs.SeoKeyword, gs.SeoDescription, gs.Fwid, gs.ShipID, gs.IsCheck, gs.ImageMode, gs.MarketPrice, gs.OtherImagePath, gs.BrandTpID, gs.PackTpID, gs.DelegationTpID, gs.ServiceTpID, gs.ReportTpID, gs.RegionID, gs.RegionRgt, gs.RegionLft, gs.CustomContent, gs.Visited, gs.GoodsCommentNum, gs.CategoryGlobalPathIds, gs.AttributeValueIds, gs.AttributeGoodTitle, gs.HelpMap, gs.BrandID, gs.ProfitPrice, gs.CommissionPrice, gs.Code, gs.RecomputeProfit, gs.RecomputeSaleplan, gs.SellPrice)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gs.IndexID = int(id)
	gs._exists = true

	return nil
}

// Update updates the GoodsSnap in the database.
func (gs *GoodsSnap) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`__trace_uuid = ?, gid = ?, pid = ?, fpid = ?, fid = ?, fgid = ?, sid = ?, fbid = ?, gcid = ?, gcid_first = ?, fcid = ?, status = ?, status_change_last_timestamp = ?, factory_only = ?, price_mode = ?, price = ?, plan_id = ?, plan_id_status = ?, plan_next_id = ?, plan_next_time = ?, plan_next_price = ?, plan_next_id_status = ?, prepay_price = ?, can_cod = ?, has_invoice = ?, title = ?, subtitle = ?, content = ?, packinfo = ?, weight = ?, volume = ?, sku = ?, product_code = ?, bar_code = ?, stock = ?, stockday = ?, unit = ?, sold_num = ?, list_pic_path = ?, list_pic_picids = ?, created = ?, updated = ?, plan_up_timestamp = ?, plan_down_timestamp = ?, seo_keyword = ?, seo_description = ?, fwid = ?, ship_id = ?, is_check = ?, image_mode = ?, market_price = ?, other_image_path = ?, brand_tp_id = ?, pack_tp_id = ?, delegation_tp_id = ?, service_tp_id = ?, report_tp_id = ?, region_id = ?, region_rgt = ?, region_lft = ?, custom_content = ?, visited = ?, goods_comment_num = ?, category_global_path_ids = ?, attribute_value_ids = ?, attribute_good_title = ?, help_map = ?, brand_id = ?, profit_price = ?, commission_price = ?, code = ?, recompute_profit = ?, recompute_saleplan = ?, sell_price = ?` +
		` WHERE index_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gs.TraceUUID, gs.Gid, gs.Pid, gs.Fpid, gs.Fid, gs.Fgid, gs.Sid, gs.Fbid, gs.Gcid, gs.GcidFirst, gs.Fcid, gs.Status, gs.StatusChangeLastTimestamp, gs.FactoryOnly, gs.PriceMode, gs.Price, gs.PlanID, gs.PlanIDStatus, gs.PlanNextID, gs.PlanNextTime, gs.PlanNextPrice, gs.PlanNextIDStatus, gs.PrepayPrice, gs.CanCod, gs.HasInvoice, gs.Title, gs.Subtitle, gs.Content, gs.Packinfo, gs.Weight, gs.Volume, gs.Sku, gs.ProductCode, gs.BarCode, gs.Stock, gs.Stockday, gs.Unit, gs.SoldNum, gs.ListPicPath, gs.ListPicPicids, gs.Created, gs.Updated, gs.PlanUpTimestamp, gs.PlanDownTimestamp, gs.SeoKeyword, gs.SeoDescription, gs.Fwid, gs.ShipID, gs.IsCheck, gs.ImageMode, gs.MarketPrice, gs.OtherImagePath, gs.BrandTpID, gs.PackTpID, gs.DelegationTpID, gs.ServiceTpID, gs.ReportTpID, gs.RegionID, gs.RegionRgt, gs.RegionLft, gs.CustomContent, gs.Visited, gs.GoodsCommentNum, gs.CategoryGlobalPathIds, gs.AttributeValueIds, gs.AttributeGoodTitle, gs.HelpMap, gs.BrandID, gs.ProfitPrice, gs.CommissionPrice, gs.Code, gs.RecomputeProfit, gs.RecomputeSaleplan, gs.SellPrice, gs.IndexID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gs.TraceUUID, gs.Gid, gs.Pid, gs.Fpid, gs.Fid, gs.Fgid, gs.Sid, gs.Fbid, gs.Gcid, gs.GcidFirst, gs.Fcid, gs.Status, gs.StatusChangeLastTimestamp, gs.FactoryOnly, gs.PriceMode, gs.Price, gs.PlanID, gs.PlanIDStatus, gs.PlanNextID, gs.PlanNextTime, gs.PlanNextPrice, gs.PlanNextIDStatus, gs.PrepayPrice, gs.CanCod, gs.HasInvoice, gs.Title, gs.Subtitle, gs.Content, gs.Packinfo, gs.Weight, gs.Volume, gs.Sku, gs.ProductCode, gs.BarCode, gs.Stock, gs.Stockday, gs.Unit, gs.SoldNum, gs.ListPicPath, gs.ListPicPicids, gs.Created, gs.Updated, gs.PlanUpTimestamp, gs.PlanDownTimestamp, gs.SeoKeyword, gs.SeoDescription, gs.Fwid, gs.ShipID, gs.IsCheck, gs.ImageMode, gs.MarketPrice, gs.OtherImagePath, gs.BrandTpID, gs.PackTpID, gs.DelegationTpID, gs.ServiceTpID, gs.ReportTpID, gs.RegionID, gs.RegionRgt, gs.RegionLft, gs.CustomContent, gs.Visited, gs.GoodsCommentNum, gs.CategoryGlobalPathIds, gs.AttributeValueIds, gs.AttributeGoodTitle, gs.HelpMap, gs.BrandID, gs.ProfitPrice, gs.CommissionPrice, gs.Code, gs.RecomputeProfit, gs.RecomputeSaleplan, gs.SellPrice, gs.IndexID)
	} else {
		_, err = dbConn.Exec(sqlstr, gs.TraceUUID, gs.Gid, gs.Pid, gs.Fpid, gs.Fid, gs.Fgid, gs.Sid, gs.Fbid, gs.Gcid, gs.GcidFirst, gs.Fcid, gs.Status, gs.StatusChangeLastTimestamp, gs.FactoryOnly, gs.PriceMode, gs.Price, gs.PlanID, gs.PlanIDStatus, gs.PlanNextID, gs.PlanNextTime, gs.PlanNextPrice, gs.PlanNextIDStatus, gs.PrepayPrice, gs.CanCod, gs.HasInvoice, gs.Title, gs.Subtitle, gs.Content, gs.Packinfo, gs.Weight, gs.Volume, gs.Sku, gs.ProductCode, gs.BarCode, gs.Stock, gs.Stockday, gs.Unit, gs.SoldNum, gs.ListPicPath, gs.ListPicPicids, gs.Created, gs.Updated, gs.PlanUpTimestamp, gs.PlanDownTimestamp, gs.SeoKeyword, gs.SeoDescription, gs.Fwid, gs.ShipID, gs.IsCheck, gs.ImageMode, gs.MarketPrice, gs.OtherImagePath, gs.BrandTpID, gs.PackTpID, gs.DelegationTpID, gs.ServiceTpID, gs.ReportTpID, gs.RegionID, gs.RegionRgt, gs.RegionLft, gs.CustomContent, gs.Visited, gs.GoodsCommentNum, gs.CategoryGlobalPathIds, gs.AttributeValueIds, gs.AttributeGoodTitle, gs.HelpMap, gs.BrandID, gs.ProfitPrice, gs.CommissionPrice, gs.Code, gs.RecomputeProfit, gs.RecomputeSaleplan, gs.SellPrice, gs.IndexID)
	}
	return err
}

// Save saves the GoodsSnap to the database.
func (gs *GoodsSnap) Save(ctx context.Context) error {
	if gs.Exists() {
		return gs.Update(ctx)
	}

	return gs.Insert(ctx)
}

// Delete deletes the GoodsSnap from the database.
func (gs *GoodsSnap) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gs._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE index_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gs.IndexID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gs.IndexID)
	} else {
		_, err = dbConn.Exec(sqlstr, gs.IndexID)
	}

	if err != nil {
		return err
	}

	// set deleted
	gs._deleted = true

	return nil
}

// GoodsSnapsByCanCod retrieves a row from 'aypcddg.goods_snap' as a GoodsSnap.
//
// Generated from index 'can_cod'.
func GoodsSnapsByCanCod(ctx context.Context, canCod sql.NullBool, key ...interface{}) ([]*GoodsSnap, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`index_id, __trace_uuid, gid, pid, fpid, fid, fgid, sid, fbid, gcid, gcid_first, fcid, status, status_change_last_timestamp, factory_only, price_mode, price, plan_id, plan_id_status, plan_next_id, plan_next_time, plan_next_price, plan_next_id_status, prepay_price, can_cod, has_invoice, title, subtitle, content, packinfo, weight, volume, sku, product_code, bar_code, stock, stockday, unit, sold_num, list_pic_path, list_pic_picids, created, updated, plan_up_timestamp, plan_down_timestamp, seo_keyword, seo_description, fwid, ship_id, is_check, image_mode, market_price, other_image_path, brand_tp_id, pack_tp_id, delegation_tp_id, service_tp_id, report_tp_id, region_id, region_rgt, region_lft, custom_content, visited, goods_comment_num, category_global_path_ids, attribute_value_ids, attribute_good_title, help_map, brand_id, profit_price, commission_price, code, recompute_profit, recompute_saleplan, sell_price ` +
		`FROM ` + tableName +
		` WHERE can_cod = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, canCod)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, canCod)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, canCod)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsSnap, 0)
	for queryData.Next() {
		gs := GoodsSnap{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gs.IndexID, &gs.TraceUUID, &gs.Gid, &gs.Pid, &gs.Fpid, &gs.Fid, &gs.Fgid, &gs.Sid, &gs.Fbid, &gs.Gcid, &gs.GcidFirst, &gs.Fcid, &gs.Status, &gs.StatusChangeLastTimestamp, &gs.FactoryOnly, &gs.PriceMode, &gs.Price, &gs.PlanID, &gs.PlanIDStatus, &gs.PlanNextID, &gs.PlanNextTime, &gs.PlanNextPrice, &gs.PlanNextIDStatus, &gs.PrepayPrice, &gs.CanCod, &gs.HasInvoice, &gs.Title, &gs.Subtitle, &gs.Content, &gs.Packinfo, &gs.Weight, &gs.Volume, &gs.Sku, &gs.ProductCode, &gs.BarCode, &gs.Stock, &gs.Stockday, &gs.Unit, &gs.SoldNum, &gs.ListPicPath, &gs.ListPicPicids, &gs.Created, &gs.Updated, &gs.PlanUpTimestamp, &gs.PlanDownTimestamp, &gs.SeoKeyword, &gs.SeoDescription, &gs.Fwid, &gs.ShipID, &gs.IsCheck, &gs.ImageMode, &gs.MarketPrice, &gs.OtherImagePath, &gs.BrandTpID, &gs.PackTpID, &gs.DelegationTpID, &gs.ServiceTpID, &gs.ReportTpID, &gs.RegionID, &gs.RegionRgt, &gs.RegionLft, &gs.CustomContent, &gs.Visited, &gs.GoodsCommentNum, &gs.CategoryGlobalPathIds, &gs.AttributeValueIds, &gs.AttributeGoodTitle, &gs.HelpMap, &gs.BrandID, &gs.ProfitPrice, &gs.CommissionPrice, &gs.Code, &gs.RecomputeProfit, &gs.RecomputeSaleplan, &gs.SellPrice)
		if err != nil {
			return nil, err
		}

		res = append(res, &gs)
	}

	return res, nil
}

// GoodsSnapsByPlanDownTimestamp retrieves a row from 'aypcddg.goods_snap' as a GoodsSnap.
//
// Generated from index 'down_stock'.
func GoodsSnapsByPlanDownTimestamp(ctx context.Context, planDownTimestamp sql.NullInt64, key ...interface{}) ([]*GoodsSnap, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`index_id, __trace_uuid, gid, pid, fpid, fid, fgid, sid, fbid, gcid, gcid_first, fcid, status, status_change_last_timestamp, factory_only, price_mode, price, plan_id, plan_id_status, plan_next_id, plan_next_time, plan_next_price, plan_next_id_status, prepay_price, can_cod, has_invoice, title, subtitle, content, packinfo, weight, volume, sku, product_code, bar_code, stock, stockday, unit, sold_num, list_pic_path, list_pic_picids, created, updated, plan_up_timestamp, plan_down_timestamp, seo_keyword, seo_description, fwid, ship_id, is_check, image_mode, market_price, other_image_path, brand_tp_id, pack_tp_id, delegation_tp_id, service_tp_id, report_tp_id, region_id, region_rgt, region_lft, custom_content, visited, goods_comment_num, category_global_path_ids, attribute_value_ids, attribute_good_title, help_map, brand_id, profit_price, commission_price, code, recompute_profit, recompute_saleplan, sell_price ` +
		`FROM ` + tableName +
		` WHERE plan_down_timestamp = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, planDownTimestamp)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, planDownTimestamp)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, planDownTimestamp)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsSnap, 0)
	for queryData.Next() {
		gs := GoodsSnap{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gs.IndexID, &gs.TraceUUID, &gs.Gid, &gs.Pid, &gs.Fpid, &gs.Fid, &gs.Fgid, &gs.Sid, &gs.Fbid, &gs.Gcid, &gs.GcidFirst, &gs.Fcid, &gs.Status, &gs.StatusChangeLastTimestamp, &gs.FactoryOnly, &gs.PriceMode, &gs.Price, &gs.PlanID, &gs.PlanIDStatus, &gs.PlanNextID, &gs.PlanNextTime, &gs.PlanNextPrice, &gs.PlanNextIDStatus, &gs.PrepayPrice, &gs.CanCod, &gs.HasInvoice, &gs.Title, &gs.Subtitle, &gs.Content, &gs.Packinfo, &gs.Weight, &gs.Volume, &gs.Sku, &gs.ProductCode, &gs.BarCode, &gs.Stock, &gs.Stockday, &gs.Unit, &gs.SoldNum, &gs.ListPicPath, &gs.ListPicPicids, &gs.Created, &gs.Updated, &gs.PlanUpTimestamp, &gs.PlanDownTimestamp, &gs.SeoKeyword, &gs.SeoDescription, &gs.Fwid, &gs.ShipID, &gs.IsCheck, &gs.ImageMode, &gs.MarketPrice, &gs.OtherImagePath, &gs.BrandTpID, &gs.PackTpID, &gs.DelegationTpID, &gs.ServiceTpID, &gs.ReportTpID, &gs.RegionID, &gs.RegionRgt, &gs.RegionLft, &gs.CustomContent, &gs.Visited, &gs.GoodsCommentNum, &gs.CategoryGlobalPathIds, &gs.AttributeValueIds, &gs.AttributeGoodTitle, &gs.HelpMap, &gs.BrandID, &gs.ProfitPrice, &gs.CommissionPrice, &gs.Code, &gs.RecomputeProfit, &gs.RecomputeSaleplan, &gs.SellPrice)
		if err != nil {
			return nil, err
		}

		res = append(res, &gs)
	}

	return res, nil
}

// GoodsSnapsByFcid retrieves a row from 'aypcddg.goods_snap' as a GoodsSnap.
//
// Generated from index 'fcid'.
func GoodsSnapsByFcid(ctx context.Context, fcid sql.NullInt64, key ...interface{}) ([]*GoodsSnap, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`index_id, __trace_uuid, gid, pid, fpid, fid, fgid, sid, fbid, gcid, gcid_first, fcid, status, status_change_last_timestamp, factory_only, price_mode, price, plan_id, plan_id_status, plan_next_id, plan_next_time, plan_next_price, plan_next_id_status, prepay_price, can_cod, has_invoice, title, subtitle, content, packinfo, weight, volume, sku, product_code, bar_code, stock, stockday, unit, sold_num, list_pic_path, list_pic_picids, created, updated, plan_up_timestamp, plan_down_timestamp, seo_keyword, seo_description, fwid, ship_id, is_check, image_mode, market_price, other_image_path, brand_tp_id, pack_tp_id, delegation_tp_id, service_tp_id, report_tp_id, region_id, region_rgt, region_lft, custom_content, visited, goods_comment_num, category_global_path_ids, attribute_value_ids, attribute_good_title, help_map, brand_id, profit_price, commission_price, code, recompute_profit, recompute_saleplan, sell_price ` +
		`FROM ` + tableName +
		` WHERE fcid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fcid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fcid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fcid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsSnap, 0)
	for queryData.Next() {
		gs := GoodsSnap{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gs.IndexID, &gs.TraceUUID, &gs.Gid, &gs.Pid, &gs.Fpid, &gs.Fid, &gs.Fgid, &gs.Sid, &gs.Fbid, &gs.Gcid, &gs.GcidFirst, &gs.Fcid, &gs.Status, &gs.StatusChangeLastTimestamp, &gs.FactoryOnly, &gs.PriceMode, &gs.Price, &gs.PlanID, &gs.PlanIDStatus, &gs.PlanNextID, &gs.PlanNextTime, &gs.PlanNextPrice, &gs.PlanNextIDStatus, &gs.PrepayPrice, &gs.CanCod, &gs.HasInvoice, &gs.Title, &gs.Subtitle, &gs.Content, &gs.Packinfo, &gs.Weight, &gs.Volume, &gs.Sku, &gs.ProductCode, &gs.BarCode, &gs.Stock, &gs.Stockday, &gs.Unit, &gs.SoldNum, &gs.ListPicPath, &gs.ListPicPicids, &gs.Created, &gs.Updated, &gs.PlanUpTimestamp, &gs.PlanDownTimestamp, &gs.SeoKeyword, &gs.SeoDescription, &gs.Fwid, &gs.ShipID, &gs.IsCheck, &gs.ImageMode, &gs.MarketPrice, &gs.OtherImagePath, &gs.BrandTpID, &gs.PackTpID, &gs.DelegationTpID, &gs.ServiceTpID, &gs.ReportTpID, &gs.RegionID, &gs.RegionRgt, &gs.RegionLft, &gs.CustomContent, &gs.Visited, &gs.GoodsCommentNum, &gs.CategoryGlobalPathIds, &gs.AttributeValueIds, &gs.AttributeGoodTitle, &gs.HelpMap, &gs.BrandID, &gs.ProfitPrice, &gs.CommissionPrice, &gs.Code, &gs.RecomputeProfit, &gs.RecomputeSaleplan, &gs.SellPrice)
		if err != nil {
			return nil, err
		}

		res = append(res, &gs)
	}

	return res, nil
}

// GoodsSnapsByFgid retrieves a row from 'aypcddg.goods_snap' as a GoodsSnap.
//
// Generated from index 'fgid'.
func GoodsSnapsByFgid(ctx context.Context, fgid sql.NullInt64, key ...interface{}) ([]*GoodsSnap, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`index_id, __trace_uuid, gid, pid, fpid, fid, fgid, sid, fbid, gcid, gcid_first, fcid, status, status_change_last_timestamp, factory_only, price_mode, price, plan_id, plan_id_status, plan_next_id, plan_next_time, plan_next_price, plan_next_id_status, prepay_price, can_cod, has_invoice, title, subtitle, content, packinfo, weight, volume, sku, product_code, bar_code, stock, stockday, unit, sold_num, list_pic_path, list_pic_picids, created, updated, plan_up_timestamp, plan_down_timestamp, seo_keyword, seo_description, fwid, ship_id, is_check, image_mode, market_price, other_image_path, brand_tp_id, pack_tp_id, delegation_tp_id, service_tp_id, report_tp_id, region_id, region_rgt, region_lft, custom_content, visited, goods_comment_num, category_global_path_ids, attribute_value_ids, attribute_good_title, help_map, brand_id, profit_price, commission_price, code, recompute_profit, recompute_saleplan, sell_price ` +
		`FROM ` + tableName +
		` WHERE fgid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fgid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fgid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fgid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsSnap, 0)
	for queryData.Next() {
		gs := GoodsSnap{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gs.IndexID, &gs.TraceUUID, &gs.Gid, &gs.Pid, &gs.Fpid, &gs.Fid, &gs.Fgid, &gs.Sid, &gs.Fbid, &gs.Gcid, &gs.GcidFirst, &gs.Fcid, &gs.Status, &gs.StatusChangeLastTimestamp, &gs.FactoryOnly, &gs.PriceMode, &gs.Price, &gs.PlanID, &gs.PlanIDStatus, &gs.PlanNextID, &gs.PlanNextTime, &gs.PlanNextPrice, &gs.PlanNextIDStatus, &gs.PrepayPrice, &gs.CanCod, &gs.HasInvoice, &gs.Title, &gs.Subtitle, &gs.Content, &gs.Packinfo, &gs.Weight, &gs.Volume, &gs.Sku, &gs.ProductCode, &gs.BarCode, &gs.Stock, &gs.Stockday, &gs.Unit, &gs.SoldNum, &gs.ListPicPath, &gs.ListPicPicids, &gs.Created, &gs.Updated, &gs.PlanUpTimestamp, &gs.PlanDownTimestamp, &gs.SeoKeyword, &gs.SeoDescription, &gs.Fwid, &gs.ShipID, &gs.IsCheck, &gs.ImageMode, &gs.MarketPrice, &gs.OtherImagePath, &gs.BrandTpID, &gs.PackTpID, &gs.DelegationTpID, &gs.ServiceTpID, &gs.ReportTpID, &gs.RegionID, &gs.RegionRgt, &gs.RegionLft, &gs.CustomContent, &gs.Visited, &gs.GoodsCommentNum, &gs.CategoryGlobalPathIds, &gs.AttributeValueIds, &gs.AttributeGoodTitle, &gs.HelpMap, &gs.BrandID, &gs.ProfitPrice, &gs.CommissionPrice, &gs.Code, &gs.RecomputeProfit, &gs.RecomputeSaleplan, &gs.SellPrice)
		if err != nil {
			return nil, err
		}

		res = append(res, &gs)
	}

	return res, nil
}

// GoodsSnapsByFid retrieves a row from 'aypcddg.goods_snap' as a GoodsSnap.
//
// Generated from index 'fid'.
func GoodsSnapsByFid(ctx context.Context, fid sql.NullInt64, key ...interface{}) ([]*GoodsSnap, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`index_id, __trace_uuid, gid, pid, fpid, fid, fgid, sid, fbid, gcid, gcid_first, fcid, status, status_change_last_timestamp, factory_only, price_mode, price, plan_id, plan_id_status, plan_next_id, plan_next_time, plan_next_price, plan_next_id_status, prepay_price, can_cod, has_invoice, title, subtitle, content, packinfo, weight, volume, sku, product_code, bar_code, stock, stockday, unit, sold_num, list_pic_path, list_pic_picids, created, updated, plan_up_timestamp, plan_down_timestamp, seo_keyword, seo_description, fwid, ship_id, is_check, image_mode, market_price, other_image_path, brand_tp_id, pack_tp_id, delegation_tp_id, service_tp_id, report_tp_id, region_id, region_rgt, region_lft, custom_content, visited, goods_comment_num, category_global_path_ids, attribute_value_ids, attribute_good_title, help_map, brand_id, profit_price, commission_price, code, recompute_profit, recompute_saleplan, sell_price ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsSnap, 0)
	for queryData.Next() {
		gs := GoodsSnap{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gs.IndexID, &gs.TraceUUID, &gs.Gid, &gs.Pid, &gs.Fpid, &gs.Fid, &gs.Fgid, &gs.Sid, &gs.Fbid, &gs.Gcid, &gs.GcidFirst, &gs.Fcid, &gs.Status, &gs.StatusChangeLastTimestamp, &gs.FactoryOnly, &gs.PriceMode, &gs.Price, &gs.PlanID, &gs.PlanIDStatus, &gs.PlanNextID, &gs.PlanNextTime, &gs.PlanNextPrice, &gs.PlanNextIDStatus, &gs.PrepayPrice, &gs.CanCod, &gs.HasInvoice, &gs.Title, &gs.Subtitle, &gs.Content, &gs.Packinfo, &gs.Weight, &gs.Volume, &gs.Sku, &gs.ProductCode, &gs.BarCode, &gs.Stock, &gs.Stockday, &gs.Unit, &gs.SoldNum, &gs.ListPicPath, &gs.ListPicPicids, &gs.Created, &gs.Updated, &gs.PlanUpTimestamp, &gs.PlanDownTimestamp, &gs.SeoKeyword, &gs.SeoDescription, &gs.Fwid, &gs.ShipID, &gs.IsCheck, &gs.ImageMode, &gs.MarketPrice, &gs.OtherImagePath, &gs.BrandTpID, &gs.PackTpID, &gs.DelegationTpID, &gs.ServiceTpID, &gs.ReportTpID, &gs.RegionID, &gs.RegionRgt, &gs.RegionLft, &gs.CustomContent, &gs.Visited, &gs.GoodsCommentNum, &gs.CategoryGlobalPathIds, &gs.AttributeValueIds, &gs.AttributeGoodTitle, &gs.HelpMap, &gs.BrandID, &gs.ProfitPrice, &gs.CommissionPrice, &gs.Code, &gs.RecomputeProfit, &gs.RecomputeSaleplan, &gs.SellPrice)
		if err != nil {
			return nil, err
		}

		res = append(res, &gs)
	}

	return res, nil
}

// GoodsSnapsBySid retrieves a row from 'aypcddg.goods_snap' as a GoodsSnap.
//
// Generated from index 'fsid'.
func GoodsSnapsBySid(ctx context.Context, sid sql.NullInt64, key ...interface{}) ([]*GoodsSnap, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`index_id, __trace_uuid, gid, pid, fpid, fid, fgid, sid, fbid, gcid, gcid_first, fcid, status, status_change_last_timestamp, factory_only, price_mode, price, plan_id, plan_id_status, plan_next_id, plan_next_time, plan_next_price, plan_next_id_status, prepay_price, can_cod, has_invoice, title, subtitle, content, packinfo, weight, volume, sku, product_code, bar_code, stock, stockday, unit, sold_num, list_pic_path, list_pic_picids, created, updated, plan_up_timestamp, plan_down_timestamp, seo_keyword, seo_description, fwid, ship_id, is_check, image_mode, market_price, other_image_path, brand_tp_id, pack_tp_id, delegation_tp_id, service_tp_id, report_tp_id, region_id, region_rgt, region_lft, custom_content, visited, goods_comment_num, category_global_path_ids, attribute_value_ids, attribute_good_title, help_map, brand_id, profit_price, commission_price, code, recompute_profit, recompute_saleplan, sell_price ` +
		`FROM ` + tableName +
		` WHERE sid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, sid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, sid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsSnap, 0)
	for queryData.Next() {
		gs := GoodsSnap{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gs.IndexID, &gs.TraceUUID, &gs.Gid, &gs.Pid, &gs.Fpid, &gs.Fid, &gs.Fgid, &gs.Sid, &gs.Fbid, &gs.Gcid, &gs.GcidFirst, &gs.Fcid, &gs.Status, &gs.StatusChangeLastTimestamp, &gs.FactoryOnly, &gs.PriceMode, &gs.Price, &gs.PlanID, &gs.PlanIDStatus, &gs.PlanNextID, &gs.PlanNextTime, &gs.PlanNextPrice, &gs.PlanNextIDStatus, &gs.PrepayPrice, &gs.CanCod, &gs.HasInvoice, &gs.Title, &gs.Subtitle, &gs.Content, &gs.Packinfo, &gs.Weight, &gs.Volume, &gs.Sku, &gs.ProductCode, &gs.BarCode, &gs.Stock, &gs.Stockday, &gs.Unit, &gs.SoldNum, &gs.ListPicPath, &gs.ListPicPicids, &gs.Created, &gs.Updated, &gs.PlanUpTimestamp, &gs.PlanDownTimestamp, &gs.SeoKeyword, &gs.SeoDescription, &gs.Fwid, &gs.ShipID, &gs.IsCheck, &gs.ImageMode, &gs.MarketPrice, &gs.OtherImagePath, &gs.BrandTpID, &gs.PackTpID, &gs.DelegationTpID, &gs.ServiceTpID, &gs.ReportTpID, &gs.RegionID, &gs.RegionRgt, &gs.RegionLft, &gs.CustomContent, &gs.Visited, &gs.GoodsCommentNum, &gs.CategoryGlobalPathIds, &gs.AttributeValueIds, &gs.AttributeGoodTitle, &gs.HelpMap, &gs.BrandID, &gs.ProfitPrice, &gs.CommissionPrice, &gs.Code, &gs.RecomputeProfit, &gs.RecomputeSaleplan, &gs.SellPrice)
		if err != nil {
			return nil, err
		}

		res = append(res, &gs)
	}

	return res, nil
}

// GoodsSnapsByGcid retrieves a row from 'aypcddg.goods_snap' as a GoodsSnap.
//
// Generated from index 'gcid'.
func GoodsSnapsByGcid(ctx context.Context, gcid sql.NullInt64, key ...interface{}) ([]*GoodsSnap, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`index_id, __trace_uuid, gid, pid, fpid, fid, fgid, sid, fbid, gcid, gcid_first, fcid, status, status_change_last_timestamp, factory_only, price_mode, price, plan_id, plan_id_status, plan_next_id, plan_next_time, plan_next_price, plan_next_id_status, prepay_price, can_cod, has_invoice, title, subtitle, content, packinfo, weight, volume, sku, product_code, bar_code, stock, stockday, unit, sold_num, list_pic_path, list_pic_picids, created, updated, plan_up_timestamp, plan_down_timestamp, seo_keyword, seo_description, fwid, ship_id, is_check, image_mode, market_price, other_image_path, brand_tp_id, pack_tp_id, delegation_tp_id, service_tp_id, report_tp_id, region_id, region_rgt, region_lft, custom_content, visited, goods_comment_num, category_global_path_ids, attribute_value_ids, attribute_good_title, help_map, brand_id, profit_price, commission_price, code, recompute_profit, recompute_saleplan, sell_price ` +
		`FROM ` + tableName +
		` WHERE gcid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gcid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, gcid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, gcid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsSnap, 0)
	for queryData.Next() {
		gs := GoodsSnap{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gs.IndexID, &gs.TraceUUID, &gs.Gid, &gs.Pid, &gs.Fpid, &gs.Fid, &gs.Fgid, &gs.Sid, &gs.Fbid, &gs.Gcid, &gs.GcidFirst, &gs.Fcid, &gs.Status, &gs.StatusChangeLastTimestamp, &gs.FactoryOnly, &gs.PriceMode, &gs.Price, &gs.PlanID, &gs.PlanIDStatus, &gs.PlanNextID, &gs.PlanNextTime, &gs.PlanNextPrice, &gs.PlanNextIDStatus, &gs.PrepayPrice, &gs.CanCod, &gs.HasInvoice, &gs.Title, &gs.Subtitle, &gs.Content, &gs.Packinfo, &gs.Weight, &gs.Volume, &gs.Sku, &gs.ProductCode, &gs.BarCode, &gs.Stock, &gs.Stockday, &gs.Unit, &gs.SoldNum, &gs.ListPicPath, &gs.ListPicPicids, &gs.Created, &gs.Updated, &gs.PlanUpTimestamp, &gs.PlanDownTimestamp, &gs.SeoKeyword, &gs.SeoDescription, &gs.Fwid, &gs.ShipID, &gs.IsCheck, &gs.ImageMode, &gs.MarketPrice, &gs.OtherImagePath, &gs.BrandTpID, &gs.PackTpID, &gs.DelegationTpID, &gs.ServiceTpID, &gs.ReportTpID, &gs.RegionID, &gs.RegionRgt, &gs.RegionLft, &gs.CustomContent, &gs.Visited, &gs.GoodsCommentNum, &gs.CategoryGlobalPathIds, &gs.AttributeValueIds, &gs.AttributeGoodTitle, &gs.HelpMap, &gs.BrandID, &gs.ProfitPrice, &gs.CommissionPrice, &gs.Code, &gs.RecomputeProfit, &gs.RecomputeSaleplan, &gs.SellPrice)
		if err != nil {
			return nil, err
		}

		res = append(res, &gs)
	}

	return res, nil
}

// GoodsSnapsByGcidFirst retrieves a row from 'aypcddg.goods_snap' as a GoodsSnap.
//
// Generated from index 'gcid_first'.
func GoodsSnapsByGcidFirst(ctx context.Context, gcidFirst sql.NullInt64, key ...interface{}) ([]*GoodsSnap, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`index_id, __trace_uuid, gid, pid, fpid, fid, fgid, sid, fbid, gcid, gcid_first, fcid, status, status_change_last_timestamp, factory_only, price_mode, price, plan_id, plan_id_status, plan_next_id, plan_next_time, plan_next_price, plan_next_id_status, prepay_price, can_cod, has_invoice, title, subtitle, content, packinfo, weight, volume, sku, product_code, bar_code, stock, stockday, unit, sold_num, list_pic_path, list_pic_picids, created, updated, plan_up_timestamp, plan_down_timestamp, seo_keyword, seo_description, fwid, ship_id, is_check, image_mode, market_price, other_image_path, brand_tp_id, pack_tp_id, delegation_tp_id, service_tp_id, report_tp_id, region_id, region_rgt, region_lft, custom_content, visited, goods_comment_num, category_global_path_ids, attribute_value_ids, attribute_good_title, help_map, brand_id, profit_price, commission_price, code, recompute_profit, recompute_saleplan, sell_price ` +
		`FROM ` + tableName +
		` WHERE gcid_first = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gcidFirst)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, gcidFirst)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, gcidFirst)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsSnap, 0)
	for queryData.Next() {
		gs := GoodsSnap{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gs.IndexID, &gs.TraceUUID, &gs.Gid, &gs.Pid, &gs.Fpid, &gs.Fid, &gs.Fgid, &gs.Sid, &gs.Fbid, &gs.Gcid, &gs.GcidFirst, &gs.Fcid, &gs.Status, &gs.StatusChangeLastTimestamp, &gs.FactoryOnly, &gs.PriceMode, &gs.Price, &gs.PlanID, &gs.PlanIDStatus, &gs.PlanNextID, &gs.PlanNextTime, &gs.PlanNextPrice, &gs.PlanNextIDStatus, &gs.PrepayPrice, &gs.CanCod, &gs.HasInvoice, &gs.Title, &gs.Subtitle, &gs.Content, &gs.Packinfo, &gs.Weight, &gs.Volume, &gs.Sku, &gs.ProductCode, &gs.BarCode, &gs.Stock, &gs.Stockday, &gs.Unit, &gs.SoldNum, &gs.ListPicPath, &gs.ListPicPicids, &gs.Created, &gs.Updated, &gs.PlanUpTimestamp, &gs.PlanDownTimestamp, &gs.SeoKeyword, &gs.SeoDescription, &gs.Fwid, &gs.ShipID, &gs.IsCheck, &gs.ImageMode, &gs.MarketPrice, &gs.OtherImagePath, &gs.BrandTpID, &gs.PackTpID, &gs.DelegationTpID, &gs.ServiceTpID, &gs.ReportTpID, &gs.RegionID, &gs.RegionRgt, &gs.RegionLft, &gs.CustomContent, &gs.Visited, &gs.GoodsCommentNum, &gs.CategoryGlobalPathIds, &gs.AttributeValueIds, &gs.AttributeGoodTitle, &gs.HelpMap, &gs.BrandID, &gs.ProfitPrice, &gs.CommissionPrice, &gs.Code, &gs.RecomputeProfit, &gs.RecomputeSaleplan, &gs.SellPrice)
		if err != nil {
			return nil, err
		}

		res = append(res, &gs)
	}

	return res, nil
}

// GoodsSnapsByGid retrieves a row from 'aypcddg.goods_snap' as a GoodsSnap.
//
// Generated from index 'gid'.
func GoodsSnapsByGid(ctx context.Context, gid uint64, key ...interface{}) ([]*GoodsSnap, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`index_id, __trace_uuid, gid, pid, fpid, fid, fgid, sid, fbid, gcid, gcid_first, fcid, status, status_change_last_timestamp, factory_only, price_mode, price, plan_id, plan_id_status, plan_next_id, plan_next_time, plan_next_price, plan_next_id_status, prepay_price, can_cod, has_invoice, title, subtitle, content, packinfo, weight, volume, sku, product_code, bar_code, stock, stockday, unit, sold_num, list_pic_path, list_pic_picids, created, updated, plan_up_timestamp, plan_down_timestamp, seo_keyword, seo_description, fwid, ship_id, is_check, image_mode, market_price, other_image_path, brand_tp_id, pack_tp_id, delegation_tp_id, service_tp_id, report_tp_id, region_id, region_rgt, region_lft, custom_content, visited, goods_comment_num, category_global_path_ids, attribute_value_ids, attribute_good_title, help_map, brand_id, profit_price, commission_price, code, recompute_profit, recompute_saleplan, sell_price ` +
		`FROM ` + tableName +
		` WHERE gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, gid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, gid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsSnap, 0)
	for queryData.Next() {
		gs := GoodsSnap{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gs.IndexID, &gs.TraceUUID, &gs.Gid, &gs.Pid, &gs.Fpid, &gs.Fid, &gs.Fgid, &gs.Sid, &gs.Fbid, &gs.Gcid, &gs.GcidFirst, &gs.Fcid, &gs.Status, &gs.StatusChangeLastTimestamp, &gs.FactoryOnly, &gs.PriceMode, &gs.Price, &gs.PlanID, &gs.PlanIDStatus, &gs.PlanNextID, &gs.PlanNextTime, &gs.PlanNextPrice, &gs.PlanNextIDStatus, &gs.PrepayPrice, &gs.CanCod, &gs.HasInvoice, &gs.Title, &gs.Subtitle, &gs.Content, &gs.Packinfo, &gs.Weight, &gs.Volume, &gs.Sku, &gs.ProductCode, &gs.BarCode, &gs.Stock, &gs.Stockday, &gs.Unit, &gs.SoldNum, &gs.ListPicPath, &gs.ListPicPicids, &gs.Created, &gs.Updated, &gs.PlanUpTimestamp, &gs.PlanDownTimestamp, &gs.SeoKeyword, &gs.SeoDescription, &gs.Fwid, &gs.ShipID, &gs.IsCheck, &gs.ImageMode, &gs.MarketPrice, &gs.OtherImagePath, &gs.BrandTpID, &gs.PackTpID, &gs.DelegationTpID, &gs.ServiceTpID, &gs.ReportTpID, &gs.RegionID, &gs.RegionRgt, &gs.RegionLft, &gs.CustomContent, &gs.Visited, &gs.GoodsCommentNum, &gs.CategoryGlobalPathIds, &gs.AttributeValueIds, &gs.AttributeGoodTitle, &gs.HelpMap, &gs.BrandID, &gs.ProfitPrice, &gs.CommissionPrice, &gs.Code, &gs.RecomputeProfit, &gs.RecomputeSaleplan, &gs.SellPrice)
		if err != nil {
			return nil, err
		}

		res = append(res, &gs)
	}

	return res, nil
}

// GoodsSnapByIndexID retrieves a row from 'aypcddg.goods_snap' as a GoodsSnap.
//
// Generated from index 'goods_snap_index_id_pkey'.
func GoodsSnapByIndexID(ctx context.Context, indexID int, key ...interface{}) (*GoodsSnap, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`index_id, __trace_uuid, gid, pid, fpid, fid, fgid, sid, fbid, gcid, gcid_first, fcid, status, status_change_last_timestamp, factory_only, price_mode, price, plan_id, plan_id_status, plan_next_id, plan_next_time, plan_next_price, plan_next_id_status, prepay_price, can_cod, has_invoice, title, subtitle, content, packinfo, weight, volume, sku, product_code, bar_code, stock, stockday, unit, sold_num, list_pic_path, list_pic_picids, created, updated, plan_up_timestamp, plan_down_timestamp, seo_keyword, seo_description, fwid, ship_id, is_check, image_mode, market_price, other_image_path, brand_tp_id, pack_tp_id, delegation_tp_id, service_tp_id, report_tp_id, region_id, region_rgt, region_lft, custom_content, visited, goods_comment_num, category_global_path_ids, attribute_value_ids, attribute_good_title, help_map, brand_id, profit_price, commission_price, code, recompute_profit, recompute_saleplan, sell_price ` +
		`FROM ` + tableName +
		` WHERE index_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, indexID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	gs := GoodsSnap{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, indexID).Scan(&gs.IndexID, &gs.TraceUUID, &gs.Gid, &gs.Pid, &gs.Fpid, &gs.Fid, &gs.Fgid, &gs.Sid, &gs.Fbid, &gs.Gcid, &gs.GcidFirst, &gs.Fcid, &gs.Status, &gs.StatusChangeLastTimestamp, &gs.FactoryOnly, &gs.PriceMode, &gs.Price, &gs.PlanID, &gs.PlanIDStatus, &gs.PlanNextID, &gs.PlanNextTime, &gs.PlanNextPrice, &gs.PlanNextIDStatus, &gs.PrepayPrice, &gs.CanCod, &gs.HasInvoice, &gs.Title, &gs.Subtitle, &gs.Content, &gs.Packinfo, &gs.Weight, &gs.Volume, &gs.Sku, &gs.ProductCode, &gs.BarCode, &gs.Stock, &gs.Stockday, &gs.Unit, &gs.SoldNum, &gs.ListPicPath, &gs.ListPicPicids, &gs.Created, &gs.Updated, &gs.PlanUpTimestamp, &gs.PlanDownTimestamp, &gs.SeoKeyword, &gs.SeoDescription, &gs.Fwid, &gs.ShipID, &gs.IsCheck, &gs.ImageMode, &gs.MarketPrice, &gs.OtherImagePath, &gs.BrandTpID, &gs.PackTpID, &gs.DelegationTpID, &gs.ServiceTpID, &gs.ReportTpID, &gs.RegionID, &gs.RegionRgt, &gs.RegionLft, &gs.CustomContent, &gs.Visited, &gs.GoodsCommentNum, &gs.CategoryGlobalPathIds, &gs.AttributeValueIds, &gs.AttributeGoodTitle, &gs.HelpMap, &gs.BrandID, &gs.ProfitPrice, &gs.CommissionPrice, &gs.Code, &gs.RecomputeProfit, &gs.RecomputeSaleplan, &gs.SellPrice)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, indexID).Scan(&gs.IndexID, &gs.TraceUUID, &gs.Gid, &gs.Pid, &gs.Fpid, &gs.Fid, &gs.Fgid, &gs.Sid, &gs.Fbid, &gs.Gcid, &gs.GcidFirst, &gs.Fcid, &gs.Status, &gs.StatusChangeLastTimestamp, &gs.FactoryOnly, &gs.PriceMode, &gs.Price, &gs.PlanID, &gs.PlanIDStatus, &gs.PlanNextID, &gs.PlanNextTime, &gs.PlanNextPrice, &gs.PlanNextIDStatus, &gs.PrepayPrice, &gs.CanCod, &gs.HasInvoice, &gs.Title, &gs.Subtitle, &gs.Content, &gs.Packinfo, &gs.Weight, &gs.Volume, &gs.Sku, &gs.ProductCode, &gs.BarCode, &gs.Stock, &gs.Stockday, &gs.Unit, &gs.SoldNum, &gs.ListPicPath, &gs.ListPicPicids, &gs.Created, &gs.Updated, &gs.PlanUpTimestamp, &gs.PlanDownTimestamp, &gs.SeoKeyword, &gs.SeoDescription, &gs.Fwid, &gs.ShipID, &gs.IsCheck, &gs.ImageMode, &gs.MarketPrice, &gs.OtherImagePath, &gs.BrandTpID, &gs.PackTpID, &gs.DelegationTpID, &gs.ServiceTpID, &gs.ReportTpID, &gs.RegionID, &gs.RegionRgt, &gs.RegionLft, &gs.CustomContent, &gs.Visited, &gs.GoodsCommentNum, &gs.CategoryGlobalPathIds, &gs.AttributeValueIds, &gs.AttributeGoodTitle, &gs.HelpMap, &gs.BrandID, &gs.ProfitPrice, &gs.CommissionPrice, &gs.Code, &gs.RecomputeProfit, &gs.RecomputeSaleplan, &gs.SellPrice)
		if err != nil {
			return nil, err
		}
	}

	return &gs, nil
}

// GoodsSnapsByPlanUpTimestamp retrieves a row from 'aypcddg.goods_snap' as a GoodsSnap.
//
// Generated from index 'up_stock'.
func GoodsSnapsByPlanUpTimestamp(ctx context.Context, planUpTimestamp sql.NullInt64, key ...interface{}) ([]*GoodsSnap, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsSnapTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`index_id, __trace_uuid, gid, pid, fpid, fid, fgid, sid, fbid, gcid, gcid_first, fcid, status, status_change_last_timestamp, factory_only, price_mode, price, plan_id, plan_id_status, plan_next_id, plan_next_time, plan_next_price, plan_next_id_status, prepay_price, can_cod, has_invoice, title, subtitle, content, packinfo, weight, volume, sku, product_code, bar_code, stock, stockday, unit, sold_num, list_pic_path, list_pic_picids, created, updated, plan_up_timestamp, plan_down_timestamp, seo_keyword, seo_description, fwid, ship_id, is_check, image_mode, market_price, other_image_path, brand_tp_id, pack_tp_id, delegation_tp_id, service_tp_id, report_tp_id, region_id, region_rgt, region_lft, custom_content, visited, goods_comment_num, category_global_path_ids, attribute_value_ids, attribute_good_title, help_map, brand_id, profit_price, commission_price, code, recompute_profit, recompute_saleplan, sell_price ` +
		`FROM ` + tableName +
		` WHERE plan_up_timestamp = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, planUpTimestamp)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, planUpTimestamp)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, planUpTimestamp)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsSnap, 0)
	for queryData.Next() {
		gs := GoodsSnap{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gs.IndexID, &gs.TraceUUID, &gs.Gid, &gs.Pid, &gs.Fpid, &gs.Fid, &gs.Fgid, &gs.Sid, &gs.Fbid, &gs.Gcid, &gs.GcidFirst, &gs.Fcid, &gs.Status, &gs.StatusChangeLastTimestamp, &gs.FactoryOnly, &gs.PriceMode, &gs.Price, &gs.PlanID, &gs.PlanIDStatus, &gs.PlanNextID, &gs.PlanNextTime, &gs.PlanNextPrice, &gs.PlanNextIDStatus, &gs.PrepayPrice, &gs.CanCod, &gs.HasInvoice, &gs.Title, &gs.Subtitle, &gs.Content, &gs.Packinfo, &gs.Weight, &gs.Volume, &gs.Sku, &gs.ProductCode, &gs.BarCode, &gs.Stock, &gs.Stockday, &gs.Unit, &gs.SoldNum, &gs.ListPicPath, &gs.ListPicPicids, &gs.Created, &gs.Updated, &gs.PlanUpTimestamp, &gs.PlanDownTimestamp, &gs.SeoKeyword, &gs.SeoDescription, &gs.Fwid, &gs.ShipID, &gs.IsCheck, &gs.ImageMode, &gs.MarketPrice, &gs.OtherImagePath, &gs.BrandTpID, &gs.PackTpID, &gs.DelegationTpID, &gs.ServiceTpID, &gs.ReportTpID, &gs.RegionID, &gs.RegionRgt, &gs.RegionLft, &gs.CustomContent, &gs.Visited, &gs.GoodsCommentNum, &gs.CategoryGlobalPathIds, &gs.AttributeValueIds, &gs.AttributeGoodTitle, &gs.HelpMap, &gs.BrandID, &gs.ProfitPrice, &gs.CommissionPrice, &gs.Code, &gs.RecomputeProfit, &gs.RecomputeSaleplan, &gs.SellPrice)
		if err != nil {
			return nil, err
		}

		res = append(res, &gs)
	}

	return res, nil
}
