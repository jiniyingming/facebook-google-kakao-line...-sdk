// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// TmpTable represents a row from 'ddg_local.tmp_table'.
type TmpTable struct {
	ID int `json:"id"` // id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TmpTable exists in the database.
func (tt *TmpTable) Exists() bool { //tmp_table
	return tt._exists
}

// Deleted provides information if the TmpTable has been deleted from the database.
func (tt *TmpTable) Deleted() bool {
	return tt._deleted
}

// Get table name
func GetTmpTableTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "tmp_table", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the TmpTable to the database.
func (tt *TmpTable) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if tt._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTmpTableTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`id` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, tt.ID)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, tt.ID)
	} else {
		res, err = dbConn.Exec(sqlstr, tt.ID)
	}

	if err != nil {
		return err
	}

	// set existence
	tt._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	tt.ID = int(id)
	tt._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the TmpTable from the database.
func (tt *TmpTable) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if tt._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTmpTableTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, tt.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, tt.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, tt.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	tt._deleted = true

	return nil
}

// TmpTableByID retrieves a row from 'ddg_local.tmp_table' as a TmpTable.
//
// Generated from index 'tmp_table_id_pkey'.
func TmpTableByID(ctx context.Context, id int, key ...interface{}) (*TmpTable, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetTmpTableTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	tt := TmpTable{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&tt.ID)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&tt.ID)
		if err != nil {
			return nil, err
		}
	}

	return &tt, nil
}
