// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// LevelOperationLog represents a row from 'ddg_local.level_operation_log'.
type LevelOperationLog struct {
	ID            int64          `json:"id"`             // id
	AdminID       sql.NullInt64  `json:"admin_id"`       // admin_id
	AdminName     sql.NullString `json:"admin_name"`     // admin_name
	CreatedAt     mysql.NullTime `json:"created_at"`     // created_at
	UpdateAt      mysql.NullTime `json:"update_at"`      // update_at
	Title         sql.NullString `json:"title"`          // title
	Content       sql.NullString `json:"content"`        // content
	OriginContent sql.NullString `json:"origin_content"` // origin_content

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LevelOperationLog exists in the database.
func (lol *LevelOperationLog) Exists() bool { //level_operation_log
	return lol._exists
}

// Deleted provides information if the LevelOperationLog has been deleted from the database.
func (lol *LevelOperationLog) Deleted() bool {
	return lol._deleted
}

// Get table name
func GetLevelOperationLogTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "level_operation_log", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the LevelOperationLog to the database.
func (lol *LevelOperationLog) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if lol._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetLevelOperationLogTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`admin_id, admin_name, created_at, update_at, title, content, origin_content` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, lol.AdminID, lol.AdminName, lol.CreatedAt, lol.UpdateAt, lol.Title, lol.Content, lol.OriginContent)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, lol.AdminID, lol.AdminName, lol.CreatedAt, lol.UpdateAt, lol.Title, lol.Content, lol.OriginContent)
	} else {
		res, err = dbConn.Exec(sqlstr, lol.AdminID, lol.AdminName, lol.CreatedAt, lol.UpdateAt, lol.Title, lol.Content, lol.OriginContent)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	lol.ID = int64(id)
	lol._exists = true

	return nil
}

// Update updates the LevelOperationLog in the database.
func (lol *LevelOperationLog) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if lol._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetLevelOperationLogTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`admin_id = ?, admin_name = ?, created_at = ?, update_at = ?, title = ?, content = ?, origin_content = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, lol.AdminID, lol.AdminName, lol.CreatedAt, lol.UpdateAt, lol.Title, lol.Content, lol.OriginContent, lol.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, lol.AdminID, lol.AdminName, lol.CreatedAt, lol.UpdateAt, lol.Title, lol.Content, lol.OriginContent, lol.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, lol.AdminID, lol.AdminName, lol.CreatedAt, lol.UpdateAt, lol.Title, lol.Content, lol.OriginContent, lol.ID)
	}
	return err
}

// Save saves the LevelOperationLog to the database.
func (lol *LevelOperationLog) Save(ctx context.Context) error {
	if lol.Exists() {
		return lol.Update(ctx)
	}

	return lol.Insert(ctx)
}

// Delete deletes the LevelOperationLog from the database.
func (lol *LevelOperationLog) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if lol._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetLevelOperationLogTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, lol.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, lol.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, lol.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	lol._deleted = true

	return nil
}

// LevelOperationLogByID retrieves a row from 'ddg_local.level_operation_log' as a LevelOperationLog.
//
// Generated from index 'level_operation_log_id_pkey'.
func LevelOperationLogByID(ctx context.Context, id int64, key ...interface{}) (*LevelOperationLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetLevelOperationLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, admin_id, admin_name, created_at, update_at, title, content, origin_content ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	lol := LevelOperationLog{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&lol.ID, &lol.AdminID, &lol.AdminName, &lol.CreatedAt, &lol.UpdateAt, &lol.Title, &lol.Content, &lol.OriginContent)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&lol.ID, &lol.AdminID, &lol.AdminName, &lol.CreatedAt, &lol.UpdateAt, &lol.Title, &lol.Content, &lol.OriginContent)
		if err != nil {
			return nil, err
		}
	}

	return &lol, nil
}
