// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// FactoryBankAccount represents a row from 'ddg_local.factory_bank_account'.
type FactoryBankAccount struct {
	ID            int64          `json:"id"`             // id
	Fid           sql.NullInt64  `json:"fid"`            // fid
	AccountName   sql.NullString `json:"account_name"`   // account_name
	AccountNo     sql.NullString `json:"account_no"`     // account_no
	BankName      sql.NullString `json:"bank_name"`      // bank_name
	CreatedAt     mysql.NullTime `json:"created_at"`     // created_at
	UpdateAt      mysql.NullTime `json:"update_at"`      // update_at
	DefaultStatus sql.NullInt64  `json:"default_status"` // default_status
	DeleteStatus  sql.NullInt64  `json:"delete_status"`  // delete_status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryBankAccount exists in the database.
func (fba *FactoryBankAccount) Exists() bool { //factory_bank_account
	return fba._exists
}

// Deleted provides information if the FactoryBankAccount has been deleted from the database.
func (fba *FactoryBankAccount) Deleted() bool {
	return fba._deleted
}

// Get table name
func GetFactoryBankAccountTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "factory_bank_account", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryBankAccount to the database.
func (fba *FactoryBankAccount) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fba._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryBankAccountTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`id, fid, account_name, account_no, bank_name, created_at, update_at, default_status, delete_status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fba.ID, fba.Fid, fba.AccountName, fba.AccountNo, fba.BankName, fba.CreatedAt, fba.UpdateAt, fba.DefaultStatus, fba.DeleteStatus)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, fba.ID, fba.Fid, fba.AccountName, fba.AccountNo, fba.BankName, fba.CreatedAt, fba.UpdateAt, fba.DefaultStatus, fba.DeleteStatus)
	} else {
		res, err = dbConn.Exec(sqlstr, fba.ID, fba.Fid, fba.AccountName, fba.AccountNo, fba.BankName, fba.CreatedAt, fba.UpdateAt, fba.DefaultStatus, fba.DeleteStatus)
	}

	if err != nil {
		return err
	}

	// set existence
	fba._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fba.ID = int64(id)
	fba._exists = true

	return nil
}

// Update updates the FactoryBankAccount in the database.
func (fba *FactoryBankAccount) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fba._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryBankAccountTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fid = ?, account_name = ?, account_no = ?, bank_name = ?, created_at = ?, update_at = ?, default_status = ?, delete_status = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fba.Fid, fba.AccountName, fba.AccountNo, fba.BankName, fba.CreatedAt, fba.UpdateAt, fba.DefaultStatus, fba.DeleteStatus, fba.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fba.Fid, fba.AccountName, fba.AccountNo, fba.BankName, fba.CreatedAt, fba.UpdateAt, fba.DefaultStatus, fba.DeleteStatus, fba.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fba.Fid, fba.AccountName, fba.AccountNo, fba.BankName, fba.CreatedAt, fba.UpdateAt, fba.DefaultStatus, fba.DeleteStatus, fba.ID)
	}
	return err
}

// Save saves the FactoryBankAccount to the database.
func (fba *FactoryBankAccount) Save(ctx context.Context) error {
	if fba.Exists() {
		return fba.Update(ctx)
	}

	return fba.Insert(ctx)
}

// Delete deletes the FactoryBankAccount from the database.
func (fba *FactoryBankAccount) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fba._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryBankAccountTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fba.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fba.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fba.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	fba._deleted = true

	return nil
}

// FactoryBankAccountByID retrieves a row from 'ddg_local.factory_bank_account' as a FactoryBankAccount.
//
// Generated from index 'factory_bank_account_id_pkey'.
func FactoryBankAccountByID(ctx context.Context, id int64, key ...interface{}) (*FactoryBankAccount, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryBankAccountTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, account_name, account_no, bank_name, created_at, update_at, default_status, delete_status ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fba := FactoryBankAccount{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&fba.ID, &fba.Fid, &fba.AccountName, &fba.AccountNo, &fba.BankName, &fba.CreatedAt, &fba.UpdateAt, &fba.DefaultStatus, &fba.DeleteStatus)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&fba.ID, &fba.Fid, &fba.AccountName, &fba.AccountNo, &fba.BankName, &fba.CreatedAt, &fba.UpdateAt, &fba.DefaultStatus, &fba.DeleteStatus)
		if err != nil {
			return nil, err
		}
	}

	return &fba, nil
}
