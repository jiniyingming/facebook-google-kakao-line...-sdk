// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// Adv2Placement represents a row from 'aypcddg.adv2_placement'.
type Adv2Placement struct {
	ID                 int            `json:"id"`                   // id
	Sid                sql.NullInt64  `json:"sid"`                  // sid
	Title              sql.NullString `json:"title"`                // title
	Present            sql.NullString `json:"present"`              // present
	Desc               sql.NullString `json:"desc"`                 // desc
	Status             sql.NullInt64  `json:"status"`               // status
	OpenStatus         sql.NullInt64  `json:"open_status"`          // open_status
	BrandID            sql.NullString `json:"brand_id"`             // brand_id
	ActivateScheduleID sql.NullInt64  `json:"activate_schedule_id"` // activate_schedule_id
	Type               sql.NullInt64  `json:"type"`                 // type
	ActivityType       sql.NullString `json:"activity_type"`        // activity_type
	CategoryID         sql.NullString `json:"category_id"`          // category_id
	Numbers            sql.NullInt64  `json:"numbers"`              // numbers
	Created            sql.NullInt64  `json:"created"`              // created
	Updated            sql.NullInt64  `json:"updated"`              // updated
	ChannelPage        sql.NullString `json:"channel_page"`         // channel_page
	ShowTitle          sql.NullString `json:"show_title"`           // show_title
	Remark             sql.NullString `json:"remark"`               // remark
	ImgSize            sql.NullString `json:"img_size"`             // img_size
	HasTitle           sql.NullInt64  `json:"has_title"`            // has_title
	ReferencePicture   sql.NullString `json:"reference_picture"`    // reference_picture
	Min                sql.NullInt64  `json:"min"`                  // min
	Max                sql.NullInt64  `json:"max"`                  // max

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Adv2Placement exists in the database.
func (a *Adv2Placement) Exists() bool { //adv2_placement
	return a._exists
}

// Deleted provides information if the Adv2Placement has been deleted from the database.
func (a *Adv2Placement) Deleted() bool {
	return a._deleted
}

// Get table name
func GetAdv2PlacementTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "adv2_placement", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Adv2Placement to the database.
func (a *Adv2Placement) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdv2PlacementTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`sid, title, present, desc, status, open_status, brand_id, activate_schedule_id, type, activity_type, category_id, numbers, created, updated, channel_page, show_title, remark, img_size, has_title, reference_picture, min, max` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.Sid, a.Title, a.Present, a.Desc, a.Status, a.OpenStatus, a.BrandID, a.ActivateScheduleID, a.Type, a.ActivityType, a.CategoryID, a.Numbers, a.Created, a.Updated, a.ChannelPage, a.ShowTitle, a.Remark, a.ImgSize, a.HasTitle, a.ReferencePicture, a.Min, a.Max)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, a.Sid, a.Title, a.Present, a.Desc, a.Status, a.OpenStatus, a.BrandID, a.ActivateScheduleID, a.Type, a.ActivityType, a.CategoryID, a.Numbers, a.Created, a.Updated, a.ChannelPage, a.ShowTitle, a.Remark, a.ImgSize, a.HasTitle, a.ReferencePicture, a.Min, a.Max)
	} else {
		res, err = dbConn.Exec(sqlstr, a.Sid, a.Title, a.Present, a.Desc, a.Status, a.OpenStatus, a.BrandID, a.ActivateScheduleID, a.Type, a.ActivityType, a.CategoryID, a.Numbers, a.Created, a.Updated, a.ChannelPage, a.ShowTitle, a.Remark, a.ImgSize, a.HasTitle, a.ReferencePicture, a.Min, a.Max)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.ID = int(id)
	a._exists = true

	return nil
}

// Update updates the Adv2Placement in the database.
func (a *Adv2Placement) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdv2PlacementTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`sid = ?, title = ?, present = ?, desc = ?, status = ?, open_status = ?, brand_id = ?, activate_schedule_id = ?, type = ?, activity_type = ?, category_id = ?, numbers = ?, created = ?, updated = ?, channel_page = ?, show_title = ?, remark = ?, img_size = ?, has_title = ?, reference_picture = ?, min = ?, max = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.Sid, a.Title, a.Present, a.Desc, a.Status, a.OpenStatus, a.BrandID, a.ActivateScheduleID, a.Type, a.ActivityType, a.CategoryID, a.Numbers, a.Created, a.Updated, a.ChannelPage, a.ShowTitle, a.Remark, a.ImgSize, a.HasTitle, a.ReferencePicture, a.Min, a.Max, a.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, a.Sid, a.Title, a.Present, a.Desc, a.Status, a.OpenStatus, a.BrandID, a.ActivateScheduleID, a.Type, a.ActivityType, a.CategoryID, a.Numbers, a.Created, a.Updated, a.ChannelPage, a.ShowTitle, a.Remark, a.ImgSize, a.HasTitle, a.ReferencePicture, a.Min, a.Max, a.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, a.Sid, a.Title, a.Present, a.Desc, a.Status, a.OpenStatus, a.BrandID, a.ActivateScheduleID, a.Type, a.ActivityType, a.CategoryID, a.Numbers, a.Created, a.Updated, a.ChannelPage, a.ShowTitle, a.Remark, a.ImgSize, a.HasTitle, a.ReferencePicture, a.Min, a.Max, a.ID)
	}
	return err
}

// Save saves the Adv2Placement to the database.
func (a *Adv2Placement) Save(ctx context.Context) error {
	if a.Exists() {
		return a.Update(ctx)
	}

	return a.Insert(ctx)
}

// Delete deletes the Adv2Placement from the database.
func (a *Adv2Placement) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if a._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdv2PlacementTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, a.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, a.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// Adv2PlacementByID retrieves a row from 'aypcddg.adv2_placement' as a Adv2Placement.
//
// Generated from index 'adv2_placement_id_pkey'.
func Adv2PlacementByID(ctx context.Context, id int, key ...interface{}) (*Adv2Placement, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAdv2PlacementTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, sid, title, present, desc, status, open_status, brand_id, activate_schedule_id, type, activity_type, category_id, numbers, created, updated, channel_page, show_title, remark, img_size, has_title, reference_picture, min, max ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	a := Adv2Placement{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&a.ID, &a.Sid, &a.Title, &a.Present, &a.Desc, &a.Status, &a.OpenStatus, &a.BrandID, &a.ActivateScheduleID, &a.Type, &a.ActivityType, &a.CategoryID, &a.Numbers, &a.Created, &a.Updated, &a.ChannelPage, &a.ShowTitle, &a.Remark, &a.ImgSize, &a.HasTitle, &a.ReferencePicture, &a.Min, &a.Max)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&a.ID, &a.Sid, &a.Title, &a.Present, &a.Desc, &a.Status, &a.OpenStatus, &a.BrandID, &a.ActivateScheduleID, &a.Type, &a.ActivityType, &a.CategoryID, &a.Numbers, &a.Created, &a.Updated, &a.ChannelPage, &a.ShowTitle, &a.Remark, &a.ImgSize, &a.HasTitle, &a.ReferencePicture, &a.Min, &a.Max)
		if err != nil {
			return nil, err
		}
	}

	return &a, nil
}

// Adv2PlacementsByStatus retrieves a row from 'aypcddg.adv2_placement' as a Adv2Placement.
//
// Generated from index 'status'.
func Adv2PlacementsByStatus(ctx context.Context, status sql.NullInt64, key ...interface{}) ([]*Adv2Placement, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAdv2PlacementTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, sid, title, present, desc, status, open_status, brand_id, activate_schedule_id, type, activity_type, category_id, numbers, created, updated, channel_page, show_title, remark, img_size, has_title, reference_picture, min, max ` +
		`FROM ` + tableName +
		` WHERE status = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, status)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, status)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, status)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*Adv2Placement, 0)
	for queryData.Next() {
		a := Adv2Placement{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&a.ID, &a.Sid, &a.Title, &a.Present, &a.Desc, &a.Status, &a.OpenStatus, &a.BrandID, &a.ActivateScheduleID, &a.Type, &a.ActivityType, &a.CategoryID, &a.Numbers, &a.Created, &a.Updated, &a.ChannelPage, &a.ShowTitle, &a.Remark, &a.ImgSize, &a.HasTitle, &a.ReferencePicture, &a.Min, &a.Max)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}
