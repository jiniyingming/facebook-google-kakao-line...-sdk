// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// PlatformWalletDetailed represents a row from 'ddg_local.platform_wallet_detailed'.
type PlatformWalletDetailed struct {
	ID                  int64           `json:"id"`                    // id
	PlatformWalletID    sql.NullInt64   `json:"platform_wallet_id"`    // platform_wallet_id
	OperationType       sql.NullInt64   `json:"operation_type"`        // operation_type
	ChangeMoney         sql.NullFloat64 `json:"change_money"`          // change_money
	Title               sql.NullString  `json:"title"`                 // title
	Content             sql.NullString  `json:"content"`               // content
	CurrentObtainMoney  sql.NullFloat64 `json:"current_obtain_money"`  // current_obtain_money
	CurrentConsumeMoney sql.NullFloat64 `json:"current_consume_money"` // current_consume_money
	AfterObtainMoney    sql.NullFloat64 `json:"after_obtain_money"`    // after_obtain_money
	AfterConsumeMoney   sql.NullFloat64 `json:"after_consume_money"`   // after_consume_money
	CreatedAt           mysql.NullTime  `json:"created_at"`            // created_at
	UpdateAt            mysql.NullTime  `json:"update_at"`             // update_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PlatformWalletDetailed exists in the database.
func (pwd *PlatformWalletDetailed) Exists() bool { //platform_wallet_detailed
	return pwd._exists
}

// Deleted provides information if the PlatformWalletDetailed has been deleted from the database.
func (pwd *PlatformWalletDetailed) Deleted() bool {
	return pwd._deleted
}

// Get table name
func GetPlatformWalletDetailedTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "platform_wallet_detailed", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the PlatformWalletDetailed to the database.
func (pwd *PlatformWalletDetailed) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if pwd._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPlatformWalletDetailedTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`platform_wallet_id, operation_type, change_money, title, content, current_obtain_money, current_consume_money, after_obtain_money, after_consume_money, created_at, update_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pwd.PlatformWalletID, pwd.OperationType, pwd.ChangeMoney, pwd.Title, pwd.Content, pwd.CurrentObtainMoney, pwd.CurrentConsumeMoney, pwd.AfterObtainMoney, pwd.AfterConsumeMoney, pwd.CreatedAt, pwd.UpdateAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, pwd.PlatformWalletID, pwd.OperationType, pwd.ChangeMoney, pwd.Title, pwd.Content, pwd.CurrentObtainMoney, pwd.CurrentConsumeMoney, pwd.AfterObtainMoney, pwd.AfterConsumeMoney, pwd.CreatedAt, pwd.UpdateAt)
	} else {
		res, err = dbConn.Exec(sqlstr, pwd.PlatformWalletID, pwd.OperationType, pwd.ChangeMoney, pwd.Title, pwd.Content, pwd.CurrentObtainMoney, pwd.CurrentConsumeMoney, pwd.AfterObtainMoney, pwd.AfterConsumeMoney, pwd.CreatedAt, pwd.UpdateAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pwd.ID = int64(id)
	pwd._exists = true

	return nil
}

// Update updates the PlatformWalletDetailed in the database.
func (pwd *PlatformWalletDetailed) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pwd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPlatformWalletDetailedTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`platform_wallet_id = ?, operation_type = ?, change_money = ?, title = ?, content = ?, current_obtain_money = ?, current_consume_money = ?, after_obtain_money = ?, after_consume_money = ?, created_at = ?, update_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pwd.PlatformWalletID, pwd.OperationType, pwd.ChangeMoney, pwd.Title, pwd.Content, pwd.CurrentObtainMoney, pwd.CurrentConsumeMoney, pwd.AfterObtainMoney, pwd.AfterConsumeMoney, pwd.CreatedAt, pwd.UpdateAt, pwd.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pwd.PlatformWalletID, pwd.OperationType, pwd.ChangeMoney, pwd.Title, pwd.Content, pwd.CurrentObtainMoney, pwd.CurrentConsumeMoney, pwd.AfterObtainMoney, pwd.AfterConsumeMoney, pwd.CreatedAt, pwd.UpdateAt, pwd.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pwd.PlatformWalletID, pwd.OperationType, pwd.ChangeMoney, pwd.Title, pwd.Content, pwd.CurrentObtainMoney, pwd.CurrentConsumeMoney, pwd.AfterObtainMoney, pwd.AfterConsumeMoney, pwd.CreatedAt, pwd.UpdateAt, pwd.ID)
	}
	return err
}

// Save saves the PlatformWalletDetailed to the database.
func (pwd *PlatformWalletDetailed) Save(ctx context.Context) error {
	if pwd.Exists() {
		return pwd.Update(ctx)
	}

	return pwd.Insert(ctx)
}

// Delete deletes the PlatformWalletDetailed from the database.
func (pwd *PlatformWalletDetailed) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pwd._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPlatformWalletDetailedTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pwd.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pwd.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pwd.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	pwd._deleted = true

	return nil
}

// PlatformWalletDetailedByID retrieves a row from 'ddg_local.platform_wallet_detailed' as a PlatformWalletDetailed.
//
// Generated from index 'platform_wallet_detailed_id_pkey'.
func PlatformWalletDetailedByID(ctx context.Context, id int64, key ...interface{}) (*PlatformWalletDetailed, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetPlatformWalletDetailedTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, platform_wallet_id, operation_type, change_money, title, content, current_obtain_money, current_consume_money, after_obtain_money, after_consume_money, created_at, update_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	pwd := PlatformWalletDetailed{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&pwd.ID, &pwd.PlatformWalletID, &pwd.OperationType, &pwd.ChangeMoney, &pwd.Title, &pwd.Content, &pwd.CurrentObtainMoney, &pwd.CurrentConsumeMoney, &pwd.AfterObtainMoney, &pwd.AfterConsumeMoney, &pwd.CreatedAt, &pwd.UpdateAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&pwd.ID, &pwd.PlatformWalletID, &pwd.OperationType, &pwd.ChangeMoney, &pwd.Title, &pwd.Content, &pwd.CurrentObtainMoney, &pwd.CurrentConsumeMoney, &pwd.AfterObtainMoney, &pwd.AfterConsumeMoney, &pwd.CreatedAt, &pwd.UpdateAt)
		if err != nil {
			return nil, err
		}
	}

	return &pwd, nil
}
