// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// RefundAuditInfo represents a row from 'aypcddg.refund_audit_info'.
type RefundAuditInfo struct {
	ID                int64          `json:"id"`                  // id
	RefundID          sql.NullInt64  `json:"refund_id"`           // refund_id
	AuditType         sql.NullInt64  `json:"audit_type"`          // audit_type
	SecondAuditType   sql.NullInt64  `json:"second_audit_type"`   // second_audit_type
	AdminID           sql.NullInt64  `json:"admin_id"`            // admin_id
	AdminName         sql.NullString `json:"admin_name"`          // admin_name
	SecondAdminID     sql.NullInt64  `json:"second_admin_id"`     // second_admin_id
	SecondAdminName   sql.NullString `json:"second_admin_name"`   // second_admin_name
	AuditRemark       sql.NullString `json:"audit_remark"`        // audit_remark
	SecondAuditRemark sql.NullString `json:"second_audit_remark"` // second_audit_remark
	AuditAt           mysql.NullTime `json:"audit_at"`            // audit_at
	SecondAuditAt     mysql.NullTime `json:"second_audit_at"`     // second_audit_at
	CreatedAt         mysql.NullTime `json:"created_at"`          // created_at
	UpdatedAt         mysql.NullTime `json:"updated_at"`          // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RefundAuditInfo exists in the database.
func (rai *RefundAuditInfo) Exists() bool { //refund_audit_info
	return rai._exists
}

// Deleted provides information if the RefundAuditInfo has been deleted from the database.
func (rai *RefundAuditInfo) Deleted() bool {
	return rai._deleted
}

// Get table name
func GetRefundAuditInfoTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "refund_audit_info", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the RefundAuditInfo to the database.
func (rai *RefundAuditInfo) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if rai._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRefundAuditInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`refund_id, audit_type, second_audit_type, admin_id, admin_name, second_admin_id, second_admin_name, audit_remark, second_audit_remark, audit_at, second_audit_at, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rai.RefundID, rai.AuditType, rai.SecondAuditType, rai.AdminID, rai.AdminName, rai.SecondAdminID, rai.SecondAdminName, rai.AuditRemark, rai.SecondAuditRemark, rai.AuditAt, rai.SecondAuditAt, rai.CreatedAt, rai.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, rai.RefundID, rai.AuditType, rai.SecondAuditType, rai.AdminID, rai.AdminName, rai.SecondAdminID, rai.SecondAdminName, rai.AuditRemark, rai.SecondAuditRemark, rai.AuditAt, rai.SecondAuditAt, rai.CreatedAt, rai.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, rai.RefundID, rai.AuditType, rai.SecondAuditType, rai.AdminID, rai.AdminName, rai.SecondAdminID, rai.SecondAdminName, rai.AuditRemark, rai.SecondAuditRemark, rai.AuditAt, rai.SecondAuditAt, rai.CreatedAt, rai.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	rai.ID = int64(id)
	rai._exists = true

	return nil
}

// Update updates the RefundAuditInfo in the database.
func (rai *RefundAuditInfo) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if rai._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRefundAuditInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`refund_id = ?, audit_type = ?, second_audit_type = ?, admin_id = ?, admin_name = ?, second_admin_id = ?, second_admin_name = ?, audit_remark = ?, second_audit_remark = ?, audit_at = ?, second_audit_at = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rai.RefundID, rai.AuditType, rai.SecondAuditType, rai.AdminID, rai.AdminName, rai.SecondAdminID, rai.SecondAdminName, rai.AuditRemark, rai.SecondAuditRemark, rai.AuditAt, rai.SecondAuditAt, rai.CreatedAt, rai.UpdatedAt, rai.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, rai.RefundID, rai.AuditType, rai.SecondAuditType, rai.AdminID, rai.AdminName, rai.SecondAdminID, rai.SecondAdminName, rai.AuditRemark, rai.SecondAuditRemark, rai.AuditAt, rai.SecondAuditAt, rai.CreatedAt, rai.UpdatedAt, rai.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, rai.RefundID, rai.AuditType, rai.SecondAuditType, rai.AdminID, rai.AdminName, rai.SecondAdminID, rai.SecondAdminName, rai.AuditRemark, rai.SecondAuditRemark, rai.AuditAt, rai.SecondAuditAt, rai.CreatedAt, rai.UpdatedAt, rai.ID)
	}
	return err
}

// Save saves the RefundAuditInfo to the database.
func (rai *RefundAuditInfo) Save(ctx context.Context) error {
	if rai.Exists() {
		return rai.Update(ctx)
	}

	return rai.Insert(ctx)
}

// Delete deletes the RefundAuditInfo from the database.
func (rai *RefundAuditInfo) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if rai._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRefundAuditInfoTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rai.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, rai.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, rai.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	rai._deleted = true

	return nil
}

// RefundAuditInfoByID retrieves a row from 'aypcddg.refund_audit_info' as a RefundAuditInfo.
//
// Generated from index 'refund_audit_info_id_pkey'.
func RefundAuditInfoByID(ctx context.Context, id int64, key ...interface{}) (*RefundAuditInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetRefundAuditInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, refund_id, audit_type, second_audit_type, admin_id, admin_name, second_admin_id, second_admin_name, audit_remark, second_audit_remark, audit_at, second_audit_at, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	rai := RefundAuditInfo{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&rai.ID, &rai.RefundID, &rai.AuditType, &rai.SecondAuditType, &rai.AdminID, &rai.AdminName, &rai.SecondAdminID, &rai.SecondAdminName, &rai.AuditRemark, &rai.SecondAuditRemark, &rai.AuditAt, &rai.SecondAuditAt, &rai.CreatedAt, &rai.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&rai.ID, &rai.RefundID, &rai.AuditType, &rai.SecondAuditType, &rai.AdminID, &rai.AdminName, &rai.SecondAdminID, &rai.SecondAdminName, &rai.AuditRemark, &rai.SecondAuditRemark, &rai.AuditAt, &rai.SecondAuditAt, &rai.CreatedAt, &rai.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &rai, nil
}

// RefundAuditInfosByRefundID retrieves a row from 'aypcddg.refund_audit_info' as a RefundAuditInfo.
//
// Generated from index 'refund_id'.
func RefundAuditInfosByRefundID(ctx context.Context, refundID sql.NullInt64, key ...interface{}) ([]*RefundAuditInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetRefundAuditInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, refund_id, audit_type, second_audit_type, admin_id, admin_name, second_admin_id, second_admin_name, audit_remark, second_audit_remark, audit_at, second_audit_at, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE refund_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, refundID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, refundID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, refundID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*RefundAuditInfo, 0)
	for queryData.Next() {
		rai := RefundAuditInfo{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&rai.ID, &rai.RefundID, &rai.AuditType, &rai.SecondAuditType, &rai.AdminID, &rai.AdminName, &rai.SecondAdminID, &rai.SecondAdminName, &rai.AuditRemark, &rai.SecondAuditRemark, &rai.AuditAt, &rai.SecondAuditAt, &rai.CreatedAt, &rai.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &rai)
	}

	return res, nil
}
