// Package xo contains the types for schema 'ddg_local'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// DdgBzj represents a row from 'ddg_local.ddg_bzj'.
type DdgBzj struct {
	FactoryID  int             `json:"factory_id"`  // factory_id
	Price      sql.NullFloat64 `json:"price"`       // price
	TotalPrice sql.NullFloat64 `json:"total_price"` // total_price
	Created    sql.NullInt64   `json:"created"`     // created
	Updated    sql.NullInt64   `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DdgBzj exists in the database.
func (dbVal *DdgBzj) Exists() bool { //ddg_bzj
	return dbVal._exists
}

// Deleted provides information if the DdgBzj has been deleted from the database.
func (dbVal *DdgBzj) Deleted() bool {
	return dbVal._deleted
}

// Get table name
func GetDdgBzjTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ddg_local", "ddg_bzj", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the DdgBzj to the database.
func (dbVal *DdgBzj) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if dbVal._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDdgBzjTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`factory_id, price, total_price, created, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dbVal.FactoryID, dbVal.Price, dbVal.TotalPrice, dbVal.Created, dbVal.Updated)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, dbVal.FactoryID, dbVal.Price, dbVal.TotalPrice, dbVal.Created, dbVal.Updated)
	} else {
		res, err = dbConn.Exec(sqlstr, dbVal.FactoryID, dbVal.Price, dbVal.TotalPrice, dbVal.Created, dbVal.Updated)
	}

	if err != nil {
		return err
	}

	// set existence
	dbVal._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	dbVal.FactoryID = int(id)
	dbVal._exists = true

	return nil
}

// Update updates the DdgBzj in the database.
func (dbVal *DdgBzj) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dbVal._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDdgBzjTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`price = ?, total_price = ?, created = ?, updated = ?` +
		` WHERE factory_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dbVal.Price, dbVal.TotalPrice, dbVal.Created, dbVal.Updated, dbVal.FactoryID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dbVal.Price, dbVal.TotalPrice, dbVal.Created, dbVal.Updated, dbVal.FactoryID)
	} else {
		_, err = dbConn.Exec(sqlstr, dbVal.Price, dbVal.TotalPrice, dbVal.Created, dbVal.Updated, dbVal.FactoryID)
	}
	return err
}

// Save saves the DdgBzj to the database.
func (dbVal *DdgBzj) Save(ctx context.Context) error {
	if dbVal.Exists() {
		return dbVal.Update(ctx)
	}

	return dbVal.Insert(ctx)
}

// Delete deletes the DdgBzj from the database.
func (dbVal *DdgBzj) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dbVal._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDdgBzjTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE factory_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dbVal.FactoryID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dbVal.FactoryID)
	} else {
		_, err = dbConn.Exec(sqlstr, dbVal.FactoryID)
	}

	if err != nil {
		return err
	}

	// set deleted
	dbVal._deleted = true

	return nil
}

// DdgBzjByFactoryID retrieves a row from 'ddg_local.ddg_bzj' as a DdgBzj.
//
// Generated from index 'ddg_bzj_factory_id_pkey'.
func DdgBzjByFactoryID(ctx context.Context, factoryID int, key ...interface{}) (*DdgBzj, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDdgBzjTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`factory_id, price, total_price, created, updated ` +
		`FROM ` + tableName +
		` WHERE factory_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, factoryID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	db := DdgBzj{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, factoryID).Scan(&db.FactoryID, &db.Price, &db.TotalPrice, &db.Created, &db.Updated)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, factoryID).Scan(&db.FactoryID, &db.Price, &db.TotalPrice, &db.Created, &db.Updated)
		if err != nil {
			return nil, err
		}
	}

	return &db, nil
}
