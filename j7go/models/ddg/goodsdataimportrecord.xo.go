// Package j7go contains the types for schema 'ddg_local'.
package ddg

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"go.uber.org/zap"
	"j7go/components"
	"j7go/utils"
	"time"
)

// GoodsDataImportRecord represents a row from 'ddg_local.goods_data_import_record'.
type GoodsDataImportRecord struct {
	ID               int       `json:"id"`                 // id
	GoodsName        string    `json:"goods_name"`         // goods_name
	BarCode          string    `json:"bar_code"`           // bar_code
	BrandName        string    `json:"brand_name"`         // brand_name
	GoodsFormat      string    `json:"goods_format"`       // goods_format
	SupplierName     string    `json:"supplier_name"`      // supplier_name
	SupplierPrice    string    `json:"supplier_price"`     // supplier_price
	GoodsNo          string    `json:"goods_no"`           // goods_no
	Color            string    `json:"color"`              // color
	Size             string    `json:"size"`               // size
	ShippingPrice    string    `json:"shipping_price"`     // shipping_price
	LowSellPrice     string    `json:"low_sell_price"`     // low_sell_price
	UpdateTime       time.Time `json:"update_time"`        // update_time
	BatchNo          int       `json:"batch_no"`           // batch_no
	LastOperatorData string    `json:"last_operator_data"` // last_operator_data

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GoodsDataImportRecord exists in the database.
func (gdir *GoodsDataImportRecord) Exists() bool { //goods_data_import_record
	return gdir._exists
}

// Deleted provides information if the GoodsDataImportRecord has been deleted from the database.
func (gdir *GoodsDataImportRecord) Deleted() bool {
	return gdir._deleted
}

// Get table name
func GetGoodsDataImportRecordTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable(components.E.Opts.DBConfig.Name, "goods_data_import_record", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the GoodsDataImportRecord to the database.
func (gdir *GoodsDataImportRecord) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if gdir._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsDataImportRecordTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`goods_name, bar_code, brand_name, goods_format, supplier_name, supplier_price, goods_no, color, size, shipping_price, low_sell_price, batch_no` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gdir.GoodsName, gdir.BarCode, gdir.BrandName, gdir.GoodsFormat, gdir.SupplierName, gdir.SupplierPrice, gdir.GoodsNo, gdir.Color, gdir.Size, gdir.ShippingPrice, gdir.LowSellPrice, gdir.UpdateTime, gdir.BatchNo, gdir.LastOperatorData)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, gdir.GoodsName, gdir.BarCode, gdir.BrandName, gdir.GoodsFormat, gdir.SupplierName, gdir.SupplierPrice, gdir.GoodsNo, gdir.Color, gdir.Size, gdir.ShippingPrice, gdir.LowSellPrice, gdir.BatchNo)
	} else {
		res, err = dbConn.Exec(sqlstr, gdir.GoodsName, gdir.BarCode, gdir.BrandName, gdir.GoodsFormat, gdir.SupplierName, gdir.SupplierPrice, gdir.GoodsNo, gdir.Color, gdir.Size, gdir.ShippingPrice, gdir.LowSellPrice, gdir.BatchNo)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gdir.ID = int(id)
	gdir._exists = true

	return nil
}

// Update updates the GoodsDataImportRecord in the database.
func (gdir *GoodsDataImportRecord) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gdir._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsDataImportRecordTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`goods_name = ?, bar_code = ?, brand_name = ?, goods_format = ?, supplier_name = ?, supplier_price = ?, goods_no = ?, color = ?, size = ?, shipping_price = ?, low_sell_price = ?, update_time = ?, batch_no = ?, last_operator_data = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gdir.GoodsName, gdir.BarCode, gdir.BrandName, gdir.GoodsFormat, gdir.SupplierName, gdir.SupplierPrice, gdir.GoodsNo, gdir.Color, gdir.Size, gdir.ShippingPrice, gdir.LowSellPrice, gdir.UpdateTime, gdir.BatchNo, gdir.LastOperatorData, gdir.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gdir.GoodsName, gdir.BarCode, gdir.BrandName, gdir.GoodsFormat, gdir.SupplierName, gdir.SupplierPrice, gdir.GoodsNo, gdir.Color, gdir.Size, gdir.ShippingPrice, gdir.LowSellPrice, gdir.UpdateTime, gdir.BatchNo, gdir.LastOperatorData, gdir.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, gdir.GoodsName, gdir.BarCode, gdir.BrandName, gdir.GoodsFormat, gdir.SupplierName, gdir.SupplierPrice, gdir.GoodsNo, gdir.Color, gdir.Size, gdir.ShippingPrice, gdir.LowSellPrice, gdir.UpdateTime, gdir.BatchNo, gdir.LastOperatorData, gdir.ID)
	}
	return err
}

// Save saves the GoodsDataImportRecord to the database.
func (gdir *GoodsDataImportRecord) Save(ctx context.Context) error {
	if gdir.Exists() {
		return gdir.Update(ctx)
	}

	return gdir.Insert(ctx)
}

// Delete deletes the GoodsDataImportRecord from the database.
func (gdir *GoodsDataImportRecord) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gdir._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsDataImportRecordTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gdir.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gdir.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, gdir.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	gdir._deleted = true

	return nil
}

// GoodsDataImportRecordByID retrieves a row from 'ddg_local.goods_data_import_record' as a GoodsDataImportRecord.
//
// Generated from index 'goods_data_import_record_id_pkey'.
func GoodsDataImportRecordByID(ctx context.Context, id int, key ...interface{}) (*GoodsDataImportRecord, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsDataImportRecordTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, goods_name, bar_code, brand_name, goods_format, supplier_name, supplier_price, goods_no, color, size, shipping_price, low_sell_price, update_time, batch_no, last_operator_data ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	gdir := GoodsDataImportRecord{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&gdir.ID, &gdir.GoodsName, &gdir.BarCode, &gdir.BrandName, &gdir.GoodsFormat, &gdir.SupplierName, &gdir.SupplierPrice, &gdir.GoodsNo, &gdir.Color, &gdir.Size, &gdir.ShippingPrice, &gdir.LowSellPrice, &gdir.UpdateTime, &gdir.BatchNo, &gdir.LastOperatorData)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&gdir.ID, &gdir.GoodsName, &gdir.BarCode, &gdir.BrandName, &gdir.GoodsFormat, &gdir.SupplierName, &gdir.SupplierPrice, &gdir.GoodsNo, &gdir.Color, &gdir.Size, &gdir.ShippingPrice, &gdir.LowSellPrice, &gdir.UpdateTime, &gdir.BatchNo, &gdir.LastOperatorData)
		if err != nil {
			return nil, err
		}
	}

	return &gdir, nil
}
func SelectLastRow(ctx context.Context) (*GoodsDataImportRecord, error) {
	var err error
	var dbConn *sql.DB
	tableName, err := GetGoodsDataImportRecordTableName()
	sqlStr := `SELECT ` +
		`id, goods_name, batch_no ` +
		`FROM ` + tableName + ` ORDER BY batch_no DESC LIMIT 1`
	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var dest []interface{}

	gdir := GoodsDataImportRecord{
		_exists: true,
	}
	if tx != nil {
		err = tx.QueryRow(sqlStr, dest...).Scan(&gdir.ID, &gdir.GoodsName, &gdir.BatchNo)
	} else {
		err = dbConn.QueryRow(sqlStr, dest...).Scan(&gdir.ID, &gdir.GoodsName, &gdir.BatchNo)
	}
	if err != nil {
		return nil, err
	}
	return &gdir, nil
}
