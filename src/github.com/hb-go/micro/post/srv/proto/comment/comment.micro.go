// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: post/srv/proto/comment/comment.proto

/*
Package go_micro_srv_post_comment is a generated protocol buffer package.

It is generated from these files:
	post/srv/proto/comment/comment.proto

It has these top-level messages:
	Rsp
	CommentDto
*/
package go_micro_srv_post_comment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_post "github.com/hb-go/micro/post/srv/proto/post"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = go_micro_srv_post.Req{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Comment service

type CommentService interface {
	GetComments(ctx context.Context, in *go_micro_srv_post.Req, opts ...client.CallOption) (*Rsp, error)
}

type commentService struct {
	c    client.Client
	name string
}

func NewCommentService(name string, c client.Client) CommentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.post.comment"
	}
	return &commentService{
		c:    c,
		name: name,
	}
}

func (c *commentService) GetComments(ctx context.Context, in *go_micro_srv_post.Req, opts ...client.CallOption) (*Rsp, error) {
	req := c.c.NewRequest(c.name, "Comment.GetComments", in)
	out := new(Rsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Comment service

type CommentHandler interface {
	GetComments(context.Context, *go_micro_srv_post.Req, *Rsp) error
}

func RegisterCommentHandler(s server.Server, hdlr CommentHandler, opts ...server.HandlerOption) {
	type comment interface {
		GetComments(ctx context.Context, in *go_micro_srv_post.Req, out *Rsp) error
	}
	type Comment struct {
		comment
	}
	h := &commentHandler{hdlr}
	s.Handle(s.NewHandler(&Comment{h}, opts...))
}

type commentHandler struct {
	CommentHandler
}

func (h *commentHandler) GetComments(ctx context.Context, in *go_micro_srv_post.Req, out *Rsp) error {
	return h.CommentHandler.GetComments(ctx, in, out)
}
