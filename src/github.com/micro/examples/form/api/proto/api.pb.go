// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/examples/form/api/proto/api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/examples/form/api/proto/api.proto

It has these top-level messages:
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_api "github.com/micro/go-api/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Form service

type FormClient interface {
	// regular form
	Submit(ctx context.Context, in *go_api.Request, opts ...grpc.CallOption) (*go_api.Response, error)
	// multipart form
	Multipart(ctx context.Context, in *go_api.Request, opts ...grpc.CallOption) (*go_api.Response, error)
}

type formClient struct {
	cc *grpc.ClientConn
}

func NewFormClient(cc *grpc.ClientConn) FormClient {
	return &formClient{cc}
}

func (c *formClient) Submit(ctx context.Context, in *go_api.Request, opts ...grpc.CallOption) (*go_api.Response, error) {
	out := new(go_api.Response)
	err := grpc.Invoke(ctx, "/Form/Submit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formClient) Multipart(ctx context.Context, in *go_api.Request, opts ...grpc.CallOption) (*go_api.Response, error) {
	out := new(go_api.Response)
	err := grpc.Invoke(ctx, "/Form/Multipart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Form service

type FormServer interface {
	// regular form
	Submit(context.Context, *go_api.Request) (*go_api.Response, error)
	// multipart form
	Multipart(context.Context, *go_api.Request) (*go_api.Response, error)
}

func RegisterFormServer(s *grpc.Server, srv FormServer) {
	s.RegisterService(&_Form_serviceDesc, srv)
}

func _Form_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(go_api.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Form/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServer).Submit(ctx, req.(*go_api.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Form_Multipart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(go_api.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServer).Multipart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Form/Multipart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServer).Multipart(ctx, req.(*go_api.Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Form_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Form",
	HandlerType: (*FormServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _Form_Submit_Handler,
		},
		{
			MethodName: "Multipart",
			Handler:    _Form_Multipart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/micro/examples/form/api/proto/api.proto",
}

func init() { proto.RegisterFile("github.com/micro/examples/form/api/proto/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xcd, 0x4c, 0x2e, 0xca, 0xd7, 0x4f, 0xad, 0x48,
	0xcc, 0x2d, 0xc8, 0x49, 0x2d, 0xd6, 0x4f, 0xcb, 0x2f, 0xca, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x2f,
	0x28, 0xca, 0x2f, 0xc9, 0x07, 0xb1, 0xf4, 0xc0, 0x2c, 0x29, 0x75, 0x0c, 0x3d, 0xe9, 0xf9, 0xba,
	0x58, 0x14, 0x1a, 0xa5, 0x73, 0xb1, 0xb8, 0xe5, 0x17, 0xe5, 0x0a, 0xe9, 0x72, 0xb1, 0x05, 0x97,
	0x26, 0xe5, 0x66, 0x96, 0x08, 0xf1, 0xeb, 0xa5, 0xe7, 0xeb, 0x81, 0x14, 0x04, 0xa5, 0x16, 0x96,
	0xa6, 0x16, 0x97, 0x48, 0x09, 0x20, 0x04, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x95, 0x18, 0x84,
	0x0c, 0xb8, 0x38, 0x7d, 0x4b, 0x73, 0x4a, 0x32, 0x0b, 0x12, 0x8b, 0x88, 0xd3, 0x91, 0xc4, 0x06,
	0xb6, 0xcf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x06, 0x9f, 0x9d, 0x9d, 0xce, 0x00, 0x00, 0x00,
}
